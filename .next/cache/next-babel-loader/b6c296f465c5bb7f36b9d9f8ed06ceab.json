{"ast":null,"code":"var _jsxFileName = \"/Volumes/MacData/work/ciscord-frontend.git/components/Navbar/Navbar.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport { useState, useContext, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { useMutation, useLazyQuery } from '@apollo/client';\nimport { useKeyboardShortcut } from 'hooks';\nimport { UserContext } from 'context/UserContext';\nimport { COMPANY_NAME } from 'utils/config';\nimport { GET_UNREAD_NOTIFICATIONS, NOTIFICATIONS_SUBSCRIPTION, MARK_NOTIFICATIONS_AS_READ } from 'apis/Notification';\nimport { NotificationsIcon, ProfileIcon, CloseIcon, MessageIcon } from 'components/UI/Icons';\nimport Badge from 'components/UI/Badge';\nimport Tabs from './Tabs/Tabs';\nimport NotificationsPopup from './Notifications';\nimport MorePopup from './More';\nimport NavbarPlaceholder from './Navbar.placeholder';\nimport * as S from './Navbar.styled';\nconst Navbar = () => {\n  const {\n    0: subscribed,\n    1: setSubscribed\n  } = useState(false);\n  const {\n    user,\n    loading: userLoading\n  } = useContext(UserContext);\n  const {\n    0: showNotifications,\n    1: setShowNotifications\n  } = useState(false);\n  const {\n    0: showMore,\n    1: setShowMore\n  } = useState(false);\n  const router = useRouter();\n  const [markNotificationsAsRead] = useMutation(MARK_NOTIFICATIONS_AS_READ);\n  const [getUnreadNotification, {\n    data: {\n      unreadNotifications = []\n    } = {},\n    // loading: unreadNotificationsLoading,\n    subscribeToMore,\n    refetch\n  }] = useLazyQuery(GET_UNREAD_NOTIFICATIONS, {\n    fetchPolicy: 'cache-and-network'\n  });\n  useKeyboardShortcut({\n    B: () => router.push(`/[company]/communities`, `/${COMPANY_NAME()}/communities`, {\n      shallow: true\n    })\n  });\n  useEffect(() => {\n    getUnreadNotification();\n  }, []);\n  useEffect(() => {\n    if (user && subscribeToMore && !subscribed) {\n      setSubscribed(true);\n      subscribeToMore({\n        document: NOTIFICATIONS_SUBSCRIPTION,\n        variables: {\n          receiverId: user.id,\n          tenant: COMPANY_NAME()\n        },\n        updateQuery: (prev, {\n          subscriptionData\n        }) => {\n          if (!subscriptionData.data) return prev;\n          const {\n            newNotification\n          } = subscriptionData.data;\n          // NotificationSound.play();\n          if (prev.unreadNotifications.filter(e => e.id === newNotification.id).length === 0) {\n            return _objectSpread({}, prev, {\n              unreadNotifications: [newNotification, ...prev.unreadNotifications]\n            });\n          }\n          return prev;\n        }\n      });\n    }\n  }, [user, subscribeToMore]);\n  if (userLoading) {\n    return __jsx(NavbarPlaceholder, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 12\n      }\n    });\n  }\n  const checkUnread = async () => {\n    await refetch();\n  };\n  const onDirectChat = async () => {\n    await markNotificationsAsRead({\n      variables: {\n        type: 'direct'\n      }\n    });\n    await refetch();\n    router.push(`/[company]/direct`, `/${COMPANY_NAME()}/direct`, {\n      shallow: true\n    });\n  };\n  const unreadNotificationsCount = unreadNotifications.filter(e => e.type === 'mention').length;\n  const unreadDirectCount = unreadNotifications.filter(e => e.type === 'direct').length;\n  return __jsx(React.Fragment, null, __jsx(S.NavbarContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, __jsx(S.IconsWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, __jsx(S.Icons, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }, __jsx(S.IconBox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, __jsx(MessageIcon, {\n    onClick: () => onDirectChat(),\n    active: unreadDirectCount > 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 15\n    }\n  })), __jsx(S.IconBox, {\n    second: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }, unreadNotificationsCount > 0 ? __jsx(Badge, {\n    id: \"vs-icon-notifications\",\n    count: unreadNotificationsCount,\n    onClick: () => setShowNotifications(!showNotifications),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }\n  }) : __jsx(NotificationsIcon, {\n    id: \"vs-icon-notifications\",\n    active: showNotifications,\n    onClick: () => setShowNotifications(!showNotifications),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }\n  })), __jsx(S.IconBox, {\n    last: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }, __jsx(ProfileIcon, {\n    onClick: () => setShowMore(!showMore),\n    active: showMore,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 15\n    }\n  })))), __jsx(Tabs, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }), __jsx(S.AddCommunity, {\n    onClick: () => router.push(`/[company]/communities`, `/${COMPANY_NAME()}/communities`, {\n      shallow: true\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }), __jsx(CloseIcon, {\n    id: \"vs-close-widget\",\n    onClick: () => window.parent.postMessage({\n      message: 'close-widget'\n    }, '*'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }\n  })), showMore && __jsx(MorePopup, {\n    opened: showMore,\n    close: () => setShowMore(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 20\n    }\n  }), __jsx(NotificationsPopup, {\n    opened: showNotifications,\n    close: () => setShowNotifications(false),\n    onMarkAsRead: checkUnread,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }\n  }));\n};\nexport default Navbar;","map":{"version":3,"names":["useState","useContext","useEffect","useRouter","useMutation","useLazyQuery","useKeyboardShortcut","UserContext","COMPANY_NAME","GET_UNREAD_NOTIFICATIONS","NOTIFICATIONS_SUBSCRIPTION","MARK_NOTIFICATIONS_AS_READ","NotificationsIcon","ProfileIcon","CloseIcon","MessageIcon","Badge","Tabs","NotificationsPopup","MorePopup","NavbarPlaceholder","S","Navbar","subscribed","setSubscribed","user","loading","userLoading","showNotifications","setShowNotifications","showMore","setShowMore","router","markNotificationsAsRead","getUnreadNotification","data","unreadNotifications","subscribeToMore","refetch","fetchPolicy","B","push","shallow","document","variables","receiverId","id","tenant","updateQuery","prev","subscriptionData","newNotification","filter","e","length","checkUnread","onDirectChat","type","unreadNotificationsCount","unreadDirectCount","window","parent","postMessage","message"],"sources":["/Volumes/MacData/work/ciscord-frontend.git/components/Navbar/Navbar.js"],"sourcesContent":["import { useState, useContext, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { useMutation, useLazyQuery } from '@apollo/client';\nimport { useKeyboardShortcut } from 'hooks';\n\nimport { UserContext } from 'context/UserContext';\nimport { COMPANY_NAME } from 'utils/config';\nimport {\n  GET_UNREAD_NOTIFICATIONS,\n  NOTIFICATIONS_SUBSCRIPTION,\n  MARK_NOTIFICATIONS_AS_READ,\n} from 'apis/Notification';\n\nimport { NotificationsIcon, ProfileIcon, CloseIcon, MessageIcon } from 'components/UI/Icons';\nimport Badge from 'components/UI/Badge';\nimport Tabs from './Tabs/Tabs';\nimport NotificationsPopup from './Notifications';\nimport MorePopup from './More';\n\nimport NavbarPlaceholder from './Navbar.placeholder';\nimport * as S from './Navbar.styled';\n\nconst Navbar = () => {\n  const [subscribed, setSubscribed] = useState(false);\n\n  const { user, loading: userLoading } = useContext(UserContext);\n\n  const [showNotifications, setShowNotifications] = useState(false);\n  const [showMore, setShowMore] = useState(false);\n\n  const router = useRouter();\n\n  const [markNotificationsAsRead] = useMutation(MARK_NOTIFICATIONS_AS_READ);\n\n  const [\n    getUnreadNotification,\n    {\n      data: { unreadNotifications = [] } = {},\n      // loading: unreadNotificationsLoading,\n      subscribeToMore,\n      refetch,\n    },\n  ] = useLazyQuery(GET_UNREAD_NOTIFICATIONS, { fetchPolicy: 'cache-and-network' });\n\n  useKeyboardShortcut({\n    B: () =>\n      router.push(`/[company]/communities`, `/${COMPANY_NAME()}/communities`, {\n        shallow: true,\n      }),\n  });\n\n  useEffect(() => {\n    getUnreadNotification();\n  }, []);\n  useEffect(() => {\n    if (user && subscribeToMore && !subscribed) {\n      setSubscribed(true);\n      subscribeToMore({\n        document: NOTIFICATIONS_SUBSCRIPTION,\n        variables: { receiverId: user.id, tenant: COMPANY_NAME() },\n        updateQuery: (prev, { subscriptionData }) => {\n          if (!subscriptionData.data) return prev;\n          const { newNotification } = subscriptionData.data;\n          // NotificationSound.play();\n          if (prev.unreadNotifications.filter(e => e.id === newNotification.id).length === 0) {\n            return {\n              ...prev,\n              unreadNotifications: [newNotification, ...prev.unreadNotifications],\n            };\n          }\n          return prev;\n        },\n      });\n    }\n  }, [user, subscribeToMore]);\n\n  if (userLoading) {\n    return <NavbarPlaceholder />;\n  }\n\n  const checkUnread = async () => {\n    await refetch();\n  };\n\n  const onDirectChat = async () => {\n    await markNotificationsAsRead({ variables: { type: 'direct' } });\n    await refetch();\n    router.push(`/[company]/direct`, `/${COMPANY_NAME()}/direct`, {\n      shallow: true,\n    });\n  };\n\n  const unreadNotificationsCount = unreadNotifications.filter(e => e.type === 'mention').length;\n  const unreadDirectCount = unreadNotifications.filter(e => e.type === 'direct').length;\n\n  return (\n    <>\n      <S.NavbarContainer>\n        <S.IconsWrapper>\n          <S.Icons>\n            <S.IconBox>\n              <MessageIcon onClick={() => onDirectChat()} active={unreadDirectCount > 0} />\n            </S.IconBox>\n            <S.IconBox second>\n              {unreadNotificationsCount > 0 ? (\n                <Badge\n                  id=\"vs-icon-notifications\"\n                  count={unreadNotificationsCount}\n                  onClick={() => setShowNotifications(!showNotifications)}\n                />\n              ) : (\n                <NotificationsIcon\n                  id=\"vs-icon-notifications\"\n                  active={showNotifications}\n                  onClick={() => setShowNotifications(!showNotifications)}\n                />\n              )}\n            </S.IconBox>\n            <S.IconBox last>\n              <ProfileIcon onClick={() => setShowMore(!showMore)} active={showMore} />\n            </S.IconBox>\n          </S.Icons>\n        </S.IconsWrapper>\n\n        <Tabs />\n\n        <S.AddCommunity\n          onClick={() =>\n            router.push(`/[company]/communities`, `/${COMPANY_NAME()}/communities`, {\n              shallow: true,\n            })\n          }\n        />\n        <CloseIcon\n          id=\"vs-close-widget\"\n          onClick={() => window.parent.postMessage({ message: 'close-widget' }, '*')}\n        />\n      </S.NavbarContainer>\n      {showMore && <MorePopup opened={showMore} close={() => setShowMore(false)} />}\n      <NotificationsPopup\n        opened={showNotifications}\n        close={() => setShowNotifications(false)}\n        onMarkAsRead={checkUnread}\n      />\n    </>\n  );\n};\n\nexport default Navbar;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}