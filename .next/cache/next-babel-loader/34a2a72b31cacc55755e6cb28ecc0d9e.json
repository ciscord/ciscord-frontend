{"ast":null,"code":"var _jsxFileName = \"/Volumes/MacData/work/ciscord-frontend.git/context/UploadManager.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport { useState, createContext, useEffect, useCallback } from 'react';\nimport { v4 as uuid } from 'uuid';\nconst UploadManagerContext = createContext({\n  uploadQueue: []\n});\nUploadManagerContext.displayName = 'UploadManager';\nconst UploadManagerProvider = ({\n  children\n}) => {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: uploadQueue,\n    1: setUploadQueue\n  } = useState([]);\n  const {\n    0: maxSteps,\n    1: setMaxStep\n  } = useState(0);\n  const {\n    0: sendMessageStatus,\n    1: setSendMessageStatus\n  } = useState({\n    label: '',\n    step: 0\n  });\n  const upload = async () => {\n    const nextUpload = uploadQueue[0];\n    if (nextUpload && !loading) {\n      setLoading(true);\n      setMaxStep(nextUpload.data.attachments.length + 4);\n      setSendMessageStatus({\n        label: 'Message processing',\n        step: 1\n      });\n      const uploadList = nextUpload.data.attachments.map(async file => {\n        const url = `https://biznessapps.org/graphql/presign`;\n        const filename = uuid().slice(0, 8) + file.name;\n        const params = new URLSearchParams({\n          key: filename\n        });\n        let resp = await fetch(url, {\n          method: \"POST\",\n          body: params\n        });\n        let presignResp = await resp.json();\n        resp = await fetch(presignResp.url, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": file.type\n          },\n          body: file\n        });\n        if (filename) {\n          setSendMessageStatus(({\n            step\n          }) => ({\n            label: `${step - 2} / ${nextUpload.data.attachments.length}`,\n            step: step + 1\n          }));\n        }\n        return filename;\n      });\n      setSendMessageStatus({\n        label: 'File uploading',\n        step: 2\n      });\n      const sendMessage = async () => {\n        const filesUrlList = await Promise.all(uploadList);\n        setSendMessageStatus(({\n          step\n        }) => ({\n          label: 'Message sending',\n          step: step + 1\n        }));\n        await nextUpload.onSendMessage(filesUrlList);\n        setSendMessageStatus({\n          label: 'Success',\n          step: setSendMessageStatus.step + 1\n        });\n        setMaxStep(0);\n        setSendMessageStatus({\n          label: '',\n          step: 0\n        });\n        setUploadQueue(currentQueue => currentQueue.slice(1));\n        setLoading(false);\n      };\n      sendMessage();\n    }\n  };\n  useEffect(() => {\n    upload();\n  }, [uploadQueue.length, loading]);\n  const addUploadToQueue = useCallback(uploadItem => {\n    setUploadQueue(currentQuery => [...currentQuery, uploadItem]);\n  }, []);\n  return __jsx(UploadManagerContext.Provider, {\n    value: {\n      uploadQueue,\n      addUploadToQueue,\n      uploadProgress: _objectSpread({\n        maxSteps\n      }, sendMessageStatus)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, children);\n};\nexport { UploadManagerProvider as default, UploadManagerContext };","map":{"version":3,"names":["useState","createContext","useEffect","useCallback","v4","uuid","UploadManagerContext","uploadQueue","displayName","UploadManagerProvider","children","loading","setLoading","setUploadQueue","maxSteps","setMaxStep","sendMessageStatus","setSendMessageStatus","label","step","upload","nextUpload","data","attachments","length","uploadList","map","file","url","filename","slice","name","params","URLSearchParams","key","resp","fetch","method","body","presignResp","json","headers","type","sendMessage","filesUrlList","Promise","all","onSendMessage","currentQueue","addUploadToQueue","uploadItem","currentQuery","uploadProgress","default"],"sources":["/Volumes/MacData/work/ciscord-frontend.git/context/UploadManager.js"],"sourcesContent":["import { useState, createContext, useEffect, useCallback } from 'react';\nimport { v4 as uuid } from 'uuid';\n\nconst UploadManagerContext = createContext({\n  uploadQueue: [],\n});\n\nUploadManagerContext.displayName = 'UploadManager';\n\nconst UploadManagerProvider = ({ children }) => {\n  const [loading, setLoading] = useState(false);\n  const [uploadQueue, setUploadQueue] = useState([]);\n\n  const [maxSteps, setMaxStep] = useState(0);\n  const [sendMessageStatus, setSendMessageStatus] = useState({\n    label: '',\n    step: 0,\n  });\n\n  const upload = async () => {\n    const nextUpload = uploadQueue[0];\n    if (nextUpload && !loading) {\n      setLoading(true);\n      setMaxStep(nextUpload.data.attachments.length + 4);\n      setSendMessageStatus({ label: 'Message processing', step: 1 });\n\n      const uploadList = nextUpload.data.attachments.map(async file => {\n        const url = `https://biznessapps.org/graphql/presign`;\n        const filename = uuid().slice(0,8) + file.name;\n        const params = new URLSearchParams({\n          key: filename,\n        });\n        let resp = await fetch(url, {\n          method: \"POST\",\n          body: params,\n        });\n        let presignResp = await resp.json();\n\n        resp = await fetch(presignResp.url, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": file.type,\n          },\n          body: file,\n        });\n\n        if (filename) {\n          setSendMessageStatus(({ step }) => ({\n            label: `${step - 2} / ${nextUpload.data.attachments.length}`,\n            step: step + 1,\n          }));\n        }\n\n        return filename;\n      });\n\n      setSendMessageStatus({ label: 'File uploading', step: 2 });\n\n      const sendMessage = async () => {\n        const filesUrlList = await Promise.all(uploadList);\n        setSendMessageStatus(({ step }) => ({\n          label: 'Message sending',\n          step: step + 1,\n        }));\n\n        await nextUpload.onSendMessage(filesUrlList);\n        setSendMessageStatus({\n          label: 'Success',\n          step: setSendMessageStatus.step + 1,\n        });\n\n        setMaxStep(0);\n        setSendMessageStatus({\n          label: '',\n          step: 0,\n        });\n        setUploadQueue(currentQueue => currentQueue.slice(1));\n        setLoading(false);\n      };\n\n      sendMessage();\n    }\n  }\n  useEffect(() => {\n    upload()\n  }, [uploadQueue.length, loading]);\n\n  const addUploadToQueue = useCallback(uploadItem => {\n    setUploadQueue(currentQuery => [...currentQuery, uploadItem]);\n  }, []);\n\n  return (\n    <UploadManagerContext.Provider\n      value={{\n        uploadQueue,\n        addUploadToQueue,\n        uploadProgress: {\n          maxSteps,\n          ...sendMessageStatus,\n        },\n      }}\n    >\n      {children}\n    </UploadManagerContext.Provider>\n  );\n};\n\nexport { UploadManagerProvider as default, UploadManagerContext };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}