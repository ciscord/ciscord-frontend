{"ast":null,"code":"var _jsxFileName = \"/Volumes/MacData/work/ciscord-frontend.git/components/Navbar/Notifications/NotificationsPopup.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport { useState, useEffect, useContext } from 'react';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { UserContext } from 'context/UserContext';\nimport { COMPANY_NAME } from 'utils/config';\nimport { GET_NOTIFICATIONS, NOTIFICATIONS_SUBSCRIPTION, MARK_NOTIFICATIONS_AS_READ, MARK_NOTIFICATION_AS_READ } from 'apis/Notification';\nimport closeIcon from 'public/icons/close.svg';\nimport Notification from './Notification/Notification';\nimport Placeholder from './NotificationsPopup.placeholder';\nimport * as S from './NotificationsPopup.styled';\n\n// import notificationSound from 'public/sounds/notification.wav';\n// const NotificationSound = new Audio(notificationSound);\n\nconst Notifications = ({\n  opened,\n  close,\n  onMarkAsRead\n}) => {\n  const {\n    0: subscribed,\n    1: setSubscribed\n  } = useState(false);\n  // const [active, setActiveTab] = useState('all');\n  const {\n    user\n  } = useContext(UserContext);\n  const {\n    data: {\n      notifications\n    } = {},\n    refetch,\n    loading: notificationsLoading,\n    subscribeToMore\n  } = useQuery(GET_NOTIFICATIONS, {\n    fetchPolicy: 'cache-and-network'\n  });\n  const [markNotificationsAsRead] = useMutation(MARK_NOTIFICATIONS_AS_READ);\n  const [markNotificationAsRead] = useMutation(MARK_NOTIFICATION_AS_READ);\n  useEffect(() => {\n    if (user && !subscribed) {\n      setSubscribed(true);\n      subscribeToMore({\n        document: NOTIFICATIONS_SUBSCRIPTION,\n        variables: {\n          receiverId: user.id,\n          tenant: COMPANY_NAME()\n        },\n        updateQuery: (prev, {\n          subscriptionData\n        }) => {\n          if (!subscriptionData.data) return prev;\n          const {\n            newNotification\n          } = subscriptionData.data;\n          if (newNotification.type === 'direct') return prev;\n          if (prev.notifications.filter(e => e.id === newNotification.id).length === 0) {\n            return _objectSpread({}, prev, {\n              notifications: [newNotification, ...prev.notifications]\n            });\n          }\n          return prev;\n        }\n      });\n    }\n  }, [user]);\n  useEffect(() => {\n    const listener = document.body.addEventListener('click', event => {\n      const modalContainer = event.target.closest('#modal-notifications');\n      const notificationContainer = event.target.closest('#vs-icon-notifications');\n      if (!modalContainer && !notificationContainer) {\n        close();\n      }\n    });\n    return () => document.body.removeEventListener('click', listener);\n  }, []);\n  const markAllAsRead = async () => {\n    await markNotificationsAsRead({\n      variables: {\n        type: 'mention'\n      }\n    });\n    await onMarkAsRead();\n  };\n  const markOneAsRead = async data => {\n    await markNotificationAsRead(data);\n    await onMarkAsRead();\n  };\n  if (!notifications) {\n    return __jsx(Placeholder, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 12\n      }\n    });\n  }\n  return __jsx(S.Container, {\n    opened: opened,\n    id: \"modal-notifications\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, __jsx(S.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, __jsx(S.Heading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, __jsx(S.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }, \"Recent mentions\")), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, __jsx(S.MarkAsRead, {\n    onClick: markAllAsRead,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }, \"Mark all read\"), __jsx(S.CloseIcon, {\n    onClick: close,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }, __jsx(\"use\", {\n    xlinkHref: `${closeIcon}#icon-close`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  })))), __jsx(S.NotificationsWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }, notifications.length > 0 ? notifications.map(notification => __jsx(Notification, {\n    key: notification.id,\n    notification: notification,\n    closePopup: close,\n    onClick: markOneAsRead,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  })) : __jsx(\"div\", {\n    style: {\n      opacity: 0.2,\n      paddingLeft: 9\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 11\n    }\n  }, \"No notifications\")));\n};\nexport default Notifications;","map":{"version":3,"names":["useState","useEffect","useContext","useQuery","useMutation","UserContext","COMPANY_NAME","GET_NOTIFICATIONS","NOTIFICATIONS_SUBSCRIPTION","MARK_NOTIFICATIONS_AS_READ","MARK_NOTIFICATION_AS_READ","closeIcon","Notification","Placeholder","S","Notifications","opened","close","onMarkAsRead","subscribed","setSubscribed","user","data","notifications","refetch","loading","notificationsLoading","subscribeToMore","fetchPolicy","markNotificationsAsRead","markNotificationAsRead","document","variables","receiverId","id","tenant","updateQuery","prev","subscriptionData","newNotification","type","filter","e","length","listener","body","addEventListener","event","modalContainer","target","closest","notificationContainer","removeEventListener","markAllAsRead","markOneAsRead","map","notification","opacity","paddingLeft"],"sources":["/Volumes/MacData/work/ciscord-frontend.git/components/Navbar/Notifications/NotificationsPopup.js"],"sourcesContent":["import { useState, useEffect, useContext } from 'react';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { UserContext } from 'context/UserContext';\nimport { COMPANY_NAME } from 'utils/config';\nimport {\n  GET_NOTIFICATIONS,\n  NOTIFICATIONS_SUBSCRIPTION,\n  MARK_NOTIFICATIONS_AS_READ,\n  MARK_NOTIFICATION_AS_READ,\n} from 'apis/Notification';\n\nimport closeIcon from 'public/icons/close.svg';\n\nimport Notification from './Notification/Notification';\nimport Placeholder from './NotificationsPopup.placeholder';\nimport * as S from './NotificationsPopup.styled';\n\n// import notificationSound from 'public/sounds/notification.wav';\n// const NotificationSound = new Audio(notificationSound);\n\nconst Notifications = ({ opened, close, onMarkAsRead }) => {\n  const [subscribed, setSubscribed] = useState(false);\n  // const [active, setActiveTab] = useState('all');\n  const { user } = useContext(UserContext);\n  const {\n    data: { notifications } = {},\n    refetch,\n    loading: notificationsLoading,\n    subscribeToMore,\n  } = useQuery(GET_NOTIFICATIONS, { fetchPolicy: 'cache-and-network' });\n\n  const [markNotificationsAsRead] = useMutation(MARK_NOTIFICATIONS_AS_READ);\n  const [markNotificationAsRead] = useMutation(MARK_NOTIFICATION_AS_READ);\n\n  useEffect(() => {\n    if (user && !subscribed) {\n      setSubscribed(true);\n      subscribeToMore({\n        document: NOTIFICATIONS_SUBSCRIPTION,\n        variables: { receiverId: user.id, tenant: COMPANY_NAME() },\n        updateQuery: (prev, { subscriptionData }) => {\n          if (!subscriptionData.data) return prev;\n          const { newNotification } = subscriptionData.data;\n          if (newNotification.type === 'direct') return prev;\n          if (prev.notifications.filter(e => e.id === newNotification.id).length === 0) {\n            return {\n              ...prev,\n              notifications: [newNotification, ...prev.notifications],\n            };\n          }\n          return prev;\n        },\n      });\n    }\n  }, [user]);\n\n  useEffect(() => {\n    const listener = document.body.addEventListener('click', event => {\n      const modalContainer = event.target.closest('#modal-notifications');\n      const notificationContainer = event.target.closest('#vs-icon-notifications');\n      if (!modalContainer && !notificationContainer) {\n        close();\n      }\n    });\n    return () => document.body.removeEventListener('click', listener);\n  }, []);\n\n  const markAllAsRead = async () => {\n    await markNotificationsAsRead({ variables: { type: 'mention' } });\n\n    await onMarkAsRead();\n  };\n\n  const markOneAsRead = async data => {\n    await markNotificationAsRead(data);\n    await onMarkAsRead();\n  };\n\n  if (!notifications) {\n    return <Placeholder />;\n  }\n\n  return (\n    <S.Container opened={opened} id=\"modal-notifications\">\n      <S.Header>\n        <S.Heading>\n          <S.Title>Recent mentions</S.Title>\n          {/* notifications.length > 0 && (\n            <S.Count>{notifications.length}</S.Count>\n          ) */}\n        </S.Heading>\n        <div>\n          <S.MarkAsRead onClick={markAllAsRead}>Mark all read</S.MarkAsRead>\n          <S.CloseIcon onClick={close}>\n            <use xlinkHref={`${closeIcon}#icon-close`} />\n          </S.CloseIcon>\n        </div>\n      </S.Header>\n\n      {/*\n        <S.Nav>\n          <div>\n            <p\n              onClick={() => setActiveTab('all')}\n              className={`tab ${active === 'all' ? 'active' : ''}`}\n            >\n              All servers\n            </p>\n            <p\n              onClick={() => setActiveTab('this')}\n              className={`tab ${active === 'this' ? 'active' : ''}`}\n            >\n              This server\n            </p>\n          </div>\n          <div className=\"display\">\n            Display:<span>{` `}everithing</span>\n          </div>\n        </S.Nav>\n        */}\n\n      <S.NotificationsWrapper>\n        {notifications.length > 0 ? (\n          notifications.map(notification => (\n            <Notification\n              key={notification.id}\n              notification={notification}\n              closePopup={close}\n              onClick={markOneAsRead}\n            />\n          ))\n        ) : (\n          <div style={{ opacity: 0.2, paddingLeft: 9 }}>No notifications</div>\n        )}\n      </S.NotificationsWrapper>\n    </S.Container>\n  );\n};\n\nexport default Notifications;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}