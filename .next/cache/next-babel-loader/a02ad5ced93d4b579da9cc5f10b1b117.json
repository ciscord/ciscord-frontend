{"ast":null,"code":"import moment from 'moment';\nimport ReactHtmlParser from 'react-html-parser';\nmoment.updateLocale('en', {\n  relativeTime: {\n    future: 'in %s',\n    past: '%s',\n    s: '',\n    ss: '%ss',\n    m: '1m',\n    mm: '%dm',\n    h: '1h',\n    hh: '%dh',\n    d: '1d',\n    dd: '%dd',\n    M: '1m',\n    MM: '%dM',\n    y: '1y',\n    yy: '%dY'\n  }\n});\nexport var chatTime = function chatTime(time) {\n  var date1 = new Date(time);\n  var date2 = new Date();\n  var diffTime = Math.abs(date2 - date1);\n  var diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\n  if (diffDays > 0) {\n    return moment(time).format('L');\n  }\n  return moment(time).format('LT');\n};\nexport var transformMentions = function transformMentions(message) {\n  return message.replace(/@(\\[[^]*\\]\\([^ ]*?\\))/g, function (mention) {\n    return \"<a class=\\\"mention\\\">@\".concat(mention.match(/\\[(.*)\\]/)[1], \"</a>\");\n  });\n};\nvar transformLinebreaks = function transformLinebreaks(message, multi) {\n  if (multi) return message.replace(/(?:\\r\\n|\\r|\\n)/g, '<br>');\n  return message.match(/^.*$/m)[0];\n};\nvar transformUrls = function transformUrls(message) {\n  return message.replace(/https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)?/gi, function (url) {\n    return \"<a href=\\\"\".concat(url, \"\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\" class=\\\"Message__link\\\"> \").concat(url, \"</a>\");\n  });\n};\nexport var transformMessage = function transformMessage(message) {\n  var multi = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  return ReactHtmlParser(transformLinebreaks(transformMentions(transformUrls(message)), multi));\n};\nexport var getUsername = function getUsername(user) {\n  return user && user.name ? user.name : user.email;\n};\nexport var awsUrl = process.env.AWS_S3_URL;\nexport var notificationHandler = function notificationHandler(title) {\n  // Let's check if the browser supports notifications\n  if (!('Notification' in window)) {\n    alert('This browser does not support desktop notification');\n  }\n\n  // Let's check whether notification permissions have already been granted\n  else if (Notification.permission === 'granted') {\n    // If it's okay let's create a notification\n    new Notification(title);\n  }\n\n  // Otherwise, we need to ask the user for permission\n  else if (Notification.permission !== 'denied') {\n    Notification.requestPermission().then(function (permission) {\n      // If the user accepts, let's create a notification\n      if (permission === 'granted') {\n        new Notification(title);\n      }\n    });\n  }\n};","map":{"version":3,"names":["moment","ReactHtmlParser","updateLocale","relativeTime","future","past","s","ss","m","mm","h","hh","d","dd","M","MM","y","yy","chatTime","time","date1","Date","date2","diffTime","Math","abs","diffDays","floor","format","transformMentions","message","replace","mention","match","transformLinebreaks","multi","transformUrls","url","transformMessage","getUsername","user","name","email","awsUrl","process","env","AWS_S3_URL","notificationHandler","title","window","alert","Notification","permission","requestPermission","then"],"sources":["/Volumes/MacData/work/ciscord-frontend.git/utils/helper.js"],"sourcesContent":["import moment from 'moment';\nimport ReactHtmlParser from 'react-html-parser';\n\nmoment.updateLocale('en', {\n  relativeTime: {\n    future: 'in %s',\n    past: '%s',\n    s: '',\n    ss: '%ss',\n    m: '1m',\n    mm: '%dm',\n    h: '1h',\n    hh: '%dh',\n    d: '1d',\n    dd: '%dd',\n    M: '1m',\n    MM: '%dM',\n    y: '1y',\n    yy: '%dY',\n  },\n});\n\nexport const chatTime = time => {\n  const date1 = new Date(time);\n  const date2 = new Date();\n  const diffTime = Math.abs(date2 - date1);\n  const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\n\n  if (diffDays > 0) {\n    return moment(time).format('L');\n  }\n  return moment(time).format('LT');\n};\n\nexport const transformMentions = message =>\n  message.replace(\n    /@(\\[[^]*\\]\\([^ ]*?\\))/g,\n    mention => `<a class=\"mention\">@${mention.match(/\\[(.*)\\]/)[1]}</a>`\n  );\n\nconst transformLinebreaks = (message, multi) => {\n  if (multi) return message.replace(/(?:\\r\\n|\\r|\\n)/g, '<br>');\n  return message.match(/^.*$/m)[0];\n};\n\nconst transformUrls = message =>\n  message.replace(\n    /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)?/gi,\n    url =>\n      `<a href=\"${url}\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"Message__link\"> ${url}</a>`\n  );\n\nexport const transformMessage = (message, multi = true) =>\n  ReactHtmlParser(transformLinebreaks(transformMentions(transformUrls(message)), multi));\n\nexport const getUsername = user => (user && user.name ? user.name : user.email);\n\nexport const awsUrl =\n  process.env.AWS_S3_URL;\n\nexport const notificationHandler = title => {\n  // Let's check if the browser supports notifications\n  if (!('Notification' in window)) {\n    alert('This browser does not support desktop notification');\n  }\n\n  // Let's check whether notification permissions have already been granted\n  else if (Notification.permission === 'granted') {\n    // If it's okay let's create a notification\n    new Notification(title);\n  }\n\n  // Otherwise, we need to ask the user for permission\n  else if (Notification.permission !== 'denied') {\n    Notification.requestPermission().then(function(permission) {\n      // If the user accepts, let's create a notification\n      if (permission === 'granted') {\n        new Notification(title);\n      }\n    });\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}