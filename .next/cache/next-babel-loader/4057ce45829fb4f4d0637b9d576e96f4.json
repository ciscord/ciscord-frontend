{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useContext } from 'react';\nimport { useRouter } from 'next/router';\nimport { useLazyQuery } from '@apollo/client';\nimport { useKeyboardShortcut } from 'hooks';\nimport { UserContext } from 'context/UserContext';\nimport { AppContext } from 'context';\nimport { COMPANY_NAME } from 'utils/config';\nimport { GET_CHANNEL } from 'apis/Channel';\nimport Topic from './Topic/Topic';\nimport Search from './Search/Search';\nimport More from './More';\nimport Members from './Members';\nimport Channels from './Channels/Channels';\nimport ChatHeaderDirect from './ChatHeaderDirect';\nimport ChatHeaderPlaceholder from './ChatHeader.placeholder';\nimport * as S from './ChatHeader.styled';\nconst ChatHeader = () => {\n  const {\n    query: {\n      community: communityUrl,\n      channel: channelUrl\n    },\n    push\n  } = useRouter();\n  const {\n    user\n  } = useContext(UserContext);\n  const {\n    channelLoaded,\n    setChannelLoaded\n  } = useContext(AppContext);\n  const [getChannel, {\n    data: {\n      channel = {\n        community: {\n          members: []\n        }\n      }\n    } = {},\n    loading\n  }] = useLazyQuery(GET_CHANNEL, {\n    onCompleted: () => {\n      if (!channelLoaded) {\n        setChannelLoaded(true);\n      }\n    }\n  });\n  useEffect(() => {\n    getChannel({\n      variables: {\n        url: `${communityUrl}/${channelUrl}`\n      }\n    });\n  }, [communityUrl, channelUrl]);\n  useKeyboardShortcut({\n    N: () => push(`/[company]/[community]/new-channel`, `/${COMPANY_NAME()}/${communityUrl}/new-channel`, {\n      shallow: true\n    })\n  });\n  const onChangeTopic = () => {\n    getChannel({\n      variables: {\n        url: `${communityUrl}/${channelUrl}`\n      }\n    });\n  };\n  if (loading) {\n    return __jsx(ChatHeaderPlaceholder, null);\n  }\n  if (communityUrl === 'direct') {\n    if (!user) {\n      return __jsx(ChatHeaderPlaceholder, null);\n    }\n    const channelUsernames = channelUrl.replace('direct/', '').split('-');\n    const otherUsername = channelUsernames.indexOf(user.username) === 0 ? channelUsernames[1] : channelUsernames[0];\n    return __jsx(ChatHeaderDirect, {\n      username: otherUsername\n    });\n  }\n  return __jsx(React.Fragment, null, __jsx(S.Container, null, channel && __jsx(React.Fragment, null, __jsx(S.Info, null, __jsx(Channels, null), __jsx(S.ChannelInfo, null, __jsx(Members, {\n    membersCount: channel.community.members.length\n  }), __jsx(Topic, {\n    onChangeTopic: onChangeTopic,\n    channel: channel\n  }))), __jsx(S.ChatActions, null, __jsx(Search, null), __jsx(More, null)))));\n};\nexport default ChatHeader;","map":{"version":3,"names":["useEffect","useContext","useRouter","useLazyQuery","useKeyboardShortcut","UserContext","AppContext","COMPANY_NAME","GET_CHANNEL","Topic","Search","More","Members","Channels","ChatHeaderDirect","ChatHeaderPlaceholder","S","ChatHeader","query","community","communityUrl","channel","channelUrl","push","user","channelLoaded","setChannelLoaded","getChannel","data","members","loading","onCompleted","variables","url","N","shallow","onChangeTopic","channelUsernames","replace","split","otherUsername","indexOf","username","length"],"sources":["/Volumes/MacData/work/ciscord-frontend.git/components/Chat/Header/ChatHeader.js"],"sourcesContent":["import { useEffect, useContext } from 'react';\nimport { useRouter } from 'next/router';\nimport { useLazyQuery } from '@apollo/client';\nimport { useKeyboardShortcut } from 'hooks';\n\nimport { UserContext } from 'context/UserContext';\nimport { AppContext } from 'context';\nimport { COMPANY_NAME } from 'utils/config';\nimport { GET_CHANNEL } from 'apis/Channel';\n\nimport Topic from './Topic/Topic';\nimport Search from './Search/Search';\nimport More from './More';\nimport Members from './Members';\nimport Channels from './Channels/Channels';\n\nimport ChatHeaderDirect from './ChatHeaderDirect';\nimport ChatHeaderPlaceholder from './ChatHeader.placeholder';\nimport * as S from './ChatHeader.styled';\n\nconst ChatHeader = () => {\n  const {\n    query: { community: communityUrl, channel: channelUrl },\n    push,\n  } = useRouter();\n  const { user } = useContext(UserContext);\n  const { channelLoaded, setChannelLoaded } = useContext(AppContext);\n  const [\n    getChannel,\n    { data: { channel = { community: { members: [] } } } = {}, loading },\n  ] = useLazyQuery(GET_CHANNEL, {\n    onCompleted: () => {\n      if (!channelLoaded) {\n        setChannelLoaded(true);\n      }\n    },\n  });\n\n  useEffect(() => {\n    getChannel({ variables: { url: `${communityUrl}/${channelUrl}` } });\n  }, [communityUrl, channelUrl]);\n\n  useKeyboardShortcut({\n    N: () =>\n      push(`/[company]/[community]/new-channel`, `/${COMPANY_NAME()}/${communityUrl}/new-channel`, {\n        shallow: true,\n      }),\n  });\n\n  const onChangeTopic = () => {\n    getChannel({ variables: { url: `${communityUrl}/${channelUrl}` } });\n  };\n\n  if (loading) {\n    return <ChatHeaderPlaceholder />;\n  }\n\n  if (communityUrl === 'direct') {\n    if (!user) {\n      return <ChatHeaderPlaceholder />;\n    }\n    const channelUsernames = channelUrl.replace('direct/', '').split('-');\n    const otherUsername =\n      channelUsernames.indexOf(user.username) === 0 ? channelUsernames[1] : channelUsernames[0];\n    return <ChatHeaderDirect username={otherUsername} />;\n  }\n\n  return (\n    <>\n      <S.Container>\n        {channel && (\n          <>\n            <S.Info>\n              <Channels />\n              <S.ChannelInfo>\n                <Members membersCount={channel.community.members.length} />\n                <Topic onChangeTopic={onChangeTopic} channel={channel} />\n              </S.ChannelInfo>\n            </S.Info>\n            <S.ChatActions>\n              <Search />\n              <More />\n            </S.ChatActions>\n          </>\n        )}\n      </S.Container>\n    </>\n  );\n};\n\nexport default ChatHeader;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}