{"ast":null,"code":"import gql from 'graphql-tag';\nexport const GET_CHANNEL_NOTIFICATIONS = gql`\n  query channelNotifications($channelUrl: String!) {\n    channelNotifications(channelUrl: $channelUrl) {\n      id\n    }\n  }\n`;\nexport const MARK_CHANNEL_NOTIFICATIONS_AS_READ = gql`\n  mutation markChannelNotificationsAsRead($channelUrl: String!) {\n    markChannelNotificationsAsRead(channelUrl: $channelUrl) {\n      id\n    }\n  }\n`;\nexport const GET_CHANNELS = gql`\n  query channels($communityUrl: String!) {\n    channels(communityUrl: $communityUrl) {\n      id\n      name\n      url\n      community {\n        members {\n          username\n        }\n      }\n    }\n  }\n`;\nexport const GET_CHANNEL = gql`\n  query channel($url: String!) {\n    channel(url: $url) {\n      id\n      name\n      url\n      description\n      community {\n        members {\n          username\n        }\n      }\n    }\n  }\n`;\nexport const CREATE_CHANNEL = gql`\n  mutation createChannel(\n    $name: String!\n    $description: String\n    $url: String!\n    $isPrivate: Boolean\n    $communityUrl: String!\n  ) {\n    createChannel(\n      name: $name\n      description: $description\n      url: $url\n      isPrivate: $isPrivate\n      communityUrl: $communityUrl\n    ) {\n      id\n      name\n      url\n    }\n  }\n`;\nexport const EDIT_CHANNEL = gql`\n  mutation editChannel($channelId: String!, $name: String!, $description: String) {\n    editChannel(channelId: $channelId, name: $name, description: $description) {\n      id\n      name\n      description\n      url\n    }\n  }\n`;\nexport const NEW_CHANNEL_MESSAGE_SUBSCRIPTION = gql`\n  subscription channelNewMessage($communityUrl: String, $tenant: String) {\n    channelNewMessage(communityUrl: $communityUrl, tenant: $tenant) {\n      id\n      name\n      url\n    }\n  }\n`;\nexport const GET_PRIVATE_CHANNELS = gql`\n  query privateChannels {\n    privateChannels {\n      id\n      url\n    }\n  }\n`;","map":{"version":3,"names":["gql","GET_CHANNEL_NOTIFICATIONS","MARK_CHANNEL_NOTIFICATIONS_AS_READ","GET_CHANNELS","GET_CHANNEL","CREATE_CHANNEL","EDIT_CHANNEL","NEW_CHANNEL_MESSAGE_SUBSCRIPTION","GET_PRIVATE_CHANNELS"],"sources":["/Volumes/MacData/work/ciscord-frontend.git/apis/Channel.js"],"sourcesContent":["import gql from 'graphql-tag';\n\nexport const GET_CHANNEL_NOTIFICATIONS = gql`\n  query channelNotifications($channelUrl: String!) {\n    channelNotifications(channelUrl: $channelUrl) {\n      id\n    }\n  }\n`;\n\nexport const MARK_CHANNEL_NOTIFICATIONS_AS_READ = gql`\n  mutation markChannelNotificationsAsRead($channelUrl: String!) {\n    markChannelNotificationsAsRead(channelUrl: $channelUrl) {\n      id\n    }\n  }\n`;\n\nexport const GET_CHANNELS = gql`\n  query channels($communityUrl: String!) {\n    channels(communityUrl: $communityUrl) {\n      id\n      name\n      url\n      community {\n        members {\n          username\n        }\n      }\n    }\n  }\n`;\n\nexport const GET_CHANNEL = gql`\n  query channel($url: String!) {\n    channel(url: $url) {\n      id\n      name\n      url\n      description\n      community {\n        members {\n          username\n        }\n      }\n    }\n  }\n`;\n\nexport const CREATE_CHANNEL = gql`\n  mutation createChannel(\n    $name: String!\n    $description: String\n    $url: String!\n    $isPrivate: Boolean\n    $communityUrl: String!\n  ) {\n    createChannel(\n      name: $name\n      description: $description\n      url: $url\n      isPrivate: $isPrivate\n      communityUrl: $communityUrl\n    ) {\n      id\n      name\n      url\n    }\n  }\n`;\n\nexport const EDIT_CHANNEL = gql`\n  mutation editChannel($channelId: String!, $name: String!, $description: String) {\n    editChannel(channelId: $channelId, name: $name, description: $description) {\n      id\n      name\n      description\n      url\n    }\n  }\n`;\n\nexport const NEW_CHANNEL_MESSAGE_SUBSCRIPTION = gql`\n  subscription channelNewMessage($communityUrl: String, $tenant: String) {\n    channelNewMessage(communityUrl: $communityUrl, tenant: $tenant) {\n      id\n      name\n      url\n    }\n  }\n`;\n\nexport const GET_PRIVATE_CHANNELS = gql`\n  query privateChannels {\n    privateChannels {\n      id\n      url\n    }\n  }\n`;\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,aAAa;AAE7B,OAAO,MAAMC,yBAAyB,GAAGD,GAAI;AAC7C;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAME,kCAAkC,GAAGF,GAAI;AACtD;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMG,YAAY,GAAGH,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMI,WAAW,GAAGJ,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMK,cAAc,GAAGL,GAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMM,YAAY,GAAGN,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMO,gCAAgC,GAAGP,GAAI;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMQ,oBAAoB,GAAGR,GAAI;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,CAAC"},"metadata":{},"sourceType":"module"}