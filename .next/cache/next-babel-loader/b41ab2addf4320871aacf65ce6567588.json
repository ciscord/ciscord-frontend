{"ast":null,"code":"var __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport React, { useState, useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { GET_USER, USER_WENT_ONLINE, USER_WENT_OFFLINE } from 'apis/User';\nimport ProgressBar from 'components/UI/ProgressBar';\nimport { COMPANY_NAME } from 'utils/config';\nimport Search from './Search/Search';\nimport * as S from './ChatHeader.styled';\nexport default (({\n  username\n}) => {\n  const {\n    0: subscribed,\n    1: setSubscribed\n  } = useState(false);\n  const {\n    data: {\n      getUser: user\n    } = {},\n    loading,\n    subscribeToMore\n  } = useQuery(GET_USER, {\n    variables: {\n      username\n    }\n  });\n  useEffect(() => {\n    if (user && !subscribed) {\n      subscribeToMore({\n        document: USER_WENT_ONLINE,\n        variables: {\n          tenant: COMPANY_NAME()\n        },\n        updateQuery: (prev, {\n          subscriptionData\n        }) => {\n          if (!subscriptionData.data) return prev;\n          const {\n            user: userData\n          } = subscriptionData.data;\n          return _objectSpread({}, prev, {\n            user: userData\n          });\n        }\n      });\n      subscribeToMore({\n        document: USER_WENT_OFFLINE,\n        variables: {\n          tenant: COMPANY_NAME()\n        },\n        updateQuery: (prev, {\n          subscriptionData\n        }) => {\n          if (!subscriptionData.data) return prev;\n          const {\n            user: userData\n          } = subscriptionData.data;\n          return _objectSpread({}, prev, {\n            user: userData\n          });\n        }\n      });\n      setSubscribed(true);\n    }\n  }, [user]);\n  if (loading || !user) {\n    return __jsx(\"div\", null);\n  }\n  return __jsx(S.Container, null, __jsx(React.Fragment, null, __jsx(S.Info, null, __jsx(S.PrivateChannelInfo, null, __jsx(S.UserName, null, user.user.username), __jsx(S.UserStatus, null, __jsx(S.Status, {\n    online: user.user.isOnline\n  }), __jsx(\"span\", null, user.user.isOnline ? 'Online' : 'Offline')))), __jsx(S.ChatActions, null, __jsx(Search, null))), __jsx(ProgressBar, null));\n});","map":{"version":3,"names":["React","useState","useEffect","useQuery","GET_USER","USER_WENT_ONLINE","USER_WENT_OFFLINE","ProgressBar","COMPANY_NAME","Search","S","username","subscribed","setSubscribed","data","getUser","user","loading","subscribeToMore","variables","document","tenant","updateQuery","prev","subscriptionData","userData","isOnline"],"sources":["/Volumes/MacData/work/ciscord-frontend.git/components/Chat/Header/ChatHeaderDirect.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { GET_USER, USER_WENT_ONLINE, USER_WENT_OFFLINE } from 'apis/User';\nimport ProgressBar from 'components/UI/ProgressBar';\nimport { COMPANY_NAME } from 'utils/config';\nimport Search from './Search/Search';\nimport * as S from './ChatHeader.styled';\n\nexport default ({ username }) => {\n  const [subscribed, setSubscribed] = useState(false);\n  const { data: { getUser: user } = {}, loading, subscribeToMore } = useQuery(GET_USER, {\n    variables: { username },\n  });\n\n  useEffect(() => {\n    if (user && !subscribed) {\n      subscribeToMore({\n        document: USER_WENT_ONLINE,\n        variables: { tenant: COMPANY_NAME() },\n        updateQuery: (prev, { subscriptionData }) => {\n          if (!subscriptionData.data) return prev;\n          const { user: userData } = subscriptionData.data;\n\n          return {\n            ...prev,\n            user: userData,\n          };\n        },\n      });\n\n      subscribeToMore({\n        document: USER_WENT_OFFLINE,\n        variables: { tenant: COMPANY_NAME() },\n        updateQuery: (prev, { subscriptionData }) => {\n          if (!subscriptionData.data) return prev;\n          const { user: userData } = subscriptionData.data;\n\n          return {\n            ...prev,\n            user: userData,\n          };\n        },\n      });\n      setSubscribed(true);\n    }\n  }, [user]);\n\n  if (loading || !user) {\n    return <div />;\n  }\n\n  return (\n    <S.Container>\n      <>\n        <S.Info>\n          <S.PrivateChannelInfo>\n            <S.UserName>{user.user.username}</S.UserName>\n            <S.UserStatus>\n              <S.Status online={user.user.isOnline} />\n              <span>{user.user.isOnline ? 'Online' : 'Offline'}</span>\n            </S.UserStatus>\n          </S.PrivateChannelInfo>\n        </S.Info>\n        <S.ChatActions>\n          <Search />\n        </S.ChatActions>\n      </>\n      <ProgressBar />\n    </S.Container>\n  );\n};\n"],"mappings":";;;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,gBAAgB;AACzC,SAASC,QAAQ,EAAEC,gBAAgB,EAAEC,iBAAiB,QAAQ,WAAW;AACzE,OAAOC,WAAW,MAAM,2BAA2B;AACnD,SAASC,YAAY,QAAQ,cAAc;AAC3C,OAAOC,MAAM,MAAM,iBAAiB;AACpC,OAAO,KAAKC,CAAC,MAAM,qBAAqB;AAExC,gBAAe,CAAC;EAAEC;AAAS,CAAC,KAAK;EAC/B,MAAM;IAAA,GAACC,UAAU;IAAA,GAAEC;EAAa,IAAIZ,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM;IAAEa,IAAI,EAAE;MAAEC,OAAO,EAAEC;IAAK,CAAC,GAAG,CAAC,CAAC;IAAEC,OAAO;IAAEC;EAAgB,CAAC,GAAGf,QAAQ,CAACC,QAAQ,EAAE;IACpFe,SAAS,EAAE;MAAER;IAAS;EACxB,CAAC,CAAC;EAEFT,SAAS,CAAC,MAAM;IACd,IAAIc,IAAI,IAAI,CAACJ,UAAU,EAAE;MACvBM,eAAe,CAAC;QACdE,QAAQ,EAAEf,gBAAgB;QAC1Bc,SAAS,EAAE;UAAEE,MAAM,EAAEb,YAAY;QAAG,CAAC;QACrCc,WAAW,EAAE,CAACC,IAAI,EAAE;UAAEC;QAAiB,CAAC,KAAK;UAC3C,IAAI,CAACA,gBAAgB,CAACV,IAAI,EAAE,OAAOS,IAAI;UACvC,MAAM;YAAEP,IAAI,EAAES;UAAS,CAAC,GAAGD,gBAAgB,CAACV,IAAI;UAEhD,yBACKS,IAAI;YACPP,IAAI,EAAES;UAAQ;QAElB;MACF,CAAC,CAAC;MAEFP,eAAe,CAAC;QACdE,QAAQ,EAAEd,iBAAiB;QAC3Ba,SAAS,EAAE;UAAEE,MAAM,EAAEb,YAAY;QAAG,CAAC;QACrCc,WAAW,EAAE,CAACC,IAAI,EAAE;UAAEC;QAAiB,CAAC,KAAK;UAC3C,IAAI,CAACA,gBAAgB,CAACV,IAAI,EAAE,OAAOS,IAAI;UACvC,MAAM;YAAEP,IAAI,EAAES;UAAS,CAAC,GAAGD,gBAAgB,CAACV,IAAI;UAEhD,yBACKS,IAAI;YACPP,IAAI,EAAES;UAAQ;QAElB;MACF,CAAC,CAAC;MACFZ,aAAa,CAAC,IAAI,CAAC;IACrB;EACF,CAAC,EAAE,CAACG,IAAI,CAAC,CAAC;EAEV,IAAIC,OAAO,IAAI,CAACD,IAAI,EAAE;IACpB,OAAO,kBAAO;EAChB;EAEA,OACE,MAAC,CAAC,CAAC,SAAS,QACV,4BACE,MAAC,CAAC,CAAC,IAAI,QACL,MAAC,CAAC,CAAC,kBAAkB,QACnB,MAAC,CAAC,CAAC,QAAQ,QAAEA,IAAI,CAACA,IAAI,CAACL,QAAQ,CAAc,EAC7C,MAAC,CAAC,CAAC,UAAU,QACX,MAAC,CAAC,CAAC,MAAM;IAAC,MAAM,EAAEK,IAAI,CAACA,IAAI,CAACU;EAAS,EAAG,EACxC,oBAAOV,IAAI,CAACA,IAAI,CAACU,QAAQ,GAAG,QAAQ,GAAG,SAAS,CAAQ,CAC3C,CACM,CAChB,EACT,MAAC,CAAC,CAAC,WAAW,QACZ,MAAC,MAAM,OAAG,CACI,CACf,EACH,MAAC,WAAW,OAAG,CACH;AAElB,CAAC"},"metadata":{},"sourceType":"module"}