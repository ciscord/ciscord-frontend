{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n// Refactor: createUsersList\nimport { useContext } from 'react';\nimport { UserContext } from 'context';\nimport { useMutation } from '@apollo/client';\nimport { Emoji } from 'emoji-mart';\nimport { TOGGLE_REACTION } from 'apis/Message';\nimport Tooltip from 'components/UI/Tooltip';\nimport * as S from './Reaction.styled';\nvar maxNumberOfLines = 50;\nvar lineSymbols = 28;\nexport default (function (_ref) {\n  var reaction = _ref.reaction,\n    messageId = _ref.messageId;\n  var _useMutation = useMutation(TOGGLE_REACTION),\n    _useMutation2 = _slicedToArray(_useMutation, 1),\n    toggleReaction = _useMutation2[0];\n  var _useContext = useContext(UserContext),\n    isLogged = _useContext.isLogged;\n  var onToggleReaction = function onToggleReaction() {\n    if (isLogged) {\n      toggleReaction({\n        variables: {\n          name: reaction.name,\n          messageId: messageId\n        }\n      });\n    }\n  };\n  var createUsersList = function createUsersList(users) {\n    var userListString = users.map(function (_ref2) {\n      var userName = _ref2.username;\n      return userName;\n    }).join(', ');\n    var resultList = [];\n    for (var i = 0; i < maxNumberOfLines; i++) {\n      resultList.push(userListString.slice(i * lineSymbols, (1 + i) * lineSymbols));\n    }\n    return resultList;\n  };\n  return __jsx(S.Reaction, {\n    key: reaction.id,\n    onClick: onToggleReaction,\n    isLogged: isLogged\n  }, __jsx(Emoji, {\n    emoji: reaction.name,\n    size: 16,\n    style: {\n      width: 16,\n      height: 16\n    },\n    set: \"apple\"\n  }), __jsx(S.Count, null, reaction.users.length), __jsx(S.TooltipWrapper, null, __jsx(Tooltip, null, __jsx(S.UsersList, {\n    maxNumberOfLines: maxNumberOfLines\n  }, createUsersList(reaction.users).map(function (line, i) {\n    return __jsx(\"li\", {\n      key: i\n    }, line);\n  })), __jsx(S.ReactonName, null, \"reacted with \".concat(reaction.name)))));\n});","map":{"version":3,"names":["useContext","UserContext","useMutation","Emoji","TOGGLE_REACTION","Tooltip","S","maxNumberOfLines","lineSymbols","reaction","messageId","toggleReaction","isLogged","onToggleReaction","variables","name","createUsersList","users","userListString","map","userName","username","join","resultList","i","push","slice","id","width","height","length","line"],"sources":["/Volumes/MacData/work/ciscord-frontend.git/components/Chat/Message/Reactions/Reaction/Reaction.js"],"sourcesContent":["// Refactor: createUsersList\nimport { useContext } from 'react';\nimport { UserContext } from 'context';\nimport { useMutation } from '@apollo/client';\nimport { Emoji } from 'emoji-mart';\n\nimport { TOGGLE_REACTION } from 'apis/Message';\n\nimport Tooltip from 'components/UI/Tooltip';\nimport * as S from './Reaction.styled';\n\nconst maxNumberOfLines = 50;\nconst lineSymbols = 28;\n\nexport default ({ reaction, messageId }) => {\n  const [toggleReaction] = useMutation(TOGGLE_REACTION);\n  const { isLogged } = useContext(UserContext);\n\n  const onToggleReaction = () => {\n    if (isLogged) {\n      toggleReaction({\n        variables: {\n          name: reaction.name,\n          messageId,\n        },\n      });\n    }\n  };\n\n  const createUsersList = users => {\n    const userListString = users.map(({ username: userName }) => userName).join(', ');\n    const resultList = [];\n    for (let i = 0; i < maxNumberOfLines; i++) {\n      resultList.push(userListString.slice(i * lineSymbols, (1 + i) * lineSymbols));\n    }\n\n    return resultList;\n  };\n\n  return (\n    <S.Reaction key={reaction.id} onClick={onToggleReaction} isLogged={isLogged}>\n      <Emoji\n        emoji={reaction.name}\n        size={16}\n        style={{\n          width: 16,\n          height: 16,\n        }}\n        set=\"apple\"\n      />\n      <S.Count>{reaction.users.length}</S.Count>\n      <S.TooltipWrapper>\n        <Tooltip>\n          <S.UsersList maxNumberOfLines={maxNumberOfLines}>\n            {createUsersList(reaction.users).map((line, i) => (\n              <li key={i}>{line}</li>\n            ))}\n          </S.UsersList>\n          <S.ReactonName>{`reacted with ${reaction.name}`}</S.ReactonName>\n        </Tooltip>\n      </S.TooltipWrapper>\n    </S.Reaction>\n  );\n};\n"],"mappings":";;;AAAA;AACA,SAASA,UAAU,QAAQ,OAAO;AAClC,SAASC,WAAW,QAAQ,SAAS;AACrC,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,KAAK,QAAQ,YAAY;AAElC,SAASC,eAAe,QAAQ,cAAc;AAE9C,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAO,KAAKC,CAAC,MAAM,mBAAmB;AAEtC,IAAMC,gBAAgB,GAAG,EAAE;AAC3B,IAAMC,WAAW,GAAG,EAAE;AAEtB,gBAAe,gBAA6B;EAAA,IAA1BC,QAAQ,QAARA,QAAQ;IAAEC,SAAS,QAATA,SAAS;EACnC,mBAAyBR,WAAW,CAACE,eAAe,CAAC;IAAA;IAA9CO,cAAc;EACrB,kBAAqBX,UAAU,CAACC,WAAW,CAAC;IAApCW,QAAQ,eAARA,QAAQ;EAEhB,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgB,GAAS;IAC7B,IAAID,QAAQ,EAAE;MACZD,cAAc,CAAC;QACbG,SAAS,EAAE;UACTC,IAAI,EAAEN,QAAQ,CAACM,IAAI;UACnBL,SAAS,EAATA;QACF;MACF,CAAC,CAAC;IACJ;EACF,CAAC;EAED,IAAMM,eAAe,GAAG,SAAlBA,eAAe,CAAGC,KAAK,EAAI;IAC/B,IAAMC,cAAc,GAAGD,KAAK,CAACE,GAAG,CAAC;MAAA,IAAaC,QAAQ,SAAlBC,QAAQ;MAAA,OAAiBD,QAAQ;IAAA,EAAC,CAACE,IAAI,CAAC,IAAI,CAAC;IACjF,IAAMC,UAAU,GAAG,EAAE;IACrB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjB,gBAAgB,EAAEiB,CAAC,EAAE,EAAE;MACzCD,UAAU,CAACE,IAAI,CAACP,cAAc,CAACQ,KAAK,CAACF,CAAC,GAAGhB,WAAW,EAAE,CAAC,CAAC,GAAGgB,CAAC,IAAIhB,WAAW,CAAC,CAAC;IAC/E;IAEA,OAAOe,UAAU;EACnB,CAAC;EAED,OACE,MAAC,CAAC,CAAC,QAAQ;IAAC,GAAG,EAAEd,QAAQ,CAACkB,EAAG;IAAC,OAAO,EAAEd,gBAAiB;IAAC,QAAQ,EAAED;EAAS,GAC1E,MAAC,KAAK;IACJ,KAAK,EAAEH,QAAQ,CAACM,IAAK;IACrB,IAAI,EAAE,EAAG;IACT,KAAK,EAAE;MACLa,KAAK,EAAE,EAAE;MACTC,MAAM,EAAE;IACV,CAAE;IACF,GAAG,EAAC;EAAO,EACX,EACF,MAAC,CAAC,CAAC,KAAK,QAAEpB,QAAQ,CAACQ,KAAK,CAACa,MAAM,CAAW,EAC1C,MAAC,CAAC,CAAC,cAAc,QACf,MAAC,OAAO,QACN,MAAC,CAAC,CAAC,SAAS;IAAC,gBAAgB,EAAEvB;EAAiB,GAC7CS,eAAe,CAACP,QAAQ,CAACQ,KAAK,CAAC,CAACE,GAAG,CAAC,UAACY,IAAI,EAAEP,CAAC;IAAA,OAC3C;MAAI,GAAG,EAAEA;IAAE,GAAEO,IAAI,CAAM;EAAA,CACxB,CAAC,CACU,EACd,MAAC,CAAC,CAAC,WAAW,+BAAkBtB,QAAQ,CAACM,IAAI,EAAmB,CACxD,CACO,CACR;AAEjB,CAAC"},"metadata":{},"sourceType":"module"}