{"ast":null,"code":"// import { ApolloLink, split, Observable } from 'apollo-link';\nimport { split, HttpLink, ApolloLink, Observable } from '@apollo/client';\nimport { onError } from \"@apollo/client/link/error\";\nimport { createUploadLink } from 'apollo-upload-client';\nimport { GraphQLWsLink } from '@apollo/client/link/subscriptions';\nimport { createClient } from 'graphql-ws';\nimport fetch from 'isomorphic-unfetch';\nimport Cookies from 'js-cookie';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { COMPANY_NAME } from 'utils/config';\nconst uri = `https://54.147.200.132/graphql`;\nconst wsUri = `wss://54.147.200.132/graphql`;\nconsole.log(uri, 'uri');\nconsole.log(wsUri, 'wsUri');\nexport const httpLink = new HttpLink({\n  uri\n});\nexport const wsLink = false ? new GraphQLWsLink(createClient({\n  url: wsUri\n})) : () => console.log('SSR');\nexport const request = async operation => {\n  const token = await Cookies.get('token');\n  operation.setContext({\n    headers: {\n      authorization: token ? `Bearer ${token}` : '',\n      \"x-hasura-admin-secret\": \"9R5zjnzbmUlI6DgZaAmUQzwJPdVpiCj3ik96xQsYm9wWENmfej7uPCs4KyOTZTbw\",\n      'ciscord-tenant': COMPANY_NAME()\n    }\n  });\n};\nexport const errorLink = onError(({\n  graphQLErrors,\n  networkError\n}) => {\n  if (graphQLErrors) {\n    graphQLErrors.forEach(({\n      message,\n      locations,\n      path\n    }) => console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`));\n  }\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n});\nexport const requestLink = new ApolloLink((operation, forward) => new Observable(observer => {\n  let handle;\n  Promise.resolve(operation).then(oper => request(oper)).then(() => {\n    handle = forward(operation).subscribe({\n      next: observer.next.bind(observer),\n      error: observer.error.bind(observer),\n      complete: observer.complete.bind(observer)\n    });\n  }).catch(observer.error.bind(observer));\n  return () => {\n    if (handle) handle.unsubscribe();\n  };\n}));\nconst uploadLink = createUploadLink({\n  uri\n});\nexport const link = false ? split(({\n  query\n}) => {\n  const definition = getMainDefinition(query);\n  return definition.kind === 'OperationDefinition' && definition.operation === 'subscription';\n}, wsLink, httpLink, uploadLink) : uploadLink;","map":{"version":3,"names":["split","HttpLink","ApolloLink","Observable","onError","createUploadLink","GraphQLWsLink","createClient","fetch","Cookies","getMainDefinition","COMPANY_NAME","uri","wsUri","console","log","httpLink","wsLink","url","request","operation","token","get","setContext","headers","authorization","errorLink","graphQLErrors","networkError","forEach","message","locations","path","requestLink","forward","observer","handle","Promise","resolve","then","oper","subscribe","next","bind","error","complete","catch","unsubscribe","uploadLink","link","query","definition","kind"],"sources":["/Volumes/MacData/work/ciscord-frontend.git/utils/apollo/links.js"],"sourcesContent":["// import { ApolloLink, split, Observable } from 'apollo-link';\nimport { split, HttpLink, ApolloLink, Observable } from '@apollo/client';\nimport { onError } from \"@apollo/client/link/error\";\nimport { createUploadLink }from 'apollo-upload-client';\nimport { GraphQLWsLink } from '@apollo/client/link/subscriptions';\nimport { createClient } from 'graphql-ws';\nimport fetch from 'isomorphic-unfetch';\nimport Cookies from 'js-cookie';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { COMPANY_NAME } from 'utils/config';\n\nconst uri = `https://54.147.200.132/graphql`;\nconst wsUri = `wss://54.147.200.132/graphql`;\nconsole.log(uri, 'uri');\nconsole.log(wsUri, 'wsUri');\nexport const httpLink = new HttpLink({\n  uri,\n});\n\nexport const wsLink = process.browser\n  ? new GraphQLWsLink(createClient({\n    url: wsUri,\n  }))\n  : () => console.log('SSR');\n\nexport const request = async operation => {\n  const token = await Cookies.get('token');\n  operation.setContext({\n    headers: {\n      authorization: token ? `Bearer ${token}` : '',\n      \"x-hasura-admin-secret\": \"9R5zjnzbmUlI6DgZaAmUQzwJPdVpiCj3ik96xQsYm9wWENmfej7uPCs4KyOTZTbw\",\n      'ciscord-tenant': COMPANY_NAME(),\n    },\n  });\n};\n\nexport const errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors) {\n    graphQLErrors.forEach(({ message, locations, path }) =>\n      console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`)\n    );\n  }\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n});\n\nexport const requestLink = new ApolloLink(\n  (operation, forward) =>\n    new Observable(observer => {\n      let handle;\n      Promise.resolve(operation)\n        .then(oper => request(oper))\n        .then(() => {\n          handle = forward(operation).subscribe({\n            next: observer.next.bind(observer),\n            error: observer.error.bind(observer),\n            complete: observer.complete.bind(observer),\n          });\n        })\n        .catch(observer.error.bind(observer));\n\n      return () => {\n        if (handle) handle.unsubscribe();\n      };\n    })\n);\n\nconst uploadLink = createUploadLink({ uri });\n\nexport const link = process.browser\n  ? split(\n    ({ query }) => {\n      const definition = getMainDefinition(query);\n      return (\n        definition.kind === 'OperationDefinition' &&\n        definition.operation === 'subscription'\n      );\n    },\n    wsLink,\n    httpLink,\n    uploadLink,\n  )\n  : uploadLink;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}