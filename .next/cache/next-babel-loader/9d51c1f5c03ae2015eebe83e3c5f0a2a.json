{"ast":null,"code":"var _jsxFileName = \"/Volumes/MacData/work/ciscord-frontend.git/components/Chat/Chat.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport { useEffect, useCallback, useState, useContext } from 'react';\nimport { useRouter } from 'next/router';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { useDropzone } from 'react-dropzone';\nimport { throttle } from 'lodash';\nimport { UserContext } from 'context/UserContext';\nimport { AppContext } from 'context';\nimport { GET_LAST_MESSAGES, GET_PREV_MESSAGES, GET_NEXT_MESSAGES, EDIT_MESSAGE } from 'apis/Message';\nimport { UPDATE_CHANNEL_INFO } from 'apis/ChannelInfo';\nimport { SET_CURRENT_CHANNEL } from 'apis/User';\nimport { COMPANY_NAME } from 'utils/config';\nimport ChatHeader from 'components/Chat/Header';\nimport ChatBody from 'components/Chat/Body';\nimport ChatInput from 'components/Chat/Input';\nimport DropzoneOverlay from 'components/UI/Dropzone';\nimport Thread from 'components/Chat/Thread';\nimport Subscriptions from 'components/Chat/Chat.subscriptions';\nimport * as S from './Chat.styled';\nconst Chat = () => {\n  const {\n    0: subscriptChannels,\n    1: setSubscriptChannels\n  } = useState({});\n  const {\n    0: threadMessage,\n    1: setThreadMessage\n  } = useState(null);\n  const {\n    0: channelInfo,\n    1: setChannelInfo\n  } = useState(null);\n  const {\n    0: attachments,\n    1: setAttachments\n  } = useState([]);\n  const {\n    0: isFirstMessageReached,\n    1: setFirstMessageReached\n  } = useState(false);\n  const {\n    0: isLastMessageReached,\n    1: setLastMessageReached\n  } = useState(false);\n  const {\n    user,\n    setUser\n  } = useContext(UserContext);\n  const router = useRouter();\n  const {\n    community: communityUrl,\n    channel: channelUrl,\n    linkMessageId,\n    threadId\n  } = router.query;\n  const {\n    chatLoaded,\n    setChatLoaded\n  } = useContext(AppContext);\n  const {\n    data: {\n      messages = []\n    } = {},\n    loading,\n    subscribeToMore,\n    fetchMore\n  } = useQuery(GET_LAST_MESSAGES, {\n    variables: {\n      channelUrl: `${communityUrl}/${channelUrl}`,\n      cursorId: threadId || linkMessageId\n    },\n    onCompleted: () => {\n      if (!chatLoaded) {\n        setChatLoaded(true);\n      }\n    }\n  });\n  const unreadCount = 0;\n  const [editMessageMutation] = useMutation(EDIT_MESSAGE);\n  const [updateChannelInfoMutation] = useMutation(UPDATE_CHANNEL_INFO);\n  const [setCurrentChannel] = useMutation(SET_CURRENT_CHANNEL);\n  useEffect(() => {\n    if (threadId) {\n      setThreadMessage(threadId);\n    }\n  }, [linkMessageId]);\n  const unreadMessagesCount = () => {\n    if (user && channelInfo) {\n      return messages.filter(({\n        createdAt,\n        author\n      }) => (author === null || author === void 0 ? void 0 : author.id) !== user.id && new Date(createdAt).getTime() > new Date(channelInfo.lastUpdateAt).getTime()).length;\n    }\n    return 0;\n  };\n  const throttledUpdate = useCallback(throttle(async message => {\n    try {\n      const updatedUser = await updateChannelInfoMutation({\n        variables: {\n          date: `${message.createdAt}`,\n          channelUrl: `${communityUrl}/${channelUrl}`\n        }\n      });\n      setUser(updatedUser.data.updateChannelInfo);\n    } catch (error) {\n      // alert(error);\n    }\n  }, 3000), [communityUrl, channelUrl]);\n  const updateChannelInfo = async message => {\n    if (channelInfo && new Date(message.createdAt).getTime() < new Date(channelInfo.lastUpdateAt).getTime()) {\n      return;\n    }\n    throttledUpdate(message);\n  };\n  useEffect(() => {\n    return () => {\n      setCurrentChannel({\n        variables: {\n          channelUrl: `${communityUrl}/general`\n        }\n      });\n    };\n  }, []);\n  useEffect(() => {\n    if (user) {\n      const currentChannelInfo = user.channelsInfo.find(({\n        channel\n      }) => channel.url === `${communityUrl}/${channelUrl}`);\n      if (currentChannelInfo) {\n        setChannelInfo(currentChannelInfo);\n      }\n    }\n  }, [user, communityUrl, channelUrl]);\n  useEffect(() => {\n    if (channelUrl && !subscriptChannels[`${communityUrl}/${channelUrl}`]) {\n      subscriptChannels[`${communityUrl}/${channelUrl}`] = true;\n      setSubscriptChannels(subscriptChannels);\n      console.log('===Subscriptions==', subscriptChannels);\n      Subscriptions({\n        subscribeToMore,\n        channelUrl,\n        communityUrl\n      });\n    }\n    setCurrentChannel({\n      variables: {\n        channelUrl: `${communityUrl}/${channelUrl}`\n      }\n    });\n  }, [communityUrl, channelUrl]);\n  const handleEditMessage = async (body, messageId) => {\n    try {\n      await editMessageMutation({\n        variables: {\n          body,\n          messageId\n        }\n      });\n    } catch (error) {\n      // alert(error);\n    }\n  };\n  const closeThread = () => {\n    setThreadMessage(null);\n  };\n  const handleScrollTopReachEnd = async () => {\n    try {\n      const result = await fetchMore({\n        query: GET_PREV_MESSAGES,\n        variables: {\n          channelUrl: `${communityUrl}/${channelUrl}`,\n          cursorId: messages[0].id\n        },\n        updateQuery: (prev, {\n          fetchMoreResult\n        }) => {\n          if (!fetchMoreResult.messages.length) {\n            setFirstMessageReached(true);\n            return prev;\n          }\n          const mergedMessages = [].concat(fetchMoreResult.messages, prev.messages);\n          return _objectSpread({}, prev, {\n            messages: mergedMessages\n          });\n        }\n      });\n      return result.data.messages;\n    } catch (error) {\n      return [];\n    }\n  };\n  const handleScrollBottomReachEnd = async () => {\n    console.log('why this one?');\n    try {\n      if (!loading) {\n        const result = await fetchMore({\n          query: GET_NEXT_MESSAGES,\n          variables: {\n            channelUrl: `${communityUrl}/${channelUrl}`,\n            cursorId: messages[messages.length - 1].id\n          },\n          updateQuery: (prev, {\n            fetchMoreResult\n          }) => {\n            if (!fetchMoreResult.messages.length) {\n              setLastMessageReached(true);\n              return prev;\n            }\n            const mergedMessages = [].concat(prev.messages, fetchMoreResult.messages);\n            return _objectSpread({}, prev, {\n              messages: mergedMessages\n            });\n          }\n        });\n        return result.data.messages;\n      }\n    } catch (error) {\n      console.log(error);\n    } finally {\n      return [];\n    }\n  };\n  const fetchMessagesById = async id => {\n    try {\n      await fetchMore({\n        variables: {\n          cursorId: id\n        },\n        updateQuery: (prev, {\n          fetchMoreResult\n        }) => _objectSpread({}, prev, {\n          messages: fetchMoreResult.messages\n        })\n      });\n    } catch (error) {\n      return [];\n    }\n  };\n  const onDrop = useCallback(acceptedFiles => {\n    setAttachments(acceptedFiles);\n  }, []);\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive\n  } = useDropzone({\n    onDrop\n  });\n  if (communityUrl === 'direct' && user) {\n    if (channelUrl.indexOf(`${user.username}-`) === -1) {\n      return router.push(`/${COMPANY_NAME()}/general/general`);\n    }\n  }\n  return __jsx(React.Fragment, null, __jsx(S.Container, _extends({}, getRootProps({\n    onClick: e => e.stopPropagation(),\n    disabled: true\n  }), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }\n  }), __jsx(S.ZoomImage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 9\n    }\n  }), __jsx(ChatHeader, {\n    fetchMessagesById: fetchMessagesById,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 9\n    }\n  }), __jsx(ChatBody, {\n    onThreadOpen: setThreadMessage,\n    messages: messages,\n    onEdit: handleEditMessage,\n    loading: loading,\n    unreadCount: unreadCount,\n    scrollMessageId: threadId || linkMessageId,\n    isFirstMessageReached: isFirstMessageReached,\n    isLastMessageReached: isLastMessageReached,\n    onReachTopEnd: handleScrollTopReachEnd,\n    onReachBottomEnd: handleScrollBottomReachEnd,\n    lastReadTime: channelInfo && channelInfo.lastUpdateAt,\n    updateChannelInfo: updateChannelInfo,\n    unreadMessagesNumber: unreadMessagesCount(),\n    userId: user && user.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 9\n    }\n  }), __jsx(ChatInput, {\n    dropzoneItems: attachments,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 9\n    }\n  }), __jsx(\"input\", _extends({}, getInputProps({\n    disabled: true\n  }), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 9\n    }\n  })), isDragActive && __jsx(DropzoneOverlay, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 26\n    }\n  })), __jsx(Thread, {\n    message: messages.find(({\n      id\n    }) => id === threadMessage),\n    onClose: closeThread,\n    scrollMessageId: linkMessageId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }\n  }));\n};\nexport default Chat;","map":{"version":3,"names":["useEffect","useCallback","useState","useContext","useRouter","useQuery","useMutation","useDropzone","throttle","UserContext","AppContext","GET_LAST_MESSAGES","GET_PREV_MESSAGES","GET_NEXT_MESSAGES","EDIT_MESSAGE","UPDATE_CHANNEL_INFO","SET_CURRENT_CHANNEL","COMPANY_NAME","ChatHeader","ChatBody","ChatInput","DropzoneOverlay","Thread","Subscriptions","S","Chat","subscriptChannels","setSubscriptChannels","threadMessage","setThreadMessage","channelInfo","setChannelInfo","attachments","setAttachments","isFirstMessageReached","setFirstMessageReached","isLastMessageReached","setLastMessageReached","user","setUser","router","community","communityUrl","channel","channelUrl","linkMessageId","threadId","query","chatLoaded","setChatLoaded","data","messages","loading","subscribeToMore","fetchMore","variables","cursorId","onCompleted","unreadCount","editMessageMutation","updateChannelInfoMutation","setCurrentChannel","unreadMessagesCount","filter","createdAt","author","id","Date","getTime","lastUpdateAt","length","throttledUpdate","message","updatedUser","date","updateChannelInfo","error","currentChannelInfo","channelsInfo","find","url","console","log","handleEditMessage","body","messageId","closeThread","handleScrollTopReachEnd","result","updateQuery","prev","fetchMoreResult","mergedMessages","concat","handleScrollBottomReachEnd","fetchMessagesById","onDrop","acceptedFiles","getRootProps","getInputProps","isDragActive","indexOf","username","push","onClick","e","stopPropagation","disabled"],"sources":["/Volumes/MacData/work/ciscord-frontend.git/components/Chat/Chat.js"],"sourcesContent":["import { useEffect, useCallback, useState, useContext } from 'react';\nimport { useRouter } from 'next/router';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { useDropzone } from 'react-dropzone';\nimport { throttle } from 'lodash';\n\nimport { UserContext } from 'context/UserContext';\nimport { AppContext } from 'context';\nimport {\n  GET_LAST_MESSAGES,\n  GET_PREV_MESSAGES,\n  GET_NEXT_MESSAGES,\n  EDIT_MESSAGE,\n} from 'apis/Message';\nimport { UPDATE_CHANNEL_INFO } from 'apis/ChannelInfo';\nimport { SET_CURRENT_CHANNEL } from 'apis/User';\nimport { COMPANY_NAME } from 'utils/config';\n\nimport ChatHeader from 'components/Chat/Header';\nimport ChatBody from 'components/Chat/Body';\nimport ChatInput from 'components/Chat/Input';\n\nimport DropzoneOverlay from 'components/UI/Dropzone';\nimport Thread from 'components/Chat/Thread';\nimport Subscriptions from 'components/Chat/Chat.subscriptions';\n\nimport * as S from './Chat.styled';\n\nconst Chat = () => {\n  const [subscriptChannels, setSubscriptChannels] = useState({});\n  const [threadMessage, setThreadMessage] = useState(null);\n  const [channelInfo, setChannelInfo] = useState(null);\n  const [attachments, setAttachments] = useState([]);\n  const [isFirstMessageReached, setFirstMessageReached] = useState(false);\n  const [isLastMessageReached, setLastMessageReached] = useState(false);\n  const { user, setUser } = useContext(UserContext);\n  const router = useRouter();\n  const { community: communityUrl, channel: channelUrl, linkMessageId, threadId } = router.query;\n\n  const { chatLoaded, setChatLoaded } = useContext(AppContext);\n\n  const { data: { messages = [] } = {}, loading, subscribeToMore, fetchMore } = useQuery(\n    GET_LAST_MESSAGES,\n    {\n      variables: {\n        channelUrl: `${communityUrl}/${channelUrl}`,\n        cursorId: threadId || linkMessageId,\n      },\n      onCompleted: () => {\n        if (!chatLoaded) {\n          setChatLoaded(true);\n        }\n      },\n    }\n  );\n  const unreadCount = 0;\n\n  const [editMessageMutation] = useMutation(EDIT_MESSAGE);\n  const [updateChannelInfoMutation] = useMutation(UPDATE_CHANNEL_INFO);\n  const [setCurrentChannel] = useMutation(SET_CURRENT_CHANNEL);\n\n  useEffect(() => {\n    if (threadId) {\n      setThreadMessage(threadId);\n    }\n  }, [linkMessageId]);\n\n  const unreadMessagesCount = () => {\n    if (user && channelInfo) {\n      return messages.filter(\n        ({ createdAt, author }) =>\n          author?.id !== user.id &&\n          new Date(createdAt).getTime() > new Date(channelInfo.lastUpdateAt).getTime()\n      ).length;\n    }\n    return 0;\n  };\n\n  const throttledUpdate = useCallback(\n    throttle(async message => {\n      try {\n        const updatedUser = await updateChannelInfoMutation({\n          variables: {\n            date: `${message.createdAt}`,\n            channelUrl: `${communityUrl}/${channelUrl}`,\n          },\n        });\n\n        setUser(updatedUser.data.updateChannelInfo);\n      } catch (error) {\n        // alert(error);\n      }\n    }, 3000),\n    [communityUrl, channelUrl]\n  );\n\n  const updateChannelInfo = async message => {\n    if (\n      channelInfo &&\n      new Date(message.createdAt).getTime() < new Date(channelInfo.lastUpdateAt).getTime()\n    ) {\n      return;\n    }\n\n    throttledUpdate(message);\n  };\n\n  useEffect(() => {\n    return () => {\n      setCurrentChannel({ variables: { channelUrl: `${communityUrl}/general` } });\n    };\n  }, []);\n\n  useEffect(() => {\n    if (user) {\n      const currentChannelInfo = user.channelsInfo.find(\n        ({ channel }) => channel.url === `${communityUrl}/${channelUrl}`\n      );\n\n      if (currentChannelInfo) {\n        setChannelInfo(currentChannelInfo);\n      }\n    }\n  }, [user, communityUrl, channelUrl]);\n\n  useEffect(() => {\n    if (channelUrl && !subscriptChannels[`${communityUrl}/${channelUrl}`]) {\n      subscriptChannels[`${communityUrl}/${channelUrl}`] = true;\n      setSubscriptChannels(subscriptChannels);\n      console.log('===Subscriptions==', subscriptChannels)\n      Subscriptions({ subscribeToMore, channelUrl, communityUrl });\n    }\n\n    setCurrentChannel({ variables: { channelUrl: `${communityUrl}/${channelUrl}` } });\n  }, [communityUrl, channelUrl]);\n\n  const handleEditMessage = async (body, messageId) => {\n    try {\n      await editMessageMutation({ variables: { body, messageId } });\n    } catch (error) {\n      // alert(error);\n    }\n  };\n\n  const closeThread = () => {\n    setThreadMessage(null);\n  };\n\n  const handleScrollTopReachEnd = async () => {\n    try {\n      const result = await fetchMore({\n        query: GET_PREV_MESSAGES,\n        variables: {\n          channelUrl: `${communityUrl}/${channelUrl}`,\n          cursorId: messages[0].id,\n        },\n        updateQuery: (prev, { fetchMoreResult }) => {\n          if (!fetchMoreResult.messages.length) {\n            setFirstMessageReached(true);\n            return prev;\n          }\n          const mergedMessages = [].concat(fetchMoreResult.messages, prev.messages);\n          return { ...prev, messages: mergedMessages };\n        },\n      });\n\n      return result.data.messages;\n    } catch (error) {\n      return [];\n    }\n  };\n\n  const handleScrollBottomReachEnd = async () => {\n    console.log('why this one?')\n    try {\n      if (!loading) {\n        const result = await fetchMore({\n          query: GET_NEXT_MESSAGES,\n          variables: {\n            channelUrl: `${communityUrl}/${channelUrl}`,\n            cursorId: messages[messages.length - 1].id,\n          },\n          updateQuery: (prev, { fetchMoreResult }) => {\n            if (!fetchMoreResult.messages.length) {\n              setLastMessageReached(true);\n              return prev;\n            }\n\n            const mergedMessages = [].concat(prev.messages, fetchMoreResult.messages);\n            return { ...prev, messages: mergedMessages };\n          },\n        });\n\n        return result.data.messages;\n      }\n\n    } catch (error) {\n      console.log(error)\n    } finally {\n      return [];\n    }\n\n  };\n\n  const fetchMessagesById = async id => {\n    try {\n      await fetchMore({\n        variables: { cursorId: id },\n        updateQuery: (prev, { fetchMoreResult }) => ({\n          ...prev,\n          messages: fetchMoreResult.messages,\n        }),\n      });\n    } catch (error) {\n      return [];\n    }\n  };\n\n  const onDrop = useCallback(acceptedFiles => {\n    setAttachments(acceptedFiles);\n  }, []);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n  });\n\n  if (communityUrl === 'direct' && user) {\n    if (channelUrl.indexOf(`${user.username}-`) === -1) {\n      return router.push(`/${COMPANY_NAME()}/general/general`);\n    }\n  }\n  return (\n    <>\n      <S.Container {...getRootProps({ onClick: e => e.stopPropagation(), disabled: true })}>\n        <S.ZoomImage />\n        <ChatHeader fetchMessagesById={fetchMessagesById} />\n\n        <ChatBody\n          onThreadOpen={setThreadMessage}\n          messages={messages}\n          onEdit={handleEditMessage}\n          loading={loading}\n          unreadCount={unreadCount}\n          scrollMessageId={threadId || linkMessageId}\n          isFirstMessageReached={isFirstMessageReached}\n          isLastMessageReached={isLastMessageReached}\n          onReachTopEnd={handleScrollTopReachEnd}\n          onReachBottomEnd={handleScrollBottomReachEnd}\n          lastReadTime={channelInfo && channelInfo.lastUpdateAt}\n          updateChannelInfo={updateChannelInfo}\n          unreadMessagesNumber={unreadMessagesCount()}\n          userId={user && user.id}\n        />\n        <ChatInput dropzoneItems={attachments} />\n        <input {...getInputProps({ disabled: true })} />\n        {isDragActive && <DropzoneOverlay />}\n      </S.Container>\n      <Thread\n        message={messages.find(({ id }) => id === threadMessage)}\n        onClose={closeThread}\n        scrollMessageId={linkMessageId}\n      />\n    </>\n  );\n};\nexport default Chat;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}