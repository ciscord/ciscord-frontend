{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst url_1 = require(\"url\");\nconst mitt_1 = __importDefault(require(\"../mitt\"));\nconst utils_1 = require(\"../utils\");\nconst is_dynamic_1 = require(\"./utils/is-dynamic\");\nconst route_matcher_1 = require(\"./utils/route-matcher\");\nconst route_regex_1 = require(\"./utils/route-regex\");\nfunction addBasePath(path) {\n  // variable is always a string\n  const p = process.env.__NEXT_ROUTER_BASEPATH;\n  return path.indexOf(p) !== 0 ? p + path : path;\n}\nfunction toRoute(path) {\n  return path.replace(/\\/$/, '') || '/';\n}\nconst prepareRoute = path => toRoute(!path || path === '/' ? '/index' : path);\nfunction fetchNextData(pathname, query, isServerRender, cb) {\n  let attempts = isServerRender ? 3 : 1;\n  function getResponse() {\n    return fetch(utils_1.formatWithValidation({\n      // @ts-ignore __NEXT_DATA__\n      pathname: `/_next/data/${__NEXT_DATA__.buildId}${pathname}.json`,\n      query\n    })).then(res => {\n      if (!res.ok) {\n        if (--attempts > 0 && res.status >= 500) {\n          return getResponse();\n        }\n        throw new Error(`Failed to load static props`);\n      }\n      return res.json();\n    });\n  }\n  return getResponse().then(data => {\n    return cb ? cb(data) : data;\n  }).catch(err => {\n    // We should only trigger a server-side transition if this was caused\n    // on a client-side transition. Otherwise, we'd get into an infinite\n    // loop.\n    if (!isServerRender) {\n      ;\n      err.code = 'PAGE_LOAD_ERROR';\n    }\n    throw err;\n  });\n}\nclass Router {\n  constructor(pathname, query, as, {\n    initialProps,\n    pageLoader,\n    App,\n    wrapApp,\n    Component,\n    err,\n    subscription,\n    isFallback\n  }) {\n    // Static Data Cache\n    this.sdc = {};\n    this.onPopState = e => {\n      if (!e.state) {\n        // We get state as undefined for two reasons.\n        //  1. With older safari (< 8) and older chrome (< 34)\n        //  2. When the URL changed with #\n        //\n        // In the both cases, we don't need to proceed and change the route.\n        // (as it's already changed)\n        // But we can simply replace the state with the new changes.\n        // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n        // So, doing the following for (1) does no harm.\n        const {\n          pathname,\n          query\n        } = this;\n        this.changeState('replaceState', utils_1.formatWithValidation({\n          pathname,\n          query\n        }), utils_1.getURL());\n        return;\n      }\n      // Make sure we don't re-render on initial load,\n      // can be caused by navigating back from an external site\n      if (e.state && this.isSsr && e.state.url === this.pathname && e.state.as === this.asPath) {\n        return;\n      }\n      // If the downstream application returns falsy, return.\n      // They will then be responsible for handling the event.\n      if (this._bps && !this._bps(e.state)) {\n        return;\n      }\n      const {\n        url,\n        as,\n        options\n      } = e.state;\n      if (false) {\n        if (typeof url === 'undefined' || typeof as === 'undefined') {\n          console.warn('`popstate` event triggered but `event.state` did not have `url` or `as` https://err.sh/zeit/next.js/popstate-state-empty');\n        }\n      }\n      this.replace(url, as, options);\n    };\n    this._getStaticData = asPath => {\n      const pathname = prepareRoute(url_1.parse(asPath).pathname);\n      return true && this.sdc[pathname] ? Promise.resolve(this.sdc[pathname]) : fetchNextData(pathname, null, this.isSsr, data => this.sdc[pathname] = data);\n    };\n    this._getServerData = asPath => {\n      let {\n        pathname,\n        query\n      } = url_1.parse(asPath, true);\n      pathname = prepareRoute(pathname);\n      return fetchNextData(pathname, query, this.isSsr);\n    };\n    // represents the current component key\n    this.route = toRoute(pathname);\n    // set up the component cache (by route keys)\n    this.components = {};\n    // We should not keep the cache, if there's an error\n    // Otherwise, this cause issues when when going back and\n    // come again to the errored page.\n    if (pathname !== '/_error') {\n      this.components[this.route] = {\n        Component,\n        props: initialProps,\n        err\n      };\n    }\n    this.components['/_app'] = {\n      Component: App\n    };\n    // Backwards compat for Router.router.events\n    // TODO: Should be remove the following major version as it was never documented\n    this.events = Router.events;\n    this.pageLoader = pageLoader;\n    this.pathname = pathname;\n    this.query = query;\n    // if auto prerendered and dynamic route wait to update asPath\n    // until after mount to prevent hydration mismatch\n    this.asPath =\n    // @ts-ignore this is temporarily global (attached to window)\n    is_dynamic_1.isDynamicRoute(pathname) && __NEXT_DATA__.autoExport ? pathname : as;\n    this.sub = subscription;\n    this.clc = null;\n    this._wrapApp = wrapApp;\n    // make sure to ignore extra popState in safari on navigating\n    // back from external site\n    this.isSsr = true;\n    this.isFallback = isFallback;\n    if (false) {\n      // in order for `e.state` to work on the `onpopstate` event\n      // we have to register the initial route upon initialization\n      this.changeState('replaceState', utils_1.formatWithValidation({\n        pathname,\n        query\n      }), as);\n      window.addEventListener('popstate', this.onPopState);\n    }\n  }\n  // @deprecated backwards compatibility even though it's a private method.\n  static _rewriteUrlForNextExport(url) {\n    if (process.env.__NEXT_EXPORT_TRAILING_SLASH) {\n      const rewriteUrlForNextExport = require('./rewrite-url-for-export').rewriteUrlForNextExport;\n      return rewriteUrlForNextExport(url);\n    } else {\n      return url;\n    }\n  }\n  update(route, mod) {\n    const Component = mod.default || mod;\n    const data = this.components[route];\n    if (!data) {\n      throw new Error(`Cannot update unavailable route: ${route}`);\n    }\n    const newData = Object.assign(Object.assign({}, data), {\n      Component\n    });\n    this.components[route] = newData;\n    // pages/_app.js updated\n    if (route === '/_app') {\n      this.notify(this.components[this.route]);\n      return;\n    }\n    if (route === this.route) {\n      this.notify(newData);\n    }\n  }\n  reload() {\n    window.location.reload();\n  }\n  /**\n   * Go back in history\n   */\n  back() {\n    window.history.back();\n  }\n  /**\n   * Performs a `pushState` with arguments\n   * @param url of the route\n   * @param as masks `url` for the browser\n   * @param options object you can define `shallow` and other options\n   */\n  push(url, as = url, options = {}) {\n    return this.change('pushState', url, as, options);\n  }\n  /**\n   * Performs a `replaceState` with arguments\n   * @param url of the route\n   * @param as masks `url` for the browser\n   * @param options object you can define `shallow` and other options\n   */\n  replace(url, as = url, options = {}) {\n    return this.change('replaceState', url, as, options);\n  }\n  change(method, _url, _as, options) {\n    return new Promise((resolve, reject) => {\n      if (!options._h) {\n        this.isSsr = false;\n      }\n      // marking route changes as a navigation start entry\n      if (utils_1.ST) {\n        performance.mark('routeChange');\n      }\n      // If url and as provided as an object representation,\n      // we'll format them into the string version here.\n      const url = typeof _url === 'object' ? utils_1.formatWithValidation(_url) : _url;\n      let as = typeof _as === 'object' ? utils_1.formatWithValidation(_as) : _as;\n      // Add the ending slash to the paths. So, we can serve the\n      // \"<page>/index.html\" directly for the SSR page.\n      if (process.env.__NEXT_EXPORT_TRAILING_SLASH) {\n        const rewriteUrlForNextExport = require('./rewrite-url-for-export').rewriteUrlForNextExport;\n        // @ts-ignore this is temporarily global (attached to window)\n        if (__NEXT_DATA__.nextExport) {\n          as = rewriteUrlForNextExport(as);\n        }\n      }\n      this.abortComponentLoad(as);\n      // If the url change is only related to a hash change\n      // We should not proceed. We should only change the state.\n      // WARNING: `_h` is an internal option for handing Next.js client-side\n      // hydration. Your app should _never_ use this property. It may change at\n      // any time without notice.\n      if (!options._h && this.onlyAHashChange(as)) {\n        this.asPath = as;\n        Router.events.emit('hashChangeStart', as);\n        this.changeState(method, url, addBasePath(as), options);\n        this.scrollToHash(as);\n        Router.events.emit('hashChangeComplete', as);\n        return resolve(true);\n      }\n      const {\n        pathname,\n        query,\n        protocol\n      } = url_1.parse(url, true);\n      if (!pathname || protocol) {\n        if (false) {\n          throw new Error(`Invalid href passed to router: ${url} https://err.sh/zeit/next.js/invalid-href-passed`);\n        }\n        return resolve(false);\n      }\n      // If asked to change the current URL we should reload the current page\n      // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n      // We also need to set the method = replaceState always\n      // as this should not go into the history (That's how browsers work)\n      // We should compare the new asPath to the current asPath, not the url\n      if (!this.urlIsNew(as)) {\n        method = 'replaceState';\n      }\n      const route = toRoute(pathname);\n      const {\n        shallow = false\n      } = options;\n      if (is_dynamic_1.isDynamicRoute(route)) {\n        const {\n          pathname: asPathname\n        } = url_1.parse(as);\n        const routeRegex = route_regex_1.getRouteRegex(route);\n        const routeMatch = route_matcher_1.getRouteMatcher(routeRegex)(asPathname);\n        if (!routeMatch) {\n          const missingParams = Object.keys(routeRegex.groups).filter(param => !query[param]);\n          if (missingParams.length > 0) {\n            if (false) {\n              console.warn(`Mismatching \\`as\\` and \\`href\\` failed to manually provide ` + `the params: ${missingParams.join(', ')} in the \\`href\\`'s \\`query\\``);\n            }\n            return reject(new Error(`The provided \\`as\\` value (${asPathname}) is incompatible with the \\`href\\` value (${route}). ` + `Read more: https://err.sh/zeit/next.js/incompatible-href-as`));\n          }\n        } else {\n          // Merge params into `query`, overwriting any specified in search\n          Object.assign(query, routeMatch);\n        }\n      }\n      Router.events.emit('routeChangeStart', as);\n      // If shallow is true and the route exists in the router cache we reuse the previous result\n      this.getRouteInfo(route, pathname, query, as, shallow).then(routeInfo => {\n        const {\n          error\n        } = routeInfo;\n        if (error && error.cancelled) {\n          return resolve(false);\n        }\n        Router.events.emit('beforeHistoryChange', as);\n        this.changeState(method, url, addBasePath(as), options);\n        if (false) {\n          const appComp = this.components['/_app'].Component;\n          window.next.isPrerendered = appComp.getInitialProps === appComp.origGetInitialProps && !routeInfo.Component.getInitialProps;\n        }\n        this.set(route, pathname, query, as, routeInfo);\n        if (error) {\n          Router.events.emit('routeChangeError', error, as);\n          throw error;\n        }\n        Router.events.emit('routeChangeComplete', as);\n        return resolve(true);\n      }, reject);\n    });\n  }\n  changeState(method, url, as, options = {}) {\n    if (false) {\n      if (typeof window.history === 'undefined') {\n        console.error(`Warning: window.history is not available.`);\n        return;\n      }\n      if (typeof window.history[method] === 'undefined') {\n        console.error(`Warning: window.history.${method} is not available`);\n        return;\n      }\n    }\n    if (method !== 'pushState' || utils_1.getURL() !== as) {\n      window.history[method]({\n        url,\n        as,\n        options\n      },\n      // Most browsers currently ignores this parameter, although they may use it in the future.\n      // Passing the empty string here should be safe against future changes to the method.\n      // https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState\n      '', as);\n    }\n  }\n  getRouteInfo(route, pathname, query, as, shallow = false) {\n    const cachedRouteInfo = this.components[route];\n    // If there is a shallow route transition possible\n    // If the route is already rendered on the screen.\n    if (shallow && cachedRouteInfo && this.route === route) {\n      return Promise.resolve(cachedRouteInfo);\n    }\n    return new Promise((resolve, reject) => {\n      if (cachedRouteInfo) {\n        return resolve(cachedRouteInfo);\n      }\n      this.fetchComponent(route).then(Component => resolve({\n        Component\n      }), reject);\n    }).then(routeInfo => {\n      const {\n        Component\n      } = routeInfo;\n      if (false) {\n        const {\n          isValidElementType\n        } = require('react-is');\n        if (!isValidElementType(Component)) {\n          throw new Error(`The default export is not a React Component in page: \"${pathname}\"`);\n        }\n      }\n      return this._getData(() => Component.__N_SSG ? this._getStaticData(as) : Component.__N_SSP ? this._getServerData(as) : this.getInitialProps(Component,\n      // we provide AppTree later so this needs to be `any`\n      {\n        pathname,\n        query,\n        asPath: as\n      })).then(props => {\n        routeInfo.props = props;\n        this.components[route] = routeInfo;\n        return routeInfo;\n      });\n    }).catch(err => {\n      return new Promise(resolve => {\n        if (err.code === 'PAGE_LOAD_ERROR') {\n          // If we can't load the page it could be one of following reasons\n          //  1. Page doesn't exists\n          //  2. Page does exist in a different zone\n          //  3. Internal error while loading the page\n          // So, doing a hard reload is the proper way to deal with this.\n          window.location.href = as;\n          // Changing the URL doesn't block executing the current code path.\n          // So, we need to mark it as a cancelled error and stop the routing logic.\n          err.cancelled = true;\n          // @ts-ignore TODO: fix the control flow here\n          return resolve({\n            error: err\n          });\n        }\n        if (err.cancelled) {\n          // @ts-ignore TODO: fix the control flow here\n          return resolve({\n            error: err\n          });\n        }\n        resolve(this.fetchComponent('/_error').then(Component => {\n          const routeInfo = {\n            Component,\n            err\n          };\n          return new Promise(resolve => {\n            this.getInitialProps(Component, {\n              err,\n              pathname,\n              query\n            }).then(props => {\n              routeInfo.props = props;\n              routeInfo.error = err;\n              resolve(routeInfo);\n            }, gipErr => {\n              console.error('Error in error page `getInitialProps`: ', gipErr);\n              routeInfo.error = err;\n              routeInfo.props = {};\n              resolve(routeInfo);\n            });\n          });\n        }));\n      });\n    });\n  }\n  set(route, pathname, query, as, data) {\n    this.isFallback = false;\n    this.route = route;\n    this.pathname = pathname;\n    this.query = query;\n    this.asPath = as;\n    this.notify(data);\n  }\n  /**\n   * Callback to execute before replacing router state\n   * @param cb callback to be executed\n   */\n  beforePopState(cb) {\n    this._bps = cb;\n  }\n  onlyAHashChange(as) {\n    if (!this.asPath) return false;\n    const [oldUrlNoHash, oldHash] = this.asPath.split('#');\n    const [newUrlNoHash, newHash] = as.split('#');\n    // Makes sure we scroll to the provided hash if the url/hash are the same\n    if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n      return true;\n    }\n    // If the urls are change, there's more than a hash change\n    if (oldUrlNoHash !== newUrlNoHash) {\n      return false;\n    }\n    // If the hash has changed, then it's a hash only change.\n    // This check is necessary to handle both the enter and\n    // leave hash === '' cases. The identity case falls through\n    // and is treated as a next reload.\n    return oldHash !== newHash;\n  }\n  scrollToHash(as) {\n    const [, hash] = as.split('#');\n    // Scroll to top if the hash is just `#` with no value\n    if (hash === '') {\n      window.scrollTo(0, 0);\n      return;\n    }\n    // First we check if the element by id is found\n    const idEl = document.getElementById(hash);\n    if (idEl) {\n      idEl.scrollIntoView();\n      return;\n    }\n    // If there's no element with the id, we check the `name` property\n    // To mirror browsers\n    const nameEl = document.getElementsByName(hash)[0];\n    if (nameEl) {\n      nameEl.scrollIntoView();\n    }\n  }\n  urlIsNew(asPath) {\n    return this.asPath !== asPath;\n  }\n  /**\n   * Prefetch page code, you may wait for the data during page rendering.\n   * This feature only works in production!\n   * @param url the href of prefetched page\n   * @param asPath the as path of the prefetched page\n   */\n  prefetch(url, asPath = url, options = {}) {\n    return new Promise((resolve, reject) => {\n      const {\n        pathname,\n        protocol\n      } = url_1.parse(url);\n      if (!pathname || protocol) {\n        if (false) {\n          throw new Error(`Invalid href passed to router: ${url} https://err.sh/zeit/next.js/invalid-href-passed`);\n        }\n        return;\n      }\n      // Prefetch is not supported in development mode because it would trigger on-demand-entries\n      if (false) {\n        return;\n      }\n      this.pageLoader[options.priority ? 'loadPage' : 'prefetch'](toRoute(pathname)).then(() => resolve(), reject);\n    });\n  }\n  async fetchComponent(route) {\n    let cancelled = false;\n    const cancel = this.clc = () => {\n      cancelled = true;\n    };\n    const Component = await this.pageLoader.loadPage(route);\n    if (cancelled) {\n      const error = new Error(`Abort fetching component for route: \"${route}\"`);\n      error.cancelled = true;\n      throw error;\n    }\n    if (cancel === this.clc) {\n      this.clc = null;\n    }\n    return Component;\n  }\n  _getData(fn) {\n    let cancelled = false;\n    const cancel = () => {\n      cancelled = true;\n    };\n    this.clc = cancel;\n    return fn().then(data => {\n      if (cancel === this.clc) {\n        this.clc = null;\n      }\n      if (cancelled) {\n        const err = new Error('Loading initial props cancelled');\n        err.cancelled = true;\n        throw err;\n      }\n      return data;\n    });\n  }\n  getInitialProps(Component, ctx) {\n    const {\n      Component: App\n    } = this.components['/_app'];\n    const AppTree = this._wrapApp(App);\n    ctx.AppTree = AppTree;\n    return utils_1.loadGetInitialProps(App, {\n      AppTree,\n      Component,\n      router: this,\n      ctx\n    });\n  }\n  abortComponentLoad(as) {\n    if (this.clc) {\n      const e = new Error('Route Cancelled');\n      e.cancelled = true;\n      Router.events.emit('routeChangeError', e, as);\n      this.clc();\n      this.clc = null;\n    }\n  }\n  notify(data) {\n    this.sub(data, this.components['/_app'].Component);\n  }\n}\nexports.default = Router;\nRouter.events = mitt_1.default();","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","url_1","require","mitt_1","utils_1","is_dynamic_1","route_matcher_1","route_regex_1","addBasePath","path","p","process","env","__NEXT_ROUTER_BASEPATH","indexOf","toRoute","replace","prepareRoute","fetchNextData","pathname","query","isServerRender","cb","attempts","getResponse","fetch","formatWithValidation","__NEXT_DATA__","buildId","then","res","ok","status","Error","json","data","catch","err","code","Router","constructor","as","initialProps","pageLoader","App","wrapApp","Component","subscription","isFallback","sdc","onPopState","e","state","changeState","getURL","isSsr","url","asPath","_bps","options","console","warn","_getStaticData","parse","Promise","resolve","_getServerData","route","components","props","events","isDynamicRoute","autoExport","sub","clc","_wrapApp","window","addEventListener","_rewriteUrlForNextExport","__NEXT_EXPORT_TRAILING_SLASH","rewriteUrlForNextExport","update","default","newData","assign","notify","reload","location","back","history","push","change","method","_url","_as","reject","_h","ST","performance","mark","nextExport","abortComponentLoad","onlyAHashChange","emit","scrollToHash","protocol","urlIsNew","shallow","asPathname","routeRegex","getRouteRegex","routeMatch","getRouteMatcher","missingParams","keys","groups","filter","param","length","join","getRouteInfo","routeInfo","error","cancelled","appComp","next","isPrerendered","getInitialProps","origGetInitialProps","set","cachedRouteInfo","fetchComponent","isValidElementType","_getData","__N_SSG","__N_SSP","href","gipErr","beforePopState","oldUrlNoHash","oldHash","split","newUrlNoHash","newHash","hash","scrollTo","idEl","document","getElementById","scrollIntoView","nameEl","getElementsByName","prefetch","priority","cancel","loadPage","fn","ctx","AppTree","loadGetInitialProps","router"],"sources":["/Volumes/MacData/work/ciscord-frontend.git/node_modules/next/dist/next-server/lib/router/router.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst url_1 = require(\"url\");\nconst mitt_1 = __importDefault(require(\"../mitt\"));\nconst utils_1 = require(\"../utils\");\nconst is_dynamic_1 = require(\"./utils/is-dynamic\");\nconst route_matcher_1 = require(\"./utils/route-matcher\");\nconst route_regex_1 = require(\"./utils/route-regex\");\nfunction addBasePath(path) {\n    // variable is always a string\n    const p = process.env.__NEXT_ROUTER_BASEPATH;\n    return path.indexOf(p) !== 0 ? p + path : path;\n}\nfunction toRoute(path) {\n    return path.replace(/\\/$/, '') || '/';\n}\nconst prepareRoute = (path) => toRoute(!path || path === '/' ? '/index' : path);\nfunction fetchNextData(pathname, query, isServerRender, cb) {\n    let attempts = isServerRender ? 3 : 1;\n    function getResponse() {\n        return fetch(utils_1.formatWithValidation({\n            // @ts-ignore __NEXT_DATA__\n            pathname: `/_next/data/${__NEXT_DATA__.buildId}${pathname}.json`,\n            query,\n        })).then(res => {\n            if (!res.ok) {\n                if (--attempts > 0 && res.status >= 500) {\n                    return getResponse();\n                }\n                throw new Error(`Failed to load static props`);\n            }\n            return res.json();\n        });\n    }\n    return getResponse()\n        .then(data => {\n        return cb ? cb(data) : data;\n    })\n        .catch((err) => {\n        // We should only trigger a server-side transition if this was caused\n        // on a client-side transition. Otherwise, we'd get into an infinite\n        // loop.\n        if (!isServerRender) {\n            ;\n            err.code = 'PAGE_LOAD_ERROR';\n        }\n        throw err;\n    });\n}\nclass Router {\n    constructor(pathname, query, as, { initialProps, pageLoader, App, wrapApp, Component, err, subscription, isFallback, }) {\n        // Static Data Cache\n        this.sdc = {};\n        this.onPopState = (e) => {\n            if (!e.state) {\n                // We get state as undefined for two reasons.\n                //  1. With older safari (< 8) and older chrome (< 34)\n                //  2. When the URL changed with #\n                //\n                // In the both cases, we don't need to proceed and change the route.\n                // (as it's already changed)\n                // But we can simply replace the state with the new changes.\n                // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n                // So, doing the following for (1) does no harm.\n                const { pathname, query } = this;\n                this.changeState('replaceState', utils_1.formatWithValidation({ pathname, query }), utils_1.getURL());\n                return;\n            }\n            // Make sure we don't re-render on initial load,\n            // can be caused by navigating back from an external site\n            if (e.state &&\n                this.isSsr &&\n                e.state.url === this.pathname &&\n                e.state.as === this.asPath) {\n                return;\n            }\n            // If the downstream application returns falsy, return.\n            // They will then be responsible for handling the event.\n            if (this._bps && !this._bps(e.state)) {\n                return;\n            }\n            const { url, as, options } = e.state;\n            if (process.env.NODE_ENV !== 'production') {\n                if (typeof url === 'undefined' || typeof as === 'undefined') {\n                    console.warn('`popstate` event triggered but `event.state` did not have `url` or `as` https://err.sh/zeit/next.js/popstate-state-empty');\n                }\n            }\n            this.replace(url, as, options);\n        };\n        this._getStaticData = (asPath) => {\n            const pathname = prepareRoute(url_1.parse(asPath).pathname);\n            return process.env.NODE_ENV === 'production' && this.sdc[pathname]\n                ? Promise.resolve(this.sdc[pathname])\n                : fetchNextData(pathname, null, this.isSsr, data => (this.sdc[pathname] = data));\n        };\n        this._getServerData = (asPath) => {\n            let { pathname, query } = url_1.parse(asPath, true);\n            pathname = prepareRoute(pathname);\n            return fetchNextData(pathname, query, this.isSsr);\n        };\n        // represents the current component key\n        this.route = toRoute(pathname);\n        // set up the component cache (by route keys)\n        this.components = {};\n        // We should not keep the cache, if there's an error\n        // Otherwise, this cause issues when when going back and\n        // come again to the errored page.\n        if (pathname !== '/_error') {\n            this.components[this.route] = { Component, props: initialProps, err };\n        }\n        this.components['/_app'] = { Component: App };\n        // Backwards compat for Router.router.events\n        // TODO: Should be remove the following major version as it was never documented\n        this.events = Router.events;\n        this.pageLoader = pageLoader;\n        this.pathname = pathname;\n        this.query = query;\n        // if auto prerendered and dynamic route wait to update asPath\n        // until after mount to prevent hydration mismatch\n        this.asPath =\n            // @ts-ignore this is temporarily global (attached to window)\n            is_dynamic_1.isDynamicRoute(pathname) && __NEXT_DATA__.autoExport ? pathname : as;\n        this.sub = subscription;\n        this.clc = null;\n        this._wrapApp = wrapApp;\n        // make sure to ignore extra popState in safari on navigating\n        // back from external site\n        this.isSsr = true;\n        this.isFallback = isFallback;\n        if (typeof window !== 'undefined') {\n            // in order for `e.state` to work on the `onpopstate` event\n            // we have to register the initial route upon initialization\n            this.changeState('replaceState', utils_1.formatWithValidation({ pathname, query }), as);\n            window.addEventListener('popstate', this.onPopState);\n        }\n    }\n    // @deprecated backwards compatibility even though it's a private method.\n    static _rewriteUrlForNextExport(url) {\n        if (process.env.__NEXT_EXPORT_TRAILING_SLASH) {\n            const rewriteUrlForNextExport = require('./rewrite-url-for-export')\n                .rewriteUrlForNextExport;\n            return rewriteUrlForNextExport(url);\n        }\n        else {\n            return url;\n        }\n    }\n    update(route, mod) {\n        const Component = mod.default || mod;\n        const data = this.components[route];\n        if (!data) {\n            throw new Error(`Cannot update unavailable route: ${route}`);\n        }\n        const newData = Object.assign(Object.assign({}, data), { Component });\n        this.components[route] = newData;\n        // pages/_app.js updated\n        if (route === '/_app') {\n            this.notify(this.components[this.route]);\n            return;\n        }\n        if (route === this.route) {\n            this.notify(newData);\n        }\n    }\n    reload() {\n        window.location.reload();\n    }\n    /**\n     * Go back in history\n     */\n    back() {\n        window.history.back();\n    }\n    /**\n     * Performs a `pushState` with arguments\n     * @param url of the route\n     * @param as masks `url` for the browser\n     * @param options object you can define `shallow` and other options\n     */\n    push(url, as = url, options = {}) {\n        return this.change('pushState', url, as, options);\n    }\n    /**\n     * Performs a `replaceState` with arguments\n     * @param url of the route\n     * @param as masks `url` for the browser\n     * @param options object you can define `shallow` and other options\n     */\n    replace(url, as = url, options = {}) {\n        return this.change('replaceState', url, as, options);\n    }\n    change(method, _url, _as, options) {\n        return new Promise((resolve, reject) => {\n            if (!options._h) {\n                this.isSsr = false;\n            }\n            // marking route changes as a navigation start entry\n            if (utils_1.ST) {\n                performance.mark('routeChange');\n            }\n            // If url and as provided as an object representation,\n            // we'll format them into the string version here.\n            const url = typeof _url === 'object' ? utils_1.formatWithValidation(_url) : _url;\n            let as = typeof _as === 'object' ? utils_1.formatWithValidation(_as) : _as;\n            // Add the ending slash to the paths. So, we can serve the\n            // \"<page>/index.html\" directly for the SSR page.\n            if (process.env.__NEXT_EXPORT_TRAILING_SLASH) {\n                const rewriteUrlForNextExport = require('./rewrite-url-for-export')\n                    .rewriteUrlForNextExport;\n                // @ts-ignore this is temporarily global (attached to window)\n                if (__NEXT_DATA__.nextExport) {\n                    as = rewriteUrlForNextExport(as);\n                }\n            }\n            this.abortComponentLoad(as);\n            // If the url change is only related to a hash change\n            // We should not proceed. We should only change the state.\n            // WARNING: `_h` is an internal option for handing Next.js client-side\n            // hydration. Your app should _never_ use this property. It may change at\n            // any time without notice.\n            if (!options._h && this.onlyAHashChange(as)) {\n                this.asPath = as;\n                Router.events.emit('hashChangeStart', as);\n                this.changeState(method, url, addBasePath(as), options);\n                this.scrollToHash(as);\n                Router.events.emit('hashChangeComplete', as);\n                return resolve(true);\n            }\n            const { pathname, query, protocol } = url_1.parse(url, true);\n            if (!pathname || protocol) {\n                if (process.env.NODE_ENV !== 'production') {\n                    throw new Error(`Invalid href passed to router: ${url} https://err.sh/zeit/next.js/invalid-href-passed`);\n                }\n                return resolve(false);\n            }\n            // If asked to change the current URL we should reload the current page\n            // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n            // We also need to set the method = replaceState always\n            // as this should not go into the history (That's how browsers work)\n            // We should compare the new asPath to the current asPath, not the url\n            if (!this.urlIsNew(as)) {\n                method = 'replaceState';\n            }\n            const route = toRoute(pathname);\n            const { shallow = false } = options;\n            if (is_dynamic_1.isDynamicRoute(route)) {\n                const { pathname: asPathname } = url_1.parse(as);\n                const routeRegex = route_regex_1.getRouteRegex(route);\n                const routeMatch = route_matcher_1.getRouteMatcher(routeRegex)(asPathname);\n                if (!routeMatch) {\n                    const missingParams = Object.keys(routeRegex.groups).filter(param => !query[param]);\n                    if (missingParams.length > 0) {\n                        if (process.env.NODE_ENV !== 'production') {\n                            console.warn(`Mismatching \\`as\\` and \\`href\\` failed to manually provide ` +\n                                `the params: ${missingParams.join(', ')} in the \\`href\\`'s \\`query\\``);\n                        }\n                        return reject(new Error(`The provided \\`as\\` value (${asPathname}) is incompatible with the \\`href\\` value (${route}). ` +\n                            `Read more: https://err.sh/zeit/next.js/incompatible-href-as`));\n                    }\n                }\n                else {\n                    // Merge params into `query`, overwriting any specified in search\n                    Object.assign(query, routeMatch);\n                }\n            }\n            Router.events.emit('routeChangeStart', as);\n            // If shallow is true and the route exists in the router cache we reuse the previous result\n            this.getRouteInfo(route, pathname, query, as, shallow).then(routeInfo => {\n                const { error } = routeInfo;\n                if (error && error.cancelled) {\n                    return resolve(false);\n                }\n                Router.events.emit('beforeHistoryChange', as);\n                this.changeState(method, url, addBasePath(as), options);\n                if (process.env.NODE_ENV !== 'production') {\n                    const appComp = this.components['/_app'].Component;\n                    window.next.isPrerendered =\n                        appComp.getInitialProps === appComp.origGetInitialProps &&\n                            !routeInfo.Component.getInitialProps;\n                }\n                this.set(route, pathname, query, as, routeInfo);\n                if (error) {\n                    Router.events.emit('routeChangeError', error, as);\n                    throw error;\n                }\n                Router.events.emit('routeChangeComplete', as);\n                return resolve(true);\n            }, reject);\n        });\n    }\n    changeState(method, url, as, options = {}) {\n        if (process.env.NODE_ENV !== 'production') {\n            if (typeof window.history === 'undefined') {\n                console.error(`Warning: window.history is not available.`);\n                return;\n            }\n            if (typeof window.history[method] === 'undefined') {\n                console.error(`Warning: window.history.${method} is not available`);\n                return;\n            }\n        }\n        if (method !== 'pushState' || utils_1.getURL() !== as) {\n            window.history[method]({\n                url,\n                as,\n                options,\n            }, \n            // Most browsers currently ignores this parameter, although they may use it in the future.\n            // Passing the empty string here should be safe against future changes to the method.\n            // https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState\n            '', as);\n        }\n    }\n    getRouteInfo(route, pathname, query, as, shallow = false) {\n        const cachedRouteInfo = this.components[route];\n        // If there is a shallow route transition possible\n        // If the route is already rendered on the screen.\n        if (shallow && cachedRouteInfo && this.route === route) {\n            return Promise.resolve(cachedRouteInfo);\n        }\n        return new Promise((resolve, reject) => {\n            if (cachedRouteInfo) {\n                return resolve(cachedRouteInfo);\n            }\n            this.fetchComponent(route).then(Component => resolve({ Component }), reject);\n        })\n            .then((routeInfo) => {\n            const { Component } = routeInfo;\n            if (process.env.NODE_ENV !== 'production') {\n                const { isValidElementType } = require('react-is');\n                if (!isValidElementType(Component)) {\n                    throw new Error(`The default export is not a React Component in page: \"${pathname}\"`);\n                }\n            }\n            return this._getData(() => Component.__N_SSG\n                ? this._getStaticData(as)\n                : Component.__N_SSP\n                    ? this._getServerData(as)\n                    : this.getInitialProps(Component, \n                    // we provide AppTree later so this needs to be `any`\n                    {\n                        pathname,\n                        query,\n                        asPath: as,\n                    })).then(props => {\n                routeInfo.props = props;\n                this.components[route] = routeInfo;\n                return routeInfo;\n            });\n        })\n            .catch(err => {\n            return new Promise(resolve => {\n                if (err.code === 'PAGE_LOAD_ERROR') {\n                    // If we can't load the page it could be one of following reasons\n                    //  1. Page doesn't exists\n                    //  2. Page does exist in a different zone\n                    //  3. Internal error while loading the page\n                    // So, doing a hard reload is the proper way to deal with this.\n                    window.location.href = as;\n                    // Changing the URL doesn't block executing the current code path.\n                    // So, we need to mark it as a cancelled error and stop the routing logic.\n                    err.cancelled = true;\n                    // @ts-ignore TODO: fix the control flow here\n                    return resolve({ error: err });\n                }\n                if (err.cancelled) {\n                    // @ts-ignore TODO: fix the control flow here\n                    return resolve({ error: err });\n                }\n                resolve(this.fetchComponent('/_error').then(Component => {\n                    const routeInfo = { Component, err };\n                    return new Promise(resolve => {\n                        this.getInitialProps(Component, {\n                            err,\n                            pathname,\n                            query,\n                        }).then(props => {\n                            routeInfo.props = props;\n                            routeInfo.error = err;\n                            resolve(routeInfo);\n                        }, gipErr => {\n                            console.error('Error in error page `getInitialProps`: ', gipErr);\n                            routeInfo.error = err;\n                            routeInfo.props = {};\n                            resolve(routeInfo);\n                        });\n                    });\n                }));\n            });\n        });\n    }\n    set(route, pathname, query, as, data) {\n        this.isFallback = false;\n        this.route = route;\n        this.pathname = pathname;\n        this.query = query;\n        this.asPath = as;\n        this.notify(data);\n    }\n    /**\n     * Callback to execute before replacing router state\n     * @param cb callback to be executed\n     */\n    beforePopState(cb) {\n        this._bps = cb;\n    }\n    onlyAHashChange(as) {\n        if (!this.asPath)\n            return false;\n        const [oldUrlNoHash, oldHash] = this.asPath.split('#');\n        const [newUrlNoHash, newHash] = as.split('#');\n        // Makes sure we scroll to the provided hash if the url/hash are the same\n        if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n            return true;\n        }\n        // If the urls are change, there's more than a hash change\n        if (oldUrlNoHash !== newUrlNoHash) {\n            return false;\n        }\n        // If the hash has changed, then it's a hash only change.\n        // This check is necessary to handle both the enter and\n        // leave hash === '' cases. The identity case falls through\n        // and is treated as a next reload.\n        return oldHash !== newHash;\n    }\n    scrollToHash(as) {\n        const [, hash] = as.split('#');\n        // Scroll to top if the hash is just `#` with no value\n        if (hash === '') {\n            window.scrollTo(0, 0);\n            return;\n        }\n        // First we check if the element by id is found\n        const idEl = document.getElementById(hash);\n        if (idEl) {\n            idEl.scrollIntoView();\n            return;\n        }\n        // If there's no element with the id, we check the `name` property\n        // To mirror browsers\n        const nameEl = document.getElementsByName(hash)[0];\n        if (nameEl) {\n            nameEl.scrollIntoView();\n        }\n    }\n    urlIsNew(asPath) {\n        return this.asPath !== asPath;\n    }\n    /**\n     * Prefetch page code, you may wait for the data during page rendering.\n     * This feature only works in production!\n     * @param url the href of prefetched page\n     * @param asPath the as path of the prefetched page\n     */\n    prefetch(url, asPath = url, options = {}) {\n        return new Promise((resolve, reject) => {\n            const { pathname, protocol } = url_1.parse(url);\n            if (!pathname || protocol) {\n                if (process.env.NODE_ENV !== 'production') {\n                    throw new Error(`Invalid href passed to router: ${url} https://err.sh/zeit/next.js/invalid-href-passed`);\n                }\n                return;\n            }\n            // Prefetch is not supported in development mode because it would trigger on-demand-entries\n            if (process.env.NODE_ENV !== 'production') {\n                return;\n            }\n            this.pageLoader[options.priority ? 'loadPage' : 'prefetch'](toRoute(pathname)).then(() => resolve(), reject);\n        });\n    }\n    async fetchComponent(route) {\n        let cancelled = false;\n        const cancel = (this.clc = () => {\n            cancelled = true;\n        });\n        const Component = await this.pageLoader.loadPage(route);\n        if (cancelled) {\n            const error = new Error(`Abort fetching component for route: \"${route}\"`);\n            error.cancelled = true;\n            throw error;\n        }\n        if (cancel === this.clc) {\n            this.clc = null;\n        }\n        return Component;\n    }\n    _getData(fn) {\n        let cancelled = false;\n        const cancel = () => {\n            cancelled = true;\n        };\n        this.clc = cancel;\n        return fn().then(data => {\n            if (cancel === this.clc) {\n                this.clc = null;\n            }\n            if (cancelled) {\n                const err = new Error('Loading initial props cancelled');\n                err.cancelled = true;\n                throw err;\n            }\n            return data;\n        });\n    }\n    getInitialProps(Component, ctx) {\n        const { Component: App } = this.components['/_app'];\n        const AppTree = this._wrapApp(App);\n        ctx.AppTree = AppTree;\n        return utils_1.loadGetInitialProps(App, {\n            AppTree,\n            Component,\n            router: this,\n            ctx,\n        });\n    }\n    abortComponentLoad(as) {\n        if (this.clc) {\n            const e = new Error('Route Cancelled');\n            e.cancelled = true;\n            Router.events.emit('routeChangeError', e, as);\n            this.clc();\n            this.clc = null;\n        }\n    }\n    notify(data) {\n        this.sub(data, this.components['/_app'].Component);\n    }\n}\nexports.default = Router;\nRouter.events = mitt_1.default();\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}