{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n/* eslint-disable no-underscore-dangle */\nimport { Fragment, useEffect, useState, useRef } from 'react';\nimport { groupBy } from 'lodash';\nimport moment from 'moment';\nimport Message from 'components/Chat/Message/Message';\nimport UnreadLabel from 'components/UI/UnreadLabel';\nimport ChatBodyPlaceholder, { ChatBodyEmpty } from './ChatBodyPlaceholder';\nimport * as S from './ChatBody.styled';\nconst ChatBody = ({\n  onThreadOpen,\n  messages,\n  onEdit,\n  loading,\n  unreadCount,\n  scrollMessageId,\n  onReachTopEnd,\n  isFirstMessageReached,\n  onReachBottomEnd,\n  isLastMessageReached,\n  lastReadTime,\n  updateChannelInfo,\n  unreadMessagesNumber,\n  userId\n}) => {\n  const scrollView = useRef(null);\n  const scrollMessage = useRef(null);\n  const {\n    0: isFirstLoad,\n    1: setFirstLoad\n  } = useState(true);\n  const {\n    0: prevChatHeight,\n    1: setPrevChatHeight\n  } = useState(0);\n  const {\n    0: isFetching,\n    1: setFetching\n  } = useState(true);\n  const {\n    0: isUnreadLabelVisible,\n    1: setUnreadLabel\n  } = useState(true);\n  const closeUnreadLabel = () => {\n    setUnreadLabel(false);\n  };\n  const scrollToLastMessage = () => {\n    const chat = scrollView.current && scrollView.current._container;\n    chat.scrollTop = chat.scrollHeight;\n  };\n  const scrollToMessage = messageRef => {\n    if (!messageRef.current) return;\n    scrollView.current._container.scrollTop = messageRef.current.offsetTop - 20;\n  };\n  useEffect(() => {\n    const chat = scrollView.current && scrollView.current._container;\n    if (chat) {\n      const isScrolled = prevChatHeight !== chat.scrollTop + chat.offsetHeight;\n      setPrevChatHeight(chat.scrollHeight);\n      if (!isFirstLoad && !isScrolled || !scrollMessageId && !unreadMessagesNumber) {\n        scrollToLastMessage();\n        setFetching(false);\n      } else {\n        if (!isFirstLoad) return;\n        setTimeout(() => {\n          scrollToMessage(scrollMessage);\n          setFetching(false);\n        }, 200);\n      }\n      setFirstLoad(false);\n    }\n  }, [messages.length]);\n  if (loading) {\n    return __jsx(ChatBodyPlaceholder, null);\n  }\n  if (messages.length === 0) {\n    return __jsx(ChatBodyEmpty, null);\n  }\n  const messagesByDay = groupBy(messages, date => moment(date).startOf('day').format());\n  const handleReachTop = async container => {\n    if (isFetching || isFirstLoad || isFirstMessageReached) return;\n    const prevHeight = container.scrollHeight;\n    setFetching(true);\n    const resultArray = await onReachTopEnd();\n    const afterHeight = container.scrollHeight;\n    const scrollTop = afterHeight - prevHeight;\n    if (scrollTop && resultArray.length) {\n      scrollView.current._container.scrollTop = scrollTop;\n    }\n    setFetching(false);\n  };\n  const handleReachBottom = async container => {\n    if (isFetching || isLastMessageReached) return;\n    const prevHeight = container.scrollTop;\n    setFetching(true);\n    const resultArray = await onReachBottomEnd();\n    if (resultArray.length) {\n      scrollView.current._container.scrollTop = prevHeight;\n    }\n    setFetching(false);\n  };\n  const handleScrollUp = container => {\n    if (container.scrollTop < 400) {\n      handleReachTop(container);\n    }\n  };\n  const handleScrollDown = container => {\n    if (container.scrollHeight - (container.scrollTop + container.offsetHeight) < 400) {\n      handleReachBottom(container);\n    }\n  };\n  return __jsx(React.Fragment, null, __jsx(S.Container, {\n    ref: scrollView,\n    onYReachStart: handleReachTop,\n    onYReachEnd: handleReachBottom,\n    onScrollUp: handleScrollUp,\n    onScrollDown: handleScrollDown,\n    options: {\n      suppressScrollX: true\n    }\n  }, Object.entries(messagesByDay).map(([date, messagesList]) => {\n    return __jsx(Fragment, {\n      key: date\n    }, __jsx(S.Date, {\n      date: date\n    }, __jsx(S.DateText, null, moment(date).format('dddd, MMM Do'))), messagesList.map((message, index, list) => {\n      const isAuthor = userId === message.author.id;\n      const previousMessage = list[index - 1];\n      const nextMessage = list[index + 1];\n      const isChild = previousMessage && previousMessage.author.username === message.author.username;\n      const isNextChild = nextMessage && nextMessage.author.username === message.author.username;\n      const isDirectLink = scrollMessageId === message.id;\n      const isLastReadedMessage = new Date(message.createdAt).getTime() === new Date(lastReadTime).getTime();\n      const isNewMessage = userId && !isAuthor && new Date(lastReadTime).getTime() < new Date(message.createdAt).getTime();\n      return __jsx(Fragment, {\n        key: message.id\n      }, index === list.length - unreadCount && __jsx(S.NewMessage, null, __jsx(S.NewMessageText, null, \"new messages\")), isDirectLink || !scrollMessageId && isLastReadedMessage ? __jsx(Message, {\n        message: message,\n        isChild: isChild,\n        onEdit: onEdit,\n        onThreadOpen: onThreadOpen,\n        unread: isNewMessage,\n        ref: scrollMessage,\n        onEntryInView: updateChannelInfo\n      }) : __jsx(Message, {\n        message: message,\n        isChild: isChild,\n        isFirstMessage: !isChild && isNextChild,\n        onEdit: onEdit,\n        onThreadOpen: onThreadOpen,\n        unread: isNewMessage,\n        onEntryInView: updateChannelInfo\n      }));\n    }));\n  })), !!unreadMessagesNumber && isUnreadLabelVisible && __jsx(UnreadLabel, {\n    unreadMessagesNumber: unreadMessagesNumber,\n    onScroll: scrollToLastMessage,\n    onClose: closeUnreadLabel\n  }));\n};\nexport default ChatBody;","map":{"version":3,"names":["Fragment","useEffect","useState","useRef","groupBy","moment","Message","UnreadLabel","ChatBodyPlaceholder","ChatBodyEmpty","S","ChatBody","onThreadOpen","messages","onEdit","loading","unreadCount","scrollMessageId","onReachTopEnd","isFirstMessageReached","onReachBottomEnd","isLastMessageReached","lastReadTime","updateChannelInfo","unreadMessagesNumber","userId","scrollView","scrollMessage","isFirstLoad","setFirstLoad","prevChatHeight","setPrevChatHeight","isFetching","setFetching","isUnreadLabelVisible","setUnreadLabel","closeUnreadLabel","scrollToLastMessage","chat","current","_container","scrollTop","scrollHeight","scrollToMessage","messageRef","offsetTop","isScrolled","offsetHeight","setTimeout","length","messagesByDay","date","startOf","format","handleReachTop","container","prevHeight","resultArray","afterHeight","handleReachBottom","handleScrollUp","handleScrollDown","suppressScrollX","Object","entries","map","messagesList","message","index","list","isAuthor","author","id","previousMessage","nextMessage","isChild","username","isNextChild","isDirectLink","isLastReadedMessage","Date","createdAt","getTime","isNewMessage"],"sources":["/Volumes/MacData/work/ciscord-frontend.git/components/Chat/Body/ChatBody.js"],"sourcesContent":["/* eslint-disable no-underscore-dangle */\nimport { Fragment, useEffect, useState, useRef } from 'react';\nimport { groupBy } from 'lodash';\nimport moment from 'moment';\nimport Message from 'components/Chat/Message/Message';\nimport UnreadLabel from 'components/UI/UnreadLabel';\nimport ChatBodyPlaceholder, { ChatBodyEmpty } from './ChatBodyPlaceholder';\nimport * as S from './ChatBody.styled';\n\nconst ChatBody = ({\n  onThreadOpen,\n  messages,\n  onEdit,\n  loading,\n  unreadCount,\n  scrollMessageId,\n  onReachTopEnd,\n  isFirstMessageReached,\n  onReachBottomEnd,\n  isLastMessageReached,\n  lastReadTime,\n  updateChannelInfo,\n  unreadMessagesNumber,\n  userId,\n}) => {\n  const scrollView = useRef(null);\n  const scrollMessage = useRef(null);\n  const [isFirstLoad, setFirstLoad] = useState(true);\n  const [prevChatHeight, setPrevChatHeight] = useState(0);\n  const [isFetching, setFetching] = useState(true);\n  const [isUnreadLabelVisible, setUnreadLabel] = useState(true);\n\n  const closeUnreadLabel = () => {\n    setUnreadLabel(false);\n  };\n\n  const scrollToLastMessage = () => {\n    const chat = scrollView.current && scrollView.current._container;\n\n    chat.scrollTop = chat.scrollHeight;\n  };\n\n  const scrollToMessage = messageRef => {\n    if (!messageRef.current) return;\n\n    scrollView.current._container.scrollTop = messageRef.current.offsetTop - 20;\n  };\n\n  useEffect(() => {\n    const chat = scrollView.current && scrollView.current._container;\n\n    if (chat) {\n      const isScrolled = prevChatHeight !== chat.scrollTop + chat.offsetHeight;\n\n      setPrevChatHeight(chat.scrollHeight);\n      if ((!isFirstLoad && !isScrolled) || (!scrollMessageId && !unreadMessagesNumber)) {\n        scrollToLastMessage();\n        setFetching(false);\n      } else {\n        if (!isFirstLoad) return;\n        setTimeout(() => {\n          scrollToMessage(scrollMessage);\n          setFetching(false);\n        }, 200);\n      }\n\n      setFirstLoad(false);\n    }\n  }, [messages.length]);\n\n  if (loading) {\n    return <ChatBodyPlaceholder />;\n  }\n\n  if (messages.length === 0) {\n    return <ChatBodyEmpty />;\n  }\n\n  const messagesByDay = groupBy(messages, date =>\n    moment(date)\n      .startOf('day')\n      .format()\n  );\n\n  const handleReachTop = async container => {\n    if (isFetching || isFirstLoad || isFirstMessageReached) return;\n\n    const prevHeight = container.scrollHeight;\n    setFetching(true);\n    const resultArray = await onReachTopEnd();\n    const afterHeight = container.scrollHeight;\n\n    const scrollTop = afterHeight - prevHeight;\n\n    if (scrollTop && resultArray.length) {\n      scrollView.current._container.scrollTop = scrollTop;\n    }\n    setFetching(false);\n  };\n\n  const handleReachBottom = async container => {\n    if (isFetching || isLastMessageReached) return;\n\n    const prevHeight = container.scrollTop;\n    setFetching(true);\n    const resultArray = await onReachBottomEnd();\n\n    if (resultArray.length) {\n      scrollView.current._container.scrollTop = prevHeight;\n    }\n\n    setFetching(false);\n  };\n\n  const handleScrollUp = container => {\n    if (container.scrollTop < 400) {\n      handleReachTop(container);\n    }\n  };\n\n  const handleScrollDown = container => {\n    if (container.scrollHeight - (container.scrollTop + container.offsetHeight) < 400) {\n      handleReachBottom(container);\n    }\n  };\n  return (\n    <>\n      <S.Container\n        ref={scrollView}\n        onYReachStart={handleReachTop}\n        onYReachEnd={handleReachBottom}\n        onScrollUp={handleScrollUp}\n        onScrollDown={handleScrollDown}\n        options={{\n          suppressScrollX: true,\n        }}\n      >\n        {Object.entries(messagesByDay).map(([date, messagesList]) => {\n          return (\n            <Fragment key={date}>\n              <S.Date date={date}>\n                <S.DateText>{moment(date).format('dddd, MMM Do')}</S.DateText>\n              </S.Date>\n              {messagesList.map((message, index, list) => {\n                const isAuthor = userId === message.author.id;\n                const previousMessage = list[index - 1];\n                const nextMessage = list[index + 1];\n\n                const isChild =\n                  previousMessage && previousMessage.author.username === message.author.username;\n\n                const isNextChild =\n                  nextMessage && nextMessage.author.username === message.author.username;\n\n                const isDirectLink = scrollMessageId === message.id;\n                const isLastReadedMessage =\n                  new Date(message.createdAt).getTime() === new Date(lastReadTime).getTime();\n                const isNewMessage =\n                  userId &&\n                  !isAuthor &&\n                  new Date(lastReadTime).getTime() < new Date(message.createdAt).getTime();\n\n                return (\n                  <Fragment key={message.id}>\n                    {index === list.length - unreadCount && (\n                      <S.NewMessage>\n                        <S.NewMessageText>new messages</S.NewMessageText>\n                      </S.NewMessage>\n                    )}\n                    {isDirectLink || (!scrollMessageId && isLastReadedMessage) ? (\n                      <Message\n                        message={message}\n                        isChild={isChild}\n                        onEdit={onEdit}\n                        onThreadOpen={onThreadOpen}\n                        unread={isNewMessage}\n                        ref={scrollMessage}\n                        onEntryInView={updateChannelInfo}\n                      />\n                    ) : (\n                      <Message\n                        message={message}\n                        isChild={isChild}\n                        isFirstMessage={!isChild && isNextChild}\n                        onEdit={onEdit}\n                        onThreadOpen={onThreadOpen}\n                        unread={isNewMessage}\n                        onEntryInView={updateChannelInfo}\n                      />\n                    )}\n                  </Fragment>\n                );\n              })}\n            </Fragment>\n          );\n        })}\n      </S.Container>\n      {!!unreadMessagesNumber && isUnreadLabelVisible && (\n        <UnreadLabel\n          unreadMessagesNumber={unreadMessagesNumber}\n          onScroll={scrollToLastMessage}\n          onClose={closeUnreadLabel}\n        />\n      )}\n      {/*\n       */}\n    </>\n  );\n};\n\nexport default ChatBody;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}