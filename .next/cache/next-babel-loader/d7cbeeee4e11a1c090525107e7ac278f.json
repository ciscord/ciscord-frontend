{"ast":null,"code":"import _Object$setPrototypeOf from \"@babel/runtime-corejs2/core-js/object/set-prototype-of\";\nimport _Object$getPrototypeOf from \"@babel/runtime-corejs2/core-js/object/get-prototype-of\";\nimport _Object$create from \"@babel/runtime-corejs2/core-js/object/create\";\nimport _Symbol from \"@babel/runtime-corejs2/core-js/symbol\";\nimport _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _Object$entries from \"@babel/runtime-corejs2/core-js/object/entries\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nvar _this = this,\n  _jsxFileName = \"/Volumes/MacData/work/ciscord-frontend.git/components/Chat/Body/ChatBody.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = _Object$defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof _Symbol ? _Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return _Object$defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = _Object$create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = _Object$getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = _Object$create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return _Object$setPrototypeOf ? _Object$setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = _Object$create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = _Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, \"catch\": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n/* eslint-disable no-underscore-dangle */\nimport { Fragment, useEffect, useState, useRef } from 'react';\nimport { groupBy } from 'lodash';\nimport moment from 'moment';\nimport Message from 'components/Chat/Message/Message';\nimport UnreadLabel from 'components/UI/UnreadLabel';\nimport ChatBodyPlaceholder, { ChatBodyEmpty } from './ChatBodyPlaceholder';\nimport * as S from './ChatBody.styled';\nvar ChatBody = function ChatBody(_ref) {\n  var onThreadOpen = _ref.onThreadOpen,\n    messages = _ref.messages,\n    onEdit = _ref.onEdit,\n    loading = _ref.loading,\n    unreadCount = _ref.unreadCount,\n    scrollMessageId = _ref.scrollMessageId,\n    onReachTopEnd = _ref.onReachTopEnd,\n    isFirstMessageReached = _ref.isFirstMessageReached,\n    onReachBottomEnd = _ref.onReachBottomEnd,\n    isLastMessageReached = _ref.isLastMessageReached,\n    lastReadTime = _ref.lastReadTime,\n    updateChannelInfo = _ref.updateChannelInfo,\n    unreadMessagesNumber = _ref.unreadMessagesNumber,\n    userId = _ref.userId;\n  var scrollView = useRef(null);\n  var scrollMessage = useRef(null);\n  var _useState = useState(true),\n    isFirstLoad = _useState[0],\n    setFirstLoad = _useState[1];\n  var _useState2 = useState(0),\n    prevChatHeight = _useState2[0],\n    setPrevChatHeight = _useState2[1];\n  var _useState3 = useState(true),\n    isFetching = _useState3[0],\n    setFetching = _useState3[1];\n  var _useState4 = useState(true),\n    isUnreadLabelVisible = _useState4[0],\n    setUnreadLabel = _useState4[1];\n  var closeUnreadLabel = function closeUnreadLabel() {\n    setUnreadLabel(false);\n  };\n  var scrollToLastMessage = function scrollToLastMessage() {\n    var chat = scrollView.current && scrollView.current._container;\n    chat.scrollTop = chat.scrollHeight;\n  };\n  var scrollToMessage = function scrollToMessage(messageRef) {\n    if (!messageRef.current) return;\n    scrollView.current._container.scrollTop = messageRef.current.offsetTop - 20;\n  };\n  useEffect(function () {\n    var chat = scrollView.current && scrollView.current._container;\n    if (chat) {\n      var isScrolled = prevChatHeight !== chat.scrollTop + chat.offsetHeight;\n      setPrevChatHeight(chat.scrollHeight);\n      if (!isFirstLoad && !isScrolled || !scrollMessageId && !unreadMessagesNumber) {\n        scrollToLastMessage();\n        setFetching(false);\n      } else {\n        if (!isFirstLoad) return;\n        setTimeout(function () {\n          scrollToMessage(scrollMessage);\n          setFetching(false);\n        }, 200);\n      }\n      setFirstLoad(false);\n    }\n  }, [messages.length]);\n  if (loading) {\n    return __jsx(ChatBodyPlaceholder, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 12\n      }\n    });\n  }\n  if (messages.length === 0) {\n    return __jsx(ChatBodyEmpty, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 12\n      }\n    });\n  }\n  var messagesByDay = groupBy(messages, function (date) {\n    return moment(date).startOf('day').format();\n  });\n  var handleReachTop = function handleReachTop(container) {\n    var prevHeight, resultArray, afterHeight, scrollTop;\n    return _regeneratorRuntime().async(function handleReachTop$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (!(isFetching || isFirstLoad || isFirstMessageReached)) {\n            _context.next = 2;\n            break;\n          }\n          return _context.abrupt(\"return\");\n        case 2:\n          prevHeight = container.scrollHeight;\n          setFetching(true);\n          _context.next = 6;\n          return _regeneratorRuntime().awrap(onReachTopEnd());\n        case 6:\n          resultArray = _context.sent;\n          afterHeight = container.scrollHeight;\n          scrollTop = afterHeight - prevHeight;\n          if (scrollTop && resultArray.length) {\n            scrollView.current._container.scrollTop = scrollTop;\n          }\n          setFetching(false);\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }, null, null, null, _Promise);\n  };\n  var handleReachBottom = function handleReachBottom(container) {\n    var prevHeight, resultArray;\n    return _regeneratorRuntime().async(function handleReachBottom$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!(isFetching || isLastMessageReached)) {\n            _context2.next = 2;\n            break;\n          }\n          return _context2.abrupt(\"return\");\n        case 2:\n          prevHeight = container.scrollTop;\n          setFetching(true);\n          _context2.next = 6;\n          return _regeneratorRuntime().awrap(onReachBottomEnd());\n        case 6:\n          resultArray = _context2.sent;\n          if (resultArray.length) {\n            scrollView.current._container.scrollTop = prevHeight;\n          }\n          setFetching(false);\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, null, null, null, _Promise);\n  };\n  var handleScrollUp = function handleScrollUp(container) {\n    if (container.scrollTop < 400) {\n      handleReachTop(container);\n    }\n  };\n  var handleScrollDown = function handleScrollDown(container) {\n    if (container.scrollHeight - (container.scrollTop + container.offsetHeight) < 400) {\n      handleReachBottom(container);\n    }\n  };\n  return __jsx(React.Fragment, null, __jsx(S.Container, {\n    ref: scrollView,\n    onYReachStart: handleReachTop,\n    onYReachEnd: handleReachBottom,\n    onScrollUp: handleScrollUp,\n    onScrollDown: handleScrollDown,\n    options: {\n      suppressScrollX: true\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, _Object$entries(messagesByDay).map(function (_ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n      date = _ref3[0],\n      messagesList = _ref3[1];\n    return __jsx(Fragment, {\n      key: date,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 13\n      }\n    }, __jsx(S.Date, {\n      date: date,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 15\n      }\n    }, __jsx(S.DateText, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }\n    }, moment(date).format('dddd, MMM Do'))), messagesList.map(function (message, index, list) {\n      var isAuthor = userId === message.author.id;\n      var previousMessage = list[index - 1];\n      var nextMessage = list[index + 1];\n      var isChild = previousMessage && previousMessage.author.username === message.author.username;\n      var isNextChild = nextMessage && nextMessage.author.username === message.author.username;\n      var isDirectLink = scrollMessageId === message.id;\n      var isLastReadedMessage = new Date(message.createdAt).getTime() === new Date(lastReadTime).getTime();\n      var isNewMessage = userId && !isAuthor && new Date(lastReadTime).getTime() < new Date(message.createdAt).getTime();\n      return __jsx(Fragment, {\n        key: message.id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 19\n        }\n      }, index === list.length - unreadCount && __jsx(S.NewMessage, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 23\n        }\n      }, __jsx(S.NewMessageText, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 25\n        }\n      }, \"new messages\")), isDirectLink || !scrollMessageId && isLastReadedMessage ? __jsx(Message, {\n        message: message,\n        isChild: isChild,\n        onEdit: onEdit,\n        onThreadOpen: onThreadOpen,\n        unread: isNewMessage,\n        ref: scrollMessage,\n        onEntryInView: updateChannelInfo,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 23\n        }\n      }) : __jsx(Message, {\n        message: message,\n        isChild: isChild,\n        isFirstMessage: !isChild && isNextChild,\n        onEdit: onEdit,\n        onThreadOpen: onThreadOpen,\n        unread: isNewMessage,\n        onEntryInView: updateChannelInfo,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 23\n        }\n      }));\n    }));\n  })), !!unreadMessagesNumber && isUnreadLabelVisible && __jsx(UnreadLabel, {\n    unreadMessagesNumber: unreadMessagesNumber,\n    onScroll: scrollToLastMessage,\n    onClose: closeUnreadLabel,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 9\n    }\n  }));\n};\nexport default ChatBody;","map":{"version":3,"names":["Fragment","useEffect","useState","useRef","groupBy","moment","Message","UnreadLabel","ChatBodyPlaceholder","ChatBodyEmpty","S","ChatBody","onThreadOpen","messages","onEdit","loading","unreadCount","scrollMessageId","onReachTopEnd","isFirstMessageReached","onReachBottomEnd","isLastMessageReached","lastReadTime","updateChannelInfo","unreadMessagesNumber","userId","scrollView","scrollMessage","isFirstLoad","setFirstLoad","prevChatHeight","setPrevChatHeight","isFetching","setFetching","isUnreadLabelVisible","setUnreadLabel","closeUnreadLabel","scrollToLastMessage","chat","current","_container","scrollTop","scrollHeight","scrollToMessage","messageRef","offsetTop","isScrolled","offsetHeight","setTimeout","length","messagesByDay","date","startOf","format","handleReachTop","container","prevHeight","resultArray","afterHeight","handleReachBottom","handleScrollUp","handleScrollDown","suppressScrollX","map","messagesList","message","index","list","isAuthor","author","id","previousMessage","nextMessage","isChild","username","isNextChild","isDirectLink","isLastReadedMessage","Date","createdAt","getTime","isNewMessage"],"sources":["/Volumes/MacData/work/ciscord-frontend.git/components/Chat/Body/ChatBody.js"],"sourcesContent":["/* eslint-disable no-underscore-dangle */\nimport { Fragment, useEffect, useState, useRef } from 'react';\nimport { groupBy } from 'lodash';\nimport moment from 'moment';\nimport Message from 'components/Chat/Message/Message';\nimport UnreadLabel from 'components/UI/UnreadLabel';\nimport ChatBodyPlaceholder, { ChatBodyEmpty } from './ChatBodyPlaceholder';\nimport * as S from './ChatBody.styled';\n\nconst ChatBody = ({\n  onThreadOpen,\n  messages,\n  onEdit,\n  loading,\n  unreadCount,\n  scrollMessageId,\n  onReachTopEnd,\n  isFirstMessageReached,\n  onReachBottomEnd,\n  isLastMessageReached,\n  lastReadTime,\n  updateChannelInfo,\n  unreadMessagesNumber,\n  userId,\n}) => {\n  const scrollView = useRef(null);\n  const scrollMessage = useRef(null);\n  const [isFirstLoad, setFirstLoad] = useState(true);\n  const [prevChatHeight, setPrevChatHeight] = useState(0);\n  const [isFetching, setFetching] = useState(true);\n  const [isUnreadLabelVisible, setUnreadLabel] = useState(true);\n\n  const closeUnreadLabel = () => {\n    setUnreadLabel(false);\n  };\n\n  const scrollToLastMessage = () => {\n    const chat = scrollView.current && scrollView.current._container;\n\n    chat.scrollTop = chat.scrollHeight;\n  };\n\n  const scrollToMessage = messageRef => {\n    if (!messageRef.current) return;\n\n    scrollView.current._container.scrollTop = messageRef.current.offsetTop - 20;\n  };\n\n  useEffect(() => {\n    const chat = scrollView.current && scrollView.current._container;\n\n    if (chat) {\n      const isScrolled = prevChatHeight !== chat.scrollTop + chat.offsetHeight;\n\n      setPrevChatHeight(chat.scrollHeight);\n      if ((!isFirstLoad && !isScrolled) || (!scrollMessageId && !unreadMessagesNumber)) {\n        scrollToLastMessage();\n        setFetching(false);\n      } else {\n        if (!isFirstLoad) return;\n        setTimeout(() => {\n          scrollToMessage(scrollMessage);\n          setFetching(false);\n        }, 200);\n      }\n\n      setFirstLoad(false);\n    }\n  }, [messages.length]);\n\n  if (loading) {\n    return <ChatBodyPlaceholder />;\n  }\n\n  if (messages.length === 0) {\n    return <ChatBodyEmpty />;\n  }\n\n  const messagesByDay = groupBy(messages, date =>\n    moment(date)\n      .startOf('day')\n      .format()\n  );\n\n  const handleReachTop = async container => {\n    if (isFetching || isFirstLoad || isFirstMessageReached) return;\n\n    const prevHeight = container.scrollHeight;\n    setFetching(true);\n    const resultArray = await onReachTopEnd();\n    const afterHeight = container.scrollHeight;\n\n    const scrollTop = afterHeight - prevHeight;\n\n    if (scrollTop && resultArray.length) {\n      scrollView.current._container.scrollTop = scrollTop;\n    }\n    setFetching(false);\n  };\n\n  const handleReachBottom = async container => {\n    if (isFetching || isLastMessageReached) return;\n\n    const prevHeight = container.scrollTop;\n    setFetching(true);\n    const resultArray = await onReachBottomEnd();\n\n    if (resultArray.length) {\n      scrollView.current._container.scrollTop = prevHeight;\n    }\n\n    setFetching(false);\n  };\n\n  const handleScrollUp = container => {\n    if (container.scrollTop < 400) {\n      handleReachTop(container);\n    }\n  };\n\n  const handleScrollDown = container => {\n    if (container.scrollHeight - (container.scrollTop + container.offsetHeight) < 400) {\n      handleReachBottom(container);\n    }\n  };\n  return (\n    <>\n      <S.Container\n        ref={scrollView}\n        onYReachStart={handleReachTop}\n        onYReachEnd={handleReachBottom}\n        onScrollUp={handleScrollUp}\n        onScrollDown={handleScrollDown}\n        options={{\n          suppressScrollX: true,\n        }}\n      >\n        {Object.entries(messagesByDay).map(([date, messagesList]) => {\n          return (\n            <Fragment key={date}>\n              <S.Date date={date}>\n                <S.DateText>{moment(date).format('dddd, MMM Do')}</S.DateText>\n              </S.Date>\n              {messagesList.map((message, index, list) => {\n                const isAuthor = userId === message.author.id;\n                const previousMessage = list[index - 1];\n                const nextMessage = list[index + 1];\n\n                const isChild =\n                  previousMessage && previousMessage.author.username === message.author.username;\n\n                const isNextChild =\n                  nextMessage && nextMessage.author.username === message.author.username;\n\n                const isDirectLink = scrollMessageId === message.id;\n                const isLastReadedMessage =\n                  new Date(message.createdAt).getTime() === new Date(lastReadTime).getTime();\n                const isNewMessage =\n                  userId &&\n                  !isAuthor &&\n                  new Date(lastReadTime).getTime() < new Date(message.createdAt).getTime();\n\n                return (\n                  <Fragment key={message.id}>\n                    {index === list.length - unreadCount && (\n                      <S.NewMessage>\n                        <S.NewMessageText>new messages</S.NewMessageText>\n                      </S.NewMessage>\n                    )}\n                    {isDirectLink || (!scrollMessageId && isLastReadedMessage) ? (\n                      <Message\n                        message={message}\n                        isChild={isChild}\n                        onEdit={onEdit}\n                        onThreadOpen={onThreadOpen}\n                        unread={isNewMessage}\n                        ref={scrollMessage}\n                        onEntryInView={updateChannelInfo}\n                      />\n                    ) : (\n                      <Message\n                        message={message}\n                        isChild={isChild}\n                        isFirstMessage={!isChild && isNextChild}\n                        onEdit={onEdit}\n                        onThreadOpen={onThreadOpen}\n                        unread={isNewMessage}\n                        onEntryInView={updateChannelInfo}\n                      />\n                    )}\n                  </Fragment>\n                );\n              })}\n            </Fragment>\n          );\n        })}\n      </S.Container>\n      {!!unreadMessagesNumber && isUnreadLabelVisible && (\n        <UnreadLabel\n          unreadMessagesNumber={unreadMessagesNumber}\n          onScroll={scrollToLastMessage}\n          onClose={closeUnreadLabel}\n        />\n      )}\n      {/*\n       */}\n    </>\n  );\n};\n\nexport default ChatBody;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}