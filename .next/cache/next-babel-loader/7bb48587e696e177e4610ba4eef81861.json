{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useRef, useState, createContext, useContext, useEffect } from 'react';\nimport { useLazyQuery, useMutation } from '@apollo/client';\nimport Router from 'next/router';\nimport { COMPANY_NAME } from 'utils/config';\nimport { LOGOUT_USER, GET_ME } from 'apis/User';\nimport { DELETE_MESSAGE, DELETE_REPLY_MESSAGE } from 'apis/Message';\nimport { AppContext } from './AppContext';\nconst UserContext = createContext();\nconst UserProvider = ({\n  children\n}) => {\n  const {\n    0: user,\n    1: setUser\n  } = useState(null);\n  const {\n    0: messageQueue,\n    1: setMessageQueue\n  } = useState([]);\n  const messageQueueRef = useRef(messageQueue);\n  messageQueueRef.current = messageQueue;\n  const [logoutUser] = useMutation(LOGOUT_USER);\n  const [fetchMe, {\n    data: {\n      me,\n      loading\n    } = {}\n  }] = useLazyQuery(GET_ME, {\n    fetchPolicy: 'network-only',\n    onCompleted: () => {\n      sessionStorage.setItem('tenant', COMPANY_NAME());\n      setUser(me);\n      Router.push(`/[company]/[community]/[channel]`, `/${COMPANY_NAME()}/general/general`, {\n        shallow: true\n      });\n    }\n  });\n  const {\n    userLoaded,\n    setUserLoaded\n  } = useContext(AppContext);\n  const [deleteMessageMutation] = useMutation(DELETE_MESSAGE);\n  const [deleteReplyMessage] = useMutation(DELETE_REPLY_MESSAGE);\n  const [fetchOnly, {\n    data: {\n      me: me1\n    } = {}\n  }] = useLazyQuery(GET_ME, {\n    fetchPolicy: 'network-only',\n    onCompleted: () => {\n      sessionStorage.setItem('tenant', COMPANY_NAME());\n      setUser(me1);\n      if (!userLoaded) {\n        setUserLoaded(true);\n      }\n    }\n  });\n  const logout = async () => {\n    try {\n      await logoutUser({});\n    } catch (error) {\n      alert(error);\n    }\n    sessionStorage.removeItem('token');\n    setUser(null);\n    if (window) {\n      window.sessionStorage.setItem('logout', Date.now());\n      sessionStorage.removeItem('user');\n    }\n  };\n  const signin = token => {\n    sessionStorage.setItem('token', token);\n    fetchMe();\n  };\n  const getMe = () => {\n    fetchOnly();\n  };\n  useEffect(() => {\n    if (!user) {\n      getMe();\n    }\n  }, []);\n  useEffect(() => {\n    if (user === null) {\n      const localState = JSON.parse(sessionStorage.getItem('user'));\n      if (localState) {\n        setUser(localState);\n      }\n    } else if (sessionStorage.getItem('tenant') !== COMPANY_NAME()) {\n      logout();\n    } else {\n      sessionStorage.setItem('user', JSON.stringify(user));\n    }\n  }, [user]);\n  useEffect(() => {\n    if (messageQueue.length > 0) {\n      setTimeout(deleteMessage, 5000);\n    }\n  }, [messageQueue]);\n  const addMessageQueue = messageId => {\n    if (messageQueueRef.current.indexOf(messageId) === -1) {\n      setMessageQueue([...messageQueueRef.current, messageId]);\n    }\n  };\n  const removeMessageQueue = messageId => {\n    const data = messageQueueRef.current.filter(e => e !== messageId);\n    setMessageQueue(data);\n  };\n  const deleteMessage = () => {\n    const messageId = messageQueueRef.current.shift();\n    if (messageId) {\n      setMessageQueue(messageQueueRef.current);\n      deleteMessageMutation({\n        variables: {\n          messageId\n        }\n      });\n      deleteReplyMessage({\n        variables: {\n          messageId\n        }\n      });\n    }\n  };\n  const getMessageQueue = () => {\n    return messageQueueRef.current;\n  };\n  return __jsx(UserContext.Provider, {\n    value: {\n      isLogged: !!user,\n      user,\n      setUser,\n      getMe,\n      signin,\n      logout,\n      loading,\n      addMessageQueue,\n      removeMessageQueue,\n      getMessageQueue\n    }\n  }, children);\n};\nexport { UserProvider as default, UserContext };","map":{"version":3,"names":["useRef","useState","createContext","useContext","useEffect","useLazyQuery","useMutation","Router","COMPANY_NAME","LOGOUT_USER","GET_ME","DELETE_MESSAGE","DELETE_REPLY_MESSAGE","AppContext","UserContext","UserProvider","children","user","setUser","messageQueue","setMessageQueue","messageQueueRef","current","logoutUser","fetchMe","data","me","loading","fetchPolicy","onCompleted","sessionStorage","setItem","push","shallow","userLoaded","setUserLoaded","deleteMessageMutation","deleteReplyMessage","fetchOnly","me1","logout","error","alert","removeItem","window","Date","now","signin","token","getMe","localState","JSON","parse","getItem","stringify","length","setTimeout","deleteMessage","addMessageQueue","messageId","indexOf","removeMessageQueue","filter","e","shift","variables","getMessageQueue","isLogged","default"],"sources":["/Volumes/MacData/work/ciscord-frontend.git/context/UserContext.js"],"sourcesContent":["import { useRef, useState, createContext, useContext, useEffect } from 'react';\nimport { useLazyQuery, useMutation } from '@apollo/client';\nimport Router from 'next/router';\nimport { COMPANY_NAME } from 'utils/config';\nimport { LOGOUT_USER, GET_ME } from 'apis/User';\nimport { DELETE_MESSAGE, DELETE_REPLY_MESSAGE } from 'apis/Message';\nimport { AppContext } from './AppContext';\n\nconst UserContext = createContext();\n\nconst UserProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [messageQueue, setMessageQueue] = useState([]);\n  const messageQueueRef = useRef(messageQueue);\n  messageQueueRef.current = messageQueue;\n\n  const [logoutUser] = useMutation(LOGOUT_USER);\n  const [fetchMe, { data: { me, loading } = {} }] = useLazyQuery(GET_ME, {\n    fetchPolicy: 'network-only',\n    onCompleted: () => {\n      sessionStorage.setItem('tenant', COMPANY_NAME());\n      setUser(me);\n      Router.push(`/[company]/[community]/[channel]`, `/${COMPANY_NAME()}/general/general`, {\n        shallow: true,\n      });\n    },\n  });\n\n  const { userLoaded, setUserLoaded } = useContext(AppContext);\n  const [deleteMessageMutation] = useMutation(DELETE_MESSAGE);\n  const [deleteReplyMessage] = useMutation(DELETE_REPLY_MESSAGE);\n\n  const [fetchOnly, { data: { me: me1 } = {} }] = useLazyQuery(GET_ME, {\n    fetchPolicy: 'network-only',\n    onCompleted: () => {\n      sessionStorage.setItem('tenant', COMPANY_NAME());\n      setUser(me1);\n      if (!userLoaded) {\n        setUserLoaded(true);\n      }\n    },\n  });\n\n  const logout = async () => {\n    try {\n      await logoutUser({});\n    } catch (error) {\n      alert(error);\n    }\n\n    sessionStorage.removeItem('token');\n    setUser(null);\n    if (window) {\n      window.sessionStorage.setItem('logout', Date.now());\n      sessionStorage.removeItem('user');\n    }\n  };\n\n  const signin = token => {\n    sessionStorage.setItem('token', token);\n    fetchMe();\n  };\n\n  const getMe = () => {\n    fetchOnly();\n  };\n\n  useEffect(() => {\n    if (!user) {\n      getMe();\n    }\n  }, []);\n\n  useEffect(() => {\n    if (user === null) {\n      const localState = JSON.parse(sessionStorage.getItem('user'));\n      if (localState) {\n        setUser(localState);\n      }\n    } else if (sessionStorage.getItem('tenant') !== COMPANY_NAME()) {\n      logout();\n    } else {\n      sessionStorage.setItem('user', JSON.stringify(user));\n    }\n  }, [user]);\n\n  useEffect(() => {\n    if (messageQueue.length > 0) {\n      setTimeout(deleteMessage, 5000);\n    }\n  }, [messageQueue]);\n\n  const addMessageQueue = messageId => {\n    if (messageQueueRef.current.indexOf(messageId) === -1) {\n      setMessageQueue([...messageQueueRef.current, messageId]);\n    }\n  };\n\n  const removeMessageQueue = messageId => {\n    const data = messageQueueRef.current.filter(e => e !== messageId);\n\n    setMessageQueue(data);\n  };\n\n  const deleteMessage = () => {\n    const messageId = messageQueueRef.current.shift();\n    if (messageId) {\n      setMessageQueue(messageQueueRef.current);\n      deleteMessageMutation({ variables: { messageId } });\n      deleteReplyMessage({\n        variables: {\n          messageId,\n        },\n      });\n    }\n  };\n\n  const getMessageQueue = () => {\n    return messageQueueRef.current;\n  };\n  return (\n    <UserContext.Provider\n      value={{\n        isLogged: !!user,\n        user,\n        setUser,\n        getMe,\n        signin,\n        logout,\n        loading,\n        addMessageQueue,\n        removeMessageQueue,\n        getMessageQueue,\n      }}\n    >\n      {children}\n    </UserContext.Provider>\n  );\n};\n\nexport { UserProvider as default, UserContext };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}