{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nfunction getRouteRegex(normalizedRoute) {\n  // Escape all characters that could be considered RegEx\n  const escapedRoute = (normalizedRoute.replace(/\\/$/, '') || '/').replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&');\n  const groups = {};\n  let groupIndex = 1;\n  const parameterizedRoute = escapedRoute.replace(/\\/\\\\\\[([^/]+?)\\\\\\](?=\\/|$)/g, (_, $1) => {\n    const isCatchAll = /^(\\\\\\.){3}/.test($1);\n    groups[$1\n    // Un-escape key\n    .replace(/\\\\([|\\\\{}()[\\]^$+*?.-])/g, '$1').replace(/^\\.{3}/, '')\n    // eslint-disable-next-line no-sequences\n    ] = {\n      pos: groupIndex++,\n      repeat: isCatchAll\n    };\n    return isCatchAll ? '/(.+?)' : '/([^/]+?)';\n  });\n  return {\n    re: new RegExp('^' + parameterizedRoute + '(?:/)?$', 'i'),\n    groups\n  };\n}\nexports.getRouteRegex = getRouteRegex;","map":{"version":3,"names":["Object","defineProperty","exports","value","getRouteRegex","normalizedRoute","escapedRoute","replace","groups","groupIndex","parameterizedRoute","_","$1","isCatchAll","test","pos","repeat","re","RegExp"],"sources":["/Volumes/MacData/work/ciscord-frontend.git/node_modules/next/dist/next-server/lib/router/utils/route-regex.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction getRouteRegex(normalizedRoute) {\n    // Escape all characters that could be considered RegEx\n    const escapedRoute = (normalizedRoute.replace(/\\/$/, '') || '/').replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&');\n    const groups = {};\n    let groupIndex = 1;\n    const parameterizedRoute = escapedRoute.replace(/\\/\\\\\\[([^/]+?)\\\\\\](?=\\/|$)/g, (_, $1) => {\n        const isCatchAll = /^(\\\\\\.){3}/.test($1);\n        groups[$1\n            // Un-escape key\n            .replace(/\\\\([|\\\\{}()[\\]^$+*?.-])/g, '$1')\n            .replace(/^\\.{3}/, '')\n        // eslint-disable-next-line no-sequences\n        ] = { pos: groupIndex++, repeat: isCatchAll };\n        return isCatchAll ? '/(.+?)' : '/([^/]+?)';\n    });\n    return {\n        re: new RegExp('^' + parameterizedRoute + '(?:/)?$', 'i'),\n        groups,\n    };\n}\nexports.getRouteRegex = getRouteRegex;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,SAASC,aAAa,CAACC,eAAe,EAAE;EACpC;EACA,MAAMC,YAAY,GAAG,CAACD,eAAe,CAACE,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,GAAG,EAAEA,OAAO,CAAC,sBAAsB,EAAE,MAAM,CAAC;EACxG,MAAMC,MAAM,GAAG,CAAC,CAAC;EACjB,IAAIC,UAAU,GAAG,CAAC;EAClB,MAAMC,kBAAkB,GAAGJ,YAAY,CAACC,OAAO,CAAC,6BAA6B,EAAE,CAACI,CAAC,EAAEC,EAAE,KAAK;IACtF,MAAMC,UAAU,GAAG,YAAY,CAACC,IAAI,CAACF,EAAE,CAAC;IACxCJ,MAAM,CAACI;IACH;IAAA,CACCL,OAAO,CAAC,0BAA0B,EAAE,IAAI,CAAC,CACzCA,OAAO,CAAC,QAAQ,EAAE,EAAE;IACzB;IAAA,CACC,GAAG;MAAEQ,GAAG,EAAEN,UAAU,EAAE;MAAEO,MAAM,EAAEH;IAAW,CAAC;IAC7C,OAAOA,UAAU,GAAG,QAAQ,GAAG,WAAW;EAC9C,CAAC,CAAC;EACF,OAAO;IACHI,EAAE,EAAE,IAAIC,MAAM,CAAC,GAAG,GAAGR,kBAAkB,GAAG,SAAS,EAAE,GAAG,CAAC;IACzDF;EACJ,CAAC;AACL;AACAN,OAAO,CAACE,aAAa,GAAGA,aAAa"},"metadata":{},"sourceType":"script"}