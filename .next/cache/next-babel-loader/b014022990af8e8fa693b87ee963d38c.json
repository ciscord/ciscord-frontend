{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useRouter } from 'next/router';\nimport { useState, useContext } from 'react';\nimport { UserContext } from 'context/UserContext';\nimport { useEscapeToClose, useKeyboardShortcut } from 'hooks';\nimport { COMPANY_NAME } from 'utils/config';\nimport { canManageCommunity } from 'utils/permission';\nimport { PlusIcon } from 'components/UI/Icons';\nimport Search from './Search';\nimport CommunitiesList from './CommunitiesList';\nimport * as S from './CommunitiesPage.styled';\nvar CommunitiesPage = function CommunitiesPage() {\n  var _useState = useState(''),\n    searchString = _useState[0],\n    setSearchString = _useState[1];\n  var _useState2 = useState(false),\n    isSearch = _useState2[0],\n    setSearch = _useState2[1];\n  var _useContext = useContext(UserContext),\n    user = _useContext.user;\n  var router = useRouter();\n  var canCreateCommunity = user && canManageCommunity(user);\n  var toCreateCommunity = function toCreateCommunity() {\n    return router.push(\"/[company]/communities/new\", \"/\".concat(COMPANY_NAME(), \"/communities/new\"), {\n      shallow: true\n    });\n  };\n\n  // Search state is here because of this logic:\n  useEscapeToClose(function () {\n    if (isSearch) {\n      setSearch(false);\n      setSearchString('');\n    } else {\n      router.back();\n    }\n  });\n  useKeyboardShortcut({\n    N: function N() {\n      return router.push(\"/[company]/communities/new\", \"/\".concat(COMPANY_NAME(), \"/communities/new\"), {\n        shallow: true\n      });\n    }\n  });\n  return __jsx(S.Container, null, __jsx(S.CommunitiesWrapper, null, __jsx(S.Header, null, __jsx(S.Heading, null, \"Communities\"), __jsx(S.Actions, null, __jsx(Search, {\n    isSearch: isSearch,\n    setSearch: setSearch,\n    searchString: searchString,\n    setSearchString: setSearchString\n  }), canCreateCommunity && __jsx(S.PlusIconWrapper, {\n    onClick: toCreateCommunity\n  }, __jsx(PlusIcon, null)))), __jsx(CommunitiesList, {\n    searchString: searchString\n  })));\n};\nexport default CommunitiesPage;","map":{"version":3,"names":["useRouter","useState","useContext","UserContext","useEscapeToClose","useKeyboardShortcut","COMPANY_NAME","canManageCommunity","PlusIcon","Search","CommunitiesList","S","CommunitiesPage","searchString","setSearchString","isSearch","setSearch","user","router","canCreateCommunity","toCreateCommunity","push","shallow","back","N"],"sources":["/Volumes/MacData/work/ciscord-frontend.git/components/Communities/CommunitiesPage.js"],"sourcesContent":["import { useRouter } from 'next/router';\nimport { useState, useContext } from 'react';\nimport { UserContext } from 'context/UserContext';\nimport { useEscapeToClose, useKeyboardShortcut } from 'hooks';\n\nimport { COMPANY_NAME } from 'utils/config';\nimport { canManageCommunity } from 'utils/permission';\n\nimport { PlusIcon } from 'components/UI/Icons';\nimport Search from './Search';\nimport CommunitiesList from './CommunitiesList';\nimport * as S from './CommunitiesPage.styled';\n\nconst CommunitiesPage = () => {\n  const [searchString, setSearchString] = useState('');\n  const [isSearch, setSearch] = useState(false);\n  const { user } = useContext(UserContext);\n  const router = useRouter();\n\n  const canCreateCommunity = user && canManageCommunity(user);\n  const toCreateCommunity = () =>\n    router.push(`/[company]/communities/new`, `/${COMPANY_NAME()}/communities/new`, {\n      shallow: true,\n    });\n\n  // Search state is here because of this logic:\n  useEscapeToClose(() => {\n    if (isSearch) {\n      setSearch(false);\n      setSearchString('');\n    } else {\n      router.back();\n    }\n  });\n\n  useKeyboardShortcut({\n    N: () =>\n      router.push(`/[company]/communities/new`, `/${COMPANY_NAME()}/communities/new`, {\n        shallow: true,\n      }),\n  });\n\n  return (\n    <S.Container>\n      <S.CommunitiesWrapper>\n        <S.Header>\n          <S.Heading>Communities</S.Heading>\n          <S.Actions>\n            <Search\n              isSearch={isSearch}\n              setSearch={setSearch}\n              searchString={searchString}\n              setSearchString={setSearchString}\n            />\n            {canCreateCommunity && (\n              <S.PlusIconWrapper onClick={toCreateCommunity}>\n                <PlusIcon />\n              </S.PlusIconWrapper>\n            )}\n          </S.Actions>\n        </S.Header>\n        <CommunitiesList searchString={searchString} />\n      </S.CommunitiesWrapper>\n    </S.Container>\n  );\n};\n\nexport default CommunitiesPage;\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,aAAa;AACvC,SAASC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAC5C,SAASC,WAAW,QAAQ,qBAAqB;AACjD,SAASC,gBAAgB,EAAEC,mBAAmB,QAAQ,OAAO;AAE7D,SAASC,YAAY,QAAQ,cAAc;AAC3C,SAASC,kBAAkB,QAAQ,kBAAkB;AAErD,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAO,KAAKC,CAAC,MAAM,0BAA0B;AAE7C,IAAMC,eAAe,GAAG,SAAlBA,eAAe,GAAS;EAC5B,gBAAwCX,QAAQ,CAAC,EAAE,CAAC;IAA7CY,YAAY;IAAEC,eAAe;EACpC,iBAA8Bb,QAAQ,CAAC,KAAK,CAAC;IAAtCc,QAAQ;IAAEC,SAAS;EAC1B,kBAAiBd,UAAU,CAACC,WAAW,CAAC;IAAhCc,IAAI,eAAJA,IAAI;EACZ,IAAMC,MAAM,GAAGlB,SAAS,EAAE;EAE1B,IAAMmB,kBAAkB,GAAGF,IAAI,IAAIV,kBAAkB,CAACU,IAAI,CAAC;EAC3D,IAAMG,iBAAiB,GAAG,SAApBA,iBAAiB;IAAA,OACrBF,MAAM,CAACG,IAAI,0CAAmCf,YAAY,EAAE,uBAAoB;MAC9EgB,OAAO,EAAE;IACX,CAAC,CAAC;EAAA;;EAEJ;EACAlB,gBAAgB,CAAC,YAAM;IACrB,IAAIW,QAAQ,EAAE;MACZC,SAAS,CAAC,KAAK,CAAC;MAChBF,eAAe,CAAC,EAAE,CAAC;IACrB,CAAC,MAAM;MACLI,MAAM,CAACK,IAAI,EAAE;IACf;EACF,CAAC,CAAC;EAEFlB,mBAAmB,CAAC;IAClBmB,CAAC,EAAE;MAAA,OACDN,MAAM,CAACG,IAAI,0CAAmCf,YAAY,EAAE,uBAAoB;QAC9EgB,OAAO,EAAE;MACX,CAAC,CAAC;IAAA;EACN,CAAC,CAAC;EAEF,OACE,MAAC,CAAC,CAAC,SAAS,QACV,MAAC,CAAC,CAAC,kBAAkB,QACnB,MAAC,CAAC,CAAC,MAAM,QACP,MAAC,CAAC,CAAC,OAAO,sBAAwB,EAClC,MAAC,CAAC,CAAC,OAAO,QACR,MAAC,MAAM;IACL,QAAQ,EAAEP,QAAS;IACnB,SAAS,EAAEC,SAAU;IACrB,YAAY,EAAEH,YAAa;IAC3B,eAAe,EAAEC;EAAgB,EACjC,EACDK,kBAAkB,IACjB,MAAC,CAAC,CAAC,eAAe;IAAC,OAAO,EAAEC;EAAkB,GAC5C,MAAC,QAAQ,OAAG,CAEf,CACS,CACH,EACX,MAAC,eAAe;IAAC,YAAY,EAAEP;EAAa,EAAG,CAC1B,CACX;AAElB,CAAC;AAED,eAAeD,eAAe"},"metadata":{},"sourceType":"module"}