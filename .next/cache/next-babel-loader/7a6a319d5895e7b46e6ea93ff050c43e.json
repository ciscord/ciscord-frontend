{"ast":null,"code":"import _Object$setPrototypeOf from \"@babel/runtime-corejs2/core-js/object/set-prototype-of\";\nimport _Object$getPrototypeOf from \"@babel/runtime-corejs2/core-js/object/get-prototype-of\";\nimport _Object$create from \"@babel/runtime-corejs2/core-js/object/create\";\nimport _Symbol from \"@babel/runtime-corejs2/core-js/symbol\";\nimport _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"apolloClient\", \"apolloState\"];\nvar _this = this,\n  _jsxFileName = \"/Volumes/MacData/work/ciscord-frontend.git/utils/apollo/index.js\";\nvar __jsx = React.createElement;\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = _Object$defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof _Symbol ? _Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return _Object$defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = _Object$create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = _Object$getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = _Object$create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return _Object$setPrototypeOf ? _Object$setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = _Object$create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = _Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, \"catch\": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React from 'react';\nimport App from 'next/app';\nimport { ApolloProvider } from '@apollo/client';\nimport initApolloClient from './initApolloClient';\n\n/* eslint-disable no-console */\n\n/**\n * Installs the Apollo Client on NextPageContext\n * or NextAppContext. Useful if you want to use apolloClient\n * inside getStaticProps, getStaticPaths or getServerProps\n * @param {NextPageContext | NextAppContext} ctx\n */\nexport var initOnContext = function initOnContext(ctx) {\n  var inAppContext = Boolean(ctx.ctx);\n\n  // We consider installing `withApollo({ ssr: true })` on global App level\n  // as antipattern since it disables project wide Automatic Static Optimization.\n  if (true) {\n    if (inAppContext) {\n      console.warn('Warning: You have opted-out of Automatic Static Optimization due to `withApollo` in `pages/_app`.\\n' + 'Read more: https://err.sh/next.js/opt-out-auto-static-optimization\\n');\n    }\n  }\n\n  // Initialize ApolloClient if not already done\n  var apolloClient = ctx.apolloClient || initApolloClient(ctx.apolloState || {}, inAppContext ? ctx.ctx : ctx);\n\n  // We send the Apollo Client as a prop to the component to avoid calling initApollo() twice in the server.\n  // Otherwise, the component would have to call initApollo() again but this\n  // time without the context. Once that happens, the following code will make sure we send\n  // the prop as `null` to the browser.\n  apolloClient.toJSON = function () {\n    return null;\n  };\n\n  // Add apolloClient to NextPageContext & NextAppContext.\n  // This allows us to consume the apolloClient inside our\n  // custom `getInitialProps({ apolloClient })`.\n  ctx.apolloClient = apolloClient;\n  if (inAppContext) {\n    ctx.ctx.apolloClient = apolloClient;\n  }\n  return ctx;\n};\nexport var withApollo = function withApollo() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    _ref$ssr = _ref.ssr,\n    ssr = _ref$ssr === void 0 ? false : _ref$ssr;\n  return function (PageComponent) {\n    var WithApollo = function WithApollo(_ref2) {\n      var apolloClient = _ref2.apolloClient,\n        apolloState = _ref2.apolloState,\n        pageProps = _objectWithoutProperties(_ref2, _excluded);\n      var client;\n      if (apolloClient) {\n        // Happens on: getDataFromTree & next.js ssr\n        client = apolloClient;\n      } else {\n        // Happens on: next.js csr\n        client = initApolloClient(apolloState, undefined);\n      }\n      return __jsx(ApolloProvider, {\n        client: client,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 7\n        }\n      }, __jsx(PageComponent, _extends({}, pageProps, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 9\n        }\n      })));\n    };\n\n    // Set the correct displayName in development\n    if (true) {\n      var displayName = PageComponent.displayName || PageComponent.name || 'Component';\n      WithApollo.displayName = \"withApollo(\".concat(displayName, \")\");\n    }\n    if (ssr || PageComponent.getInitialProps) {\n      WithApollo.getInitialProps = function _callee(ctx) {\n        var inAppContext, _initOnContext, apolloClient, pageProps, AppTree, _await$import2, getDataFromTree, props;\n        return _regeneratorRuntime().async(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              inAppContext = Boolean(ctx.ctx);\n              _initOnContext = initOnContext(ctx), apolloClient = _initOnContext.apolloClient; // Run wrapped getInitialProps methods\n              pageProps = {};\n              if (!PageComponent.getInitialProps) {\n                _context.next = 9;\n                break;\n              }\n              _context.next = 6;\n              return _regeneratorRuntime().awrap(PageComponent.getInitialProps(ctx));\n            case 6:\n              pageProps = _context.sent;\n              _context.next = 13;\n              break;\n            case 9:\n              if (!inAppContext) {\n                _context.next = 13;\n                break;\n              }\n              _context.next = 12;\n              return _regeneratorRuntime().awrap(App.getInitialProps(ctx));\n            case 12:\n              pageProps = _context.sent;\n            case 13:\n              if (!false) {\n                _context.next = 31;\n                break;\n              }\n              AppTree = ctx.AppTree; // When redirecting, the response is finished.\n              // No point in continuing to render\n              if (!(ctx.res && ctx.res.finished)) {\n                _context.next = 17;\n                break;\n              }\n              return _context.abrupt(\"return\", pageProps);\n            case 17:\n              if (!(ssr && AppTree)) {\n                _context.next = 31;\n                break;\n              }\n              _context.prev = 18;\n              _context.next = 21;\n              return _regeneratorRuntime().awrap(import(\"@apollo/client/react/ssr\"));\n            case 21:\n              _await$import2 = _context.sent;\n              getDataFromTree = _await$import2.getDataFromTree;\n              if (inAppContext) {\n                props = _objectSpread({}, pageProps, {\n                  apolloClient: apolloClient\n                });\n              } else {\n                props = {\n                  pageProps: _objectSpread({}, pageProps, {\n                    apolloClient: apolloClient\n                  })\n                };\n              }\n\n              // Take the Next.js AppTree, determine which queries are needed to render,\n              // and fetch them. This method can be pretty slow since it renders\n              // your entire AppTree once for every query. Check out apollo fragments\n              // if you want to reduce the number of rerenders.\n              // https://www.apollographql.com/docs/react/data/fragments/\n              _context.next = 26;\n              return _regeneratorRuntime().awrap(getDataFromTree(__jsx(AppTree, _extends({}, props, {\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 116,\n                  columnNumber: 35\n                }\n              }))));\n            case 26:\n              _context.next = 31;\n              break;\n            case 28:\n              _context.prev = 28;\n              _context.t0 = _context[\"catch\"](18);\n              // Prevent Apollo Client GraphQL errors from crashing SSR.\n              // Handle them in components via the data.error prop:\n              // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n              console.error('Error while running `getDataFromTree`', _context.t0);\n            case 31:\n              return _context.abrupt(\"return\", _objectSpread({}, pageProps, {\n                // Extract query data from the Apollo store\n                apolloState: apolloClient.cache.extract(),\n                // Provide the client for ssr. As soon as this payload\n                // gets JSON.stringified it will remove itself.\n                apolloClient: ctx.apolloClient\n              }));\n            case 32:\n            case \"end\":\n              return _context.stop();\n          }\n        }, null, null, [[18, 28]], _Promise);\n      };\n    }\n    return WithApollo;\n  };\n};","map":{"version":3,"names":["React","App","ApolloProvider","initApolloClient","initOnContext","ctx","inAppContext","Boolean","console","warn","apolloClient","apolloState","toJSON","withApollo","ssr","PageComponent","WithApollo","pageProps","client","undefined","displayName","name","getInitialProps","AppTree","res","finished","getDataFromTree","props","error","cache","extract"],"sources":["/Volumes/MacData/work/ciscord-frontend.git/utils/apollo/index.js"],"sourcesContent":["import React from 'react';\nimport App from 'next/app';\nimport { ApolloProvider } from '@apollo/client';\nimport initApolloClient from './initApolloClient';\n\n/* eslint-disable no-console */\n\n/**\n * Installs the Apollo Client on NextPageContext\n * or NextAppContext. Useful if you want to use apolloClient\n * inside getStaticProps, getStaticPaths or getServerProps\n * @param {NextPageContext | NextAppContext} ctx\n */\nexport const initOnContext = ctx => {\n  const inAppContext = Boolean(ctx.ctx);\n\n  // We consider installing `withApollo({ ssr: true })` on global App level\n  // as antipattern since it disables project wide Automatic Static Optimization.\n  if (process.env.NODE_ENV === 'development') {\n    if (inAppContext) {\n      console.warn(\n        'Warning: You have opted-out of Automatic Static Optimization due to `withApollo` in `pages/_app`.\\n' +\n          'Read more: https://err.sh/next.js/opt-out-auto-static-optimization\\n'\n      );\n    }\n  }\n\n  // Initialize ApolloClient if not already done\n  const apolloClient =\n    ctx.apolloClient || initApolloClient(ctx.apolloState || {}, inAppContext ? ctx.ctx : ctx);\n\n  // We send the Apollo Client as a prop to the component to avoid calling initApollo() twice in the server.\n  // Otherwise, the component would have to call initApollo() again but this\n  // time without the context. Once that happens, the following code will make sure we send\n  // the prop as `null` to the browser.\n  apolloClient.toJSON = () => null;\n\n  // Add apolloClient to NextPageContext & NextAppContext.\n  // This allows us to consume the apolloClient inside our\n  // custom `getInitialProps({ apolloClient })`.\n  ctx.apolloClient = apolloClient;\n  if (inAppContext) {\n    ctx.ctx.apolloClient = apolloClient;\n  }\n\n  return ctx;\n};\n\nexport const withApollo = ({ ssr = false } = {}) => PageComponent => {\n  const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n    let client;\n    if (apolloClient) {\n      // Happens on: getDataFromTree & next.js ssr\n      client = apolloClient;\n    } else {\n      // Happens on: next.js csr\n      client = initApolloClient(apolloState, undefined);\n    }\n\n    return (\n      <ApolloProvider client={client}>\n        <PageComponent {...pageProps} />\n      </ApolloProvider>\n    );\n  };\n\n  // Set the correct displayName in development\n  if (process.env.NODE_ENV !== 'production') {\n    const displayName = PageComponent.displayName || PageComponent.name || 'Component';\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const inAppContext = Boolean(ctx.ctx);\n      const { apolloClient } = initOnContext(ctx);\n\n      // Run wrapped getInitialProps methods\n      let pageProps = {};\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx);\n      } else if (inAppContext) {\n        pageProps = await App.getInitialProps(ctx);\n      }\n\n      // Only on the server:\n      if (typeof window === 'undefined') {\n        const { AppTree } = ctx;\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return pageProps;\n        }\n\n        // Only if dataFromTree is enabled\n        if (ssr && AppTree) {\n          try {\n            // Import `@apollo/react-ssr` dynamically.\n            // We don't want to have this in our client bundle.\n            const { getDataFromTree } = await import(\"@apollo/client/react/ssr\");\n\n            // Since AppComponents and PageComponents have different context types\n            // we need to modify their props a little.\n            let props;\n            if (inAppContext) {\n              props = { ...pageProps, apolloClient };\n            } else {\n              props = { pageProps: { ...pageProps, apolloClient } };\n            }\n\n            // Take the Next.js AppTree, determine which queries are needed to render,\n            // and fetch them. This method can be pretty slow since it renders\n            // your entire AppTree once for every query. Check out apollo fragments\n            // if you want to reduce the number of rerenders.\n            // https://www.apollographql.com/docs/react/data/fragments/\n            await getDataFromTree(<AppTree {...props} />);\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error);\n          }\n        }\n      }\n\n      return {\n        ...pageProps,\n        // Extract query data from the Apollo store\n        apolloState: apolloClient.cache.extract(),\n        // Provide the client for ssr. As soon as this payload\n        // gets JSON.stringified it will remove itself.\n        apolloClient: ctx.apolloClient,\n      };\n    };\n  }\n\n  return WithApollo;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}