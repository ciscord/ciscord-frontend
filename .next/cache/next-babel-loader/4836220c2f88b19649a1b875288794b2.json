{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport { useRouter } from 'next/router';\nimport { useMutation } from '@apollo/client';\nimport { useEscapeToClose } from 'hooks';\nimport { Formik, Form, Field } from 'formik';\nimport * as yup from 'yup';\nimport withAuth from 'utils/apollo/withAuth';\nimport { CREATE_CHANNEL, GET_CHANNELS } from 'apis/Channel';\nimport { COMPANY_NAME } from 'utils/config';\nimport Input from 'components/UI/Input/Input';\nimport { ButtonPrimary } from 'components/UI/Button';\nimport { BackIcon } from 'components/UI/Icons';\nimport * as S from './ChannelCreate.styled';\nconst initialValues = {\n  name: '',\n  description: '',\n  isPrivate: false\n};\nconst validationSchema = yup.object().shape({\n  name: yup.string().strict().max(22, 'Must be shorter than 22 characters').matches(/^[^.]+$/, 'Must contain no dots').required('Name is required')\n});\nconst CreateChannel = () => {\n  const router = useRouter();\n  useEscapeToClose(router.back);\n  const {\n    community: communityUrl\n  } = router.query;\n  const [createChannel] = useMutation(CREATE_CHANNEL, {\n    update(cache, {\n      data: {\n        createChannel: channel\n      }\n    }) {\n      const {\n        channels\n      } = cache.readQuery({\n        query: GET_CHANNELS,\n        variables: {\n          communityUrl\n        }\n      });\n      cache.writeQuery({\n        query: GET_CHANNELS,\n        variables: {\n          communityUrl\n        },\n        data: {\n          channels: channels.concat([channel])\n        }\n      });\n    }\n  });\n  const onSubmit = async (values, {\n    setSubmitting,\n    setErrors\n  }) => {\n    const channelUrl = values.name.toLowerCase().replace(' ', '-');\n    const url = `${communityUrl}/${channelUrl}`;\n    const {\n      data\n    } = await createChannel({\n      variables: _objectSpread({\n        communityUrl,\n        url\n      }, values),\n      errorPolicy: 'all'\n    });\n    setSubmitting(false);\n    if (!data) {\n      setErrors({\n        name: 'Channel with this name already exists'\n      });\n    } else {\n      router.push(`/[company]/[community]/[channel]`, `/${COMPANY_NAME()}/${url}`, {\n        shallow: true\n      });\n    }\n  };\n  return __jsx(S.Container, null, __jsx(S.Header, null, __jsx(S.Title, null, __jsx(BackIcon, {\n    onClick: () => router.back()\n  }), __jsx(\"span\", {\n    style: {\n      marginTop: 3\n    }\n  }, \"Create a channel\"))), __jsx(S.Body, null, __jsx(Formik, {\n    initialValues: initialValues,\n    validationSchema: validationSchema,\n    onSubmit: onSubmit,\n    validateOnChange: false\n  }, ({\n    isSubmitting\n  }) => __jsx(Form, null, __jsx(Field, {\n    type: \"text\",\n    name: \"name\",\n    label: \"Name\",\n    tip: \"Names must be without periods and shorter than 22 characters.\",\n    placeholder: \"fun\",\n    component: Input,\n    style: {\n      marginTop: 0\n    },\n    autoFocus: true\n  }), __jsx(Field, {\n    type: \"text\",\n    name: \"description\",\n    label: \"Description\",\n    tip: \"What\\u2019s this channel about?\",\n    placeholder: \"For example: Why UX and UI should remain separate\",\n    component: Input\n  }), __jsx(S.Footer, null, __jsx(ButtonPrimary, {\n    type: \"submit\",\n    name: \"button\",\n    disabled: isSubmitting,\n    style: {\n      // position: 'absolute',\n      right: 22,\n      marginTop: 12,\n      marginBottom: 16,\n      lineHeight: 'unset'\n    }\n  }, \"Create\"))))));\n};\nexport default withAuth(CreateChannel);","map":{"version":3,"names":["useRouter","useMutation","useEscapeToClose","Formik","Form","Field","yup","withAuth","CREATE_CHANNEL","GET_CHANNELS","COMPANY_NAME","Input","ButtonPrimary","BackIcon","S","initialValues","name","description","isPrivate","validationSchema","object","shape","string","strict","max","matches","required","CreateChannel","router","back","community","communityUrl","query","createChannel","update","cache","data","channel","channels","readQuery","variables","writeQuery","concat","onSubmit","values","setSubmitting","setErrors","channelUrl","toLowerCase","replace","url","errorPolicy","push","shallow","marginTop","isSubmitting","right","marginBottom","lineHeight"],"sources":["/Volumes/MacData/work/ciscord-frontend.git/components/Channel/ChannelCreate/ChannelCreate.js"],"sourcesContent":["import { useRouter } from 'next/router';\nimport { useMutation } from '@apollo/client';\nimport { useEscapeToClose } from 'hooks';\nimport { Formik, Form, Field } from 'formik';\nimport * as yup from 'yup';\n\nimport withAuth from 'utils/apollo/withAuth';\nimport { CREATE_CHANNEL, GET_CHANNELS } from 'apis/Channel';\nimport { COMPANY_NAME } from 'utils/config';\n\nimport Input from 'components/UI/Input/Input';\nimport { ButtonPrimary } from 'components/UI/Button';\nimport { BackIcon } from 'components/UI/Icons';\n\nimport * as S from './ChannelCreate.styled';\n\nconst initialValues = {\n  name: '',\n  description: '',\n  isPrivate: false,\n};\n\nconst validationSchema = yup.object().shape({\n  name: yup\n    .string()\n    .strict()\n    .max(22, 'Must be shorter than 22 characters')\n    .matches(/^[^.]+$/, 'Must contain no dots')\n    .required('Name is required'),\n});\n\nconst CreateChannel = () => {\n  const router = useRouter();\n  useEscapeToClose(router.back);\n\n  const { community: communityUrl } = router.query;\n\n  const [createChannel] = useMutation(CREATE_CHANNEL, {\n    update(cache, { data: { createChannel: channel } }) {\n      const { channels } = cache.readQuery({\n        query: GET_CHANNELS,\n        variables: {\n          communityUrl,\n        },\n      });\n      cache.writeQuery({\n        query: GET_CHANNELS,\n        variables: { communityUrl },\n        data: { channels: channels.concat([channel]) },\n      });\n    },\n  });\n\n  const onSubmit = async (values, { setSubmitting, setErrors }) => {\n    const channelUrl = values.name.toLowerCase().replace(' ', '-');\n    const url = `${communityUrl}/${channelUrl}`;\n    const { data } = await createChannel({\n      variables: {\n        communityUrl,\n        url,\n        ...values,\n      },\n      errorPolicy: 'all',\n    });\n\n    setSubmitting(false);\n    if (!data) {\n      setErrors({ name: 'Channel with this name already exists' });\n    } else {\n      router.push(`/[company]/[community]/[channel]`, `/${COMPANY_NAME()}/${url}`, {\n        shallow: true,\n      });\n    }\n  };\n\n  return (\n    <S.Container>\n      <S.Header>\n        <S.Title>\n          <BackIcon onClick={() => router.back()} />\n          <span style={{ marginTop: 3 }}>Create a channel</span>\n        </S.Title>\n      </S.Header>\n      <S.Body>\n        <Formik\n          initialValues={initialValues}\n          validationSchema={validationSchema}\n          onSubmit={onSubmit}\n          validateOnChange={false}\n        >\n          {({ isSubmitting }) => (\n            <Form>\n              <Field\n                type=\"text\"\n                name=\"name\"\n                label=\"Name\"\n                tip=\"Names must be without periods and shorter than 22 characters.\"\n                placeholder=\"fun\"\n                component={Input}\n                style={{ marginTop: 0 }}\n                autoFocus\n              />\n              <Field\n                type=\"text\"\n                name=\"description\"\n                label=\"Description\"\n                tip=\"Whatâ€™s this channel about?\"\n                placeholder=\"For example: Why UX and UI should remain separate\"\n                component={Input}\n              />\n              <S.Footer>\n                <ButtonPrimary\n                  type=\"submit\"\n                  name=\"button\"\n                  disabled={isSubmitting}\n                  style={{\n                    // position: 'absolute',\n                    right: 22,\n                    marginTop: 12,\n                    marginBottom: 16,\n                    lineHeight: 'unset',\n                  }}\n                >\n                  Create\n                </ButtonPrimary>\n              </S.Footer>\n            </Form>\n          )}\n        </Formik>\n      </S.Body>\n    </S.Container>\n  );\n};\n\nexport default withAuth(CreateChannel);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}