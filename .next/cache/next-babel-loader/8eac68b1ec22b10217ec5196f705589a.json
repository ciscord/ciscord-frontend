{"ast":null,"code":"var __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport React from 'react';\nimport App from 'next/app';\nimport { ApolloProvider } from '@apollo/client';\nimport initApolloClient from './initApolloClient';\n\n/* eslint-disable no-console */\n\n/**\n * Installs the Apollo Client on NextPageContext\n * or NextAppContext. Useful if you want to use apolloClient\n * inside getStaticProps, getStaticPaths or getServerProps\n * @param {NextPageContext | NextAppContext} ctx\n */\nexport const initOnContext = ctx => {\n  const inAppContext = Boolean(ctx.ctx);\n\n  // We consider installing `withApollo({ ssr: true })` on global App level\n  // as antipattern since it disables project wide Automatic Static Optimization.\n  if (false) {\n    if (inAppContext) {\n      console.warn('Warning: You have opted-out of Automatic Static Optimization due to `withApollo` in `pages/_app`.\\n' + 'Read more: https://err.sh/next.js/opt-out-auto-static-optimization\\n');\n    }\n  }\n\n  // Initialize ApolloClient if not already done\n  const apolloClient = ctx.apolloClient || initApolloClient(ctx.apolloState || {}, inAppContext ? ctx.ctx : ctx);\n\n  // We send the Apollo Client as a prop to the component to avoid calling initApollo() twice in the server.\n  // Otherwise, the component would have to call initApollo() again but this\n  // time without the context. Once that happens, the following code will make sure we send\n  // the prop as `null` to the browser.\n  apolloClient.toJSON = () => null;\n\n  // Add apolloClient to NextPageContext & NextAppContext.\n  // This allows us to consume the apolloClient inside our\n  // custom `getInitialProps({ apolloClient })`.\n  ctx.apolloClient = apolloClient;\n  if (inAppContext) {\n    ctx.ctx.apolloClient = apolloClient;\n  }\n  return ctx;\n};\nexport const withApollo = ({\n  ssr = false\n} = {}) => PageComponent => {\n  const WithApollo = _ref => {\n    let {\n        apolloClient,\n        apolloState\n      } = _ref,\n      pageProps = _objectWithoutProperties(_ref, [\"apolloClient\", \"apolloState\"]);\n    let client;\n    if (apolloClient) {\n      // Happens on: getDataFromTree & next.js ssr\n      client = apolloClient;\n    } else {\n      // Happens on: next.js csr\n      client = initApolloClient(apolloState, undefined);\n    }\n    return __jsx(ApolloProvider, {\n      client: client\n    }, __jsx(PageComponent, pageProps));\n  };\n\n  // Set the correct displayName in development\n  if (false) {\n    const displayName = PageComponent.displayName || PageComponent.name || 'Component';\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const inAppContext = Boolean(ctx.ctx);\n      const {\n        apolloClient\n      } = initOnContext(ctx);\n\n      // Run wrapped getInitialProps methods\n      let pageProps = {};\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx);\n      } else if (inAppContext) {\n        pageProps = await App.getInitialProps(ctx);\n      }\n\n      // Only on the server:\n      if (true) {\n        const {\n          AppTree\n        } = ctx;\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return pageProps;\n        }\n\n        // Only if dataFromTree is enabled\n        if (ssr && AppTree) {\n          try {\n            // Import `@apollo/react-ssr` dynamically.\n            // We don't want to have this in our client bundle.\n            const {\n              getDataFromTree\n            } = await import(\"@apollo/client/react/ssr\");\n\n            // Since AppComponents and PageComponents have different context types\n            // we need to modify their props a little.\n            let props;\n            if (inAppContext) {\n              props = _objectSpread({}, pageProps, {\n                apolloClient\n              });\n            } else {\n              props = {\n                pageProps: _objectSpread({}, pageProps, {\n                  apolloClient\n                })\n              };\n            }\n\n            // Take the Next.js AppTree, determine which queries are needed to render,\n            // and fetch them. This method can be pretty slow since it renders\n            // your entire AppTree once for every query. Check out apollo fragments\n            // if you want to reduce the number of rerenders.\n            // https://www.apollographql.com/docs/react/data/fragments/\n            await getDataFromTree(__jsx(AppTree, props));\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error);\n          }\n        }\n      }\n      return _objectSpread({}, pageProps, {\n        // Extract query data from the Apollo store\n        apolloState: apolloClient.cache.extract(),\n        // Provide the client for ssr. As soon as this payload\n        // gets JSON.stringified it will remove itself.\n        apolloClient: ctx.apolloClient\n      });\n    };\n  }\n  return WithApollo;\n};","map":{"version":3,"names":["React","App","ApolloProvider","initApolloClient","initOnContext","ctx","inAppContext","Boolean","console","warn","apolloClient","apolloState","toJSON","withApollo","ssr","PageComponent","WithApollo","pageProps","client","undefined","displayName","name","getInitialProps","AppTree","res","finished","getDataFromTree","props","error","cache","extract"],"sources":["/Volumes/MacData/work/ciscord-frontend.git/utils/apollo/index.js"],"sourcesContent":["import React from 'react';\nimport App from 'next/app';\nimport { ApolloProvider } from '@apollo/client';\nimport initApolloClient from './initApolloClient';\n\n/* eslint-disable no-console */\n\n/**\n * Installs the Apollo Client on NextPageContext\n * or NextAppContext. Useful if you want to use apolloClient\n * inside getStaticProps, getStaticPaths or getServerProps\n * @param {NextPageContext | NextAppContext} ctx\n */\nexport const initOnContext = ctx => {\n  const inAppContext = Boolean(ctx.ctx);\n\n  // We consider installing `withApollo({ ssr: true })` on global App level\n  // as antipattern since it disables project wide Automatic Static Optimization.\n  if (process.env.NODE_ENV === 'development') {\n    if (inAppContext) {\n      console.warn(\n        'Warning: You have opted-out of Automatic Static Optimization due to `withApollo` in `pages/_app`.\\n' +\n          'Read more: https://err.sh/next.js/opt-out-auto-static-optimization\\n'\n      );\n    }\n  }\n\n  // Initialize ApolloClient if not already done\n  const apolloClient =\n    ctx.apolloClient || initApolloClient(ctx.apolloState || {}, inAppContext ? ctx.ctx : ctx);\n\n  // We send the Apollo Client as a prop to the component to avoid calling initApollo() twice in the server.\n  // Otherwise, the component would have to call initApollo() again but this\n  // time without the context. Once that happens, the following code will make sure we send\n  // the prop as `null` to the browser.\n  apolloClient.toJSON = () => null;\n\n  // Add apolloClient to NextPageContext & NextAppContext.\n  // This allows us to consume the apolloClient inside our\n  // custom `getInitialProps({ apolloClient })`.\n  ctx.apolloClient = apolloClient;\n  if (inAppContext) {\n    ctx.ctx.apolloClient = apolloClient;\n  }\n\n  return ctx;\n};\n\nexport const withApollo = ({ ssr = false } = {}) => PageComponent => {\n  const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n    let client;\n    if (apolloClient) {\n      // Happens on: getDataFromTree & next.js ssr\n      client = apolloClient;\n    } else {\n      // Happens on: next.js csr\n      client = initApolloClient(apolloState, undefined);\n    }\n\n    return (\n      <ApolloProvider client={client}>\n        <PageComponent {...pageProps} />\n      </ApolloProvider>\n    );\n  };\n\n  // Set the correct displayName in development\n  if (process.env.NODE_ENV !== 'production') {\n    const displayName = PageComponent.displayName || PageComponent.name || 'Component';\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const inAppContext = Boolean(ctx.ctx);\n      const { apolloClient } = initOnContext(ctx);\n\n      // Run wrapped getInitialProps methods\n      let pageProps = {};\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx);\n      } else if (inAppContext) {\n        pageProps = await App.getInitialProps(ctx);\n      }\n\n      // Only on the server:\n      if (typeof window === 'undefined') {\n        const { AppTree } = ctx;\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return pageProps;\n        }\n\n        // Only if dataFromTree is enabled\n        if (ssr && AppTree) {\n          try {\n            // Import `@apollo/react-ssr` dynamically.\n            // We don't want to have this in our client bundle.\n            const { getDataFromTree } = await import(\"@apollo/client/react/ssr\");\n\n            // Since AppComponents and PageComponents have different context types\n            // we need to modify their props a little.\n            let props;\n            if (inAppContext) {\n              props = { ...pageProps, apolloClient };\n            } else {\n              props = { pageProps: { ...pageProps, apolloClient } };\n            }\n\n            // Take the Next.js AppTree, determine which queries are needed to render,\n            // and fetch them. This method can be pretty slow since it renders\n            // your entire AppTree once for every query. Check out apollo fragments\n            // if you want to reduce the number of rerenders.\n            // https://www.apollographql.com/docs/react/data/fragments/\n            await getDataFromTree(<AppTree {...props} />);\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error);\n          }\n        }\n      }\n\n      return {\n        ...pageProps,\n        // Extract query data from the Apollo store\n        apolloState: apolloClient.cache.extract(),\n        // Provide the client for ssr. As soon as this payload\n        // gets JSON.stringified it will remove itself.\n        apolloClient: ctx.apolloClient,\n      };\n    };\n  }\n\n  return WithApollo;\n};\n"],"mappings":";;;;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,GAAG,MAAM,UAAU;AAC1B,SAASC,cAAc,QAAQ,gBAAgB;AAC/C,OAAOC,gBAAgB,MAAM,oBAAoB;;AAEjD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAGC,GAAG,IAAI;EAClC,MAAMC,YAAY,GAAGC,OAAO,CAACF,GAAG,CAACA,GAAG,CAAC;;EAErC;EACA;EACA,WAA4C;IAC1C,IAAIC,YAAY,EAAE;MAChBE,OAAO,CAACC,IAAI,CACV,qGAAqG,GACnG,sEAAsE,CACzE;IACH;EACF;;EAEA;EACA,MAAMC,YAAY,GAChBL,GAAG,CAACK,YAAY,IAAIP,gBAAgB,CAACE,GAAG,CAACM,WAAW,IAAI,CAAC,CAAC,EAAEL,YAAY,GAAGD,GAAG,CAACA,GAAG,GAAGA,GAAG,CAAC;;EAE3F;EACA;EACA;EACA;EACAK,YAAY,CAACE,MAAM,GAAG,MAAM,IAAI;;EAEhC;EACA;EACA;EACAP,GAAG,CAACK,YAAY,GAAGA,YAAY;EAC/B,IAAIJ,YAAY,EAAE;IAChBD,GAAG,CAACA,GAAG,CAACK,YAAY,GAAGA,YAAY;EACrC;EAEA,OAAOL,GAAG;AACZ,CAAC;AAED,OAAO,MAAMQ,UAAU,GAAG,CAAC;EAAEC,GAAG,GAAG;AAAM,CAAC,GAAG,CAAC,CAAC,KAAKC,aAAa,IAAI;EACnE,MAAMC,UAAU,GAAG,QAAiD;IAAA,IAAhD;QAAEN,YAAY;QAAEC;MAA0B,CAAC;MAAXM,SAAS;IAC3D,IAAIC,MAAM;IACV,IAAIR,YAAY,EAAE;MAChB;MACAQ,MAAM,GAAGR,YAAY;IACvB,CAAC,MAAM;MACL;MACAQ,MAAM,GAAGf,gBAAgB,CAACQ,WAAW,EAAEQ,SAAS,CAAC;IACnD;IAEA,OACE,MAAC,cAAc;MAAC,MAAM,EAAED;IAAO,GAC7B,MAAC,aAAa,EAAKD,SAAS,CAAI,CACjB;EAErB,CAAC;;EAED;EACA,WAA2C;IACzC,MAAMG,WAAW,GAAGL,aAAa,CAACK,WAAW,IAAIL,aAAa,CAACM,IAAI,IAAI,WAAW;IAClFL,UAAU,CAACI,WAAW,GAAI,cAAaA,WAAY,GAAE;EACvD;EAEA,IAAIN,GAAG,IAAIC,aAAa,CAACO,eAAe,EAAE;IACxCN,UAAU,CAACM,eAAe,GAAG,MAAMjB,GAAG,IAAI;MACxC,MAAMC,YAAY,GAAGC,OAAO,CAACF,GAAG,CAACA,GAAG,CAAC;MACrC,MAAM;QAAEK;MAAa,CAAC,GAAGN,aAAa,CAACC,GAAG,CAAC;;MAE3C;MACA,IAAIY,SAAS,GAAG,CAAC,CAAC;MAClB,IAAIF,aAAa,CAACO,eAAe,EAAE;QACjCL,SAAS,GAAG,MAAMF,aAAa,CAACO,eAAe,CAACjB,GAAG,CAAC;MACtD,CAAC,MAAM,IAAIC,YAAY,EAAE;QACvBW,SAAS,GAAG,MAAMhB,GAAG,CAACqB,eAAe,CAACjB,GAAG,CAAC;MAC5C;;MAEA;MACA,UAAmC;QACjC,MAAM;UAAEkB;QAAQ,CAAC,GAAGlB,GAAG;QACvB;QACA;QACA,IAAIA,GAAG,CAACmB,GAAG,IAAInB,GAAG,CAACmB,GAAG,CAACC,QAAQ,EAAE;UAC/B,OAAOR,SAAS;QAClB;;QAEA;QACA,IAAIH,GAAG,IAAIS,OAAO,EAAE;UAClB,IAAI;YACF;YACA;YACA,MAAM;cAAEG;YAAgB,CAAC,GAAG,MAAM,MAAM,CAAC,0BAA0B,CAAC;;YAEpE;YACA;YACA,IAAIC,KAAK;YACT,IAAIrB,YAAY,EAAE;cAChBqB,KAAK,qBAAQV,SAAS;gBAAEP;cAAY,EAAE;YACxC,CAAC,MAAM;cACLiB,KAAK,GAAG;gBAAEV,SAAS,oBAAOA,SAAS;kBAAEP;gBAAY;cAAG,CAAC;YACvD;;YAEA;YACA;YACA;YACA;YACA;YACA,MAAMgB,eAAe,CAAC,MAAC,OAAO,EAAKC,KAAK,CAAI,CAAC;UAC/C,CAAC,CAAC,OAAOC,KAAK,EAAE;YACd;YACA;YACA;YACApB,OAAO,CAACoB,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;UAC/D;QACF;MACF;MAEA,yBACKX,SAAS;QACZ;QACAN,WAAW,EAAED,YAAY,CAACmB,KAAK,CAACC,OAAO,EAAE;QACzC;QACA;QACApB,YAAY,EAAEL,GAAG,CAACK;MAAY;IAElC,CAAC;EACH;EAEA,OAAOM,UAAU;AACnB,CAAC"},"metadata":{},"sourceType":"module"}