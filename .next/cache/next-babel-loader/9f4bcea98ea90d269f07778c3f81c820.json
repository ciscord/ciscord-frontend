{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;\nimport gql from 'graphql-tag';\nexport var NOTIFICATIONS_SUBSCRIPTION = gql(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  subscription newNotification($receiverId: String!, $tenant: String!) {\\n    newNotification(receiverId: $receiverId, tenant: $tenant) {\\n      id\\n      type\\n      createdAt\\n      isRead\\n      message {\\n        id\\n        body\\n        createdAt\\n        author {\\n          id\\n          username\\n        }\\n      }\\n      receiver {\\n        id\\n        username\\n      }\\n      sender {\\n        id\\n        username\\n        isOnline\\n      }\\n      channel {\\n        url\\n        id\\n      }\\n      community {\\n        url\\n        id\\n      }\\n    }\\n  }\\n\"])));\nexport var GET_UNREAD_NOTIFICATIONS = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n  query unreadNotifications {\\n    unreadNotifications {\\n      id\\n      type\\n      isRead\\n    }\\n  }\\n\"])));\nexport var GET_NOTIFICATIONS = gql(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\\n  query notifications {\\n    notifications {\\n      id\\n      type\\n      createdAt\\n      isRead\\n      message {\\n        id\\n        body\\n        createdAt\\n        author {\\n          id\\n          username\\n        }\\n      }\\n      receiver {\\n        id\\n        username\\n      }\\n      sender {\\n        id\\n        username\\n        isOnline\\n      }\\n      channel {\\n        url\\n        id\\n      }\\n      community {\\n        url\\n        id\\n      }\\n    }\\n  }\\n\"])));\nexport var MARK_NOTIFICATIONS_AS_READ = gql(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\\n  mutation markNotificationsAsRead($type: String!) {\\n    markNotificationsAsRead(type: $type) {\\n      count\\n    }\\n  }\\n\"])));\nexport var MARK_NOTIFICATION_AS_READ = gql(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"\\n  mutation markNotificationAsRead($id: String!) {\\n    markNotificationAsRead(id: $id) {\\n      count\\n    }\\n  }\\n\"])));","map":{"version":3,"names":["gql","NOTIFICATIONS_SUBSCRIPTION","GET_UNREAD_NOTIFICATIONS","GET_NOTIFICATIONS","MARK_NOTIFICATIONS_AS_READ","MARK_NOTIFICATION_AS_READ"],"sources":["/Volumes/MacData/work/ciscord-frontend.git/apis/Notification.js"],"sourcesContent":["import gql from 'graphql-tag';\n\nexport const NOTIFICATIONS_SUBSCRIPTION = gql`\n  subscription newNotification($receiverId: String!, $tenant: String!) {\n    newNotification(receiverId: $receiverId, tenant: $tenant) {\n      id\n      type\n      createdAt\n      isRead\n      message {\n        id\n        body\n        createdAt\n        author {\n          id\n          username\n        }\n      }\n      receiver {\n        id\n        username\n      }\n      sender {\n        id\n        username\n        isOnline\n      }\n      channel {\n        url\n        id\n      }\n      community {\n        url\n        id\n      }\n    }\n  }\n`;\n\nexport const GET_UNREAD_NOTIFICATIONS = gql`\n  query unreadNotifications {\n    unreadNotifications {\n      id\n      type\n      isRead\n    }\n  }\n`;\n\nexport const GET_NOTIFICATIONS = gql`\n  query notifications {\n    notifications {\n      id\n      type\n      createdAt\n      isRead\n      message {\n        id\n        body\n        createdAt\n        author {\n          id\n          username\n        }\n      }\n      receiver {\n        id\n        username\n      }\n      sender {\n        id\n        username\n        isOnline\n      }\n      channel {\n        url\n        id\n      }\n      community {\n        url\n        id\n      }\n    }\n  }\n`;\n\nexport const MARK_NOTIFICATIONS_AS_READ = gql`\n  mutation markNotificationsAsRead($type: String!) {\n    markNotificationsAsRead(type: $type) {\n      count\n    }\n  }\n`;\nexport const MARK_NOTIFICATION_AS_READ = gql`\n  mutation markNotificationAsRead($id: String!) {\n    markNotificationAsRead(id: $id) {\n      count\n    }\n  }\n`;\n"],"mappings":";;AAAA,OAAOA,GAAG,MAAM,aAAa;AAE7B,OAAO,IAAMC,0BAA0B,GAAGD,GAAG,moBAmC5C;AAED,OAAO,IAAME,wBAAwB,GAAGF,GAAG,mLAQ1C;AAED,OAAO,IAAMG,iBAAiB,GAAGH,GAAG,wiBAmCnC;AAED,OAAO,IAAMI,0BAA0B,GAAGJ,GAAG,oMAM5C;AACD,OAAO,IAAMK,yBAAyB,GAAGL,GAAG,4LAM3C"},"metadata":{},"sourceType":"module"}