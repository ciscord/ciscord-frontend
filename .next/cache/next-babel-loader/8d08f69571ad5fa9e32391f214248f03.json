{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport { cloneDeep } from 'lodash';\nimport { MESSAGES_SUBSCRIPTION, MESSAGE_EDIT_SUBSCRIPTION, MESSAGE_DELETE_SUBSCRIPTION, NEW_REACTION_SUBSCRIPTION, UPDATE_REACTION_SUBSCRIPTION, REMOVE_REACTION_SUBSCRIPTION } from 'apis/Message';\nimport { COMPANY_NAME } from 'utils/config';\nconst Subscribe = ({\n  subscribeToMore,\n  communityUrl,\n  channelUrl\n}) => {\n  subscribeToMore({\n    document: MESSAGES_SUBSCRIPTION,\n    variables: {\n      channelUrl: `${communityUrl}/${channelUrl}`,\n      tenant: COMPANY_NAME()\n    },\n    updateQuery: (prev, {\n      subscriptionData\n    }) => {\n      var _result, _result$messages, _result$messages$;\n      if (!subscriptionData.data) return prev;\n      const {\n        newMessage\n      } = subscriptionData.data;\n      console.log(newMessage, '====newMessage=====');\n      let result = _objectSpread({}, prev);\n      if (((_result = result) === null || _result === void 0 ? void 0 : (_result$messages = _result.messages) === null || _result$messages === void 0 ? void 0 : (_result$messages$ = _result$messages[0]) === null || _result$messages$ === void 0 ? void 0 : _result$messages$.channel.url) === newMessage.channel.url) {\n        const messagesData = result.messages.filter(message => message.id === newMessage.id);\n        if (messagesData.length === 0) {\n          result = _objectSpread({}, result, {\n            messages: [...result.messages, newMessage]\n          });\n        } else {\n          const indexE = result.messages.indexOf(messagesData[0]);\n          result.messages[indexE] = newMessage;\n        }\n      }\n      return result;\n    }\n  });\n  subscribeToMore({\n    document: MESSAGE_EDIT_SUBSCRIPTION,\n    variables: {\n      channelUrl: `${communityUrl}/${channelUrl}`,\n      tenant: COMPANY_NAME()\n    },\n    updateQuery: (prev, {\n      subscriptionData\n    }) => {\n      if (!subscriptionData.data || !subscriptionData.data.editMessage) return prev;\n      const {\n        editMessage\n      } = subscriptionData.data;\n      const updatedMessageIndex = prev.messages.findIndex(({\n        id\n      }) => id === editMessage.id);\n      let _messages = cloneDeep(prev.messages);\n      _messages.splice(updatedMessageIndex, 1, editMessage);\n      return _objectSpread({}, prev, {\n        messages: _messages\n      });\n    }\n  });\n  subscribeToMore({\n    document: MESSAGE_DELETE_SUBSCRIPTION,\n    variables: {\n      channelUrl: `${communityUrl}/${channelUrl}`,\n      tenant: COMPANY_NAME()\n    },\n    updateQuery: (prev, {\n      subscriptionData\n    }) => {\n      if (!subscriptionData.data || !subscriptionData.data.deleteMessage) return prev;\n      const {\n        deleteMessage\n      } = subscriptionData.data;\n      const updatedMessages = prev.messages.filter(({\n        id\n      }) => id !== deleteMessage.id);\n      return _objectSpread({}, prev, {\n        messages: updatedMessages\n      });\n    }\n  });\n  subscribeToMore({\n    document: NEW_REACTION_SUBSCRIPTION,\n    variables: {\n      channelUrl: `${communityUrl}/${channelUrl}`,\n      tenant: COMPANY_NAME()\n    },\n    updateQuery: (prev, {\n      subscriptionData\n    }) => {\n      if (!subscriptionData.data || !subscriptionData.data.newReaction) return prev;\n      const {\n        newReaction: reaction\n      } = subscriptionData.data;\n      const updatedMessageIndex = prev.messages.findIndex(({\n        id\n      }) => id === reaction.message.id);\n      let _messages = cloneDeep(prev.messages);\n      _messages[updatedMessageIndex].reactions.push(reaction);\n      return _objectSpread({}, prev, {\n        messages: _messages\n      });\n    }\n  });\n  subscribeToMore({\n    document: UPDATE_REACTION_SUBSCRIPTION,\n    variables: {\n      channelUrl: `${communityUrl}/${channelUrl}`,\n      tenant: COMPANY_NAME()\n    },\n    updateQuery: (prev, {\n      subscriptionData\n    }) => {\n      if (!subscriptionData.data || !subscriptionData.data.updatedReaction) return prev;\n      const {\n        updatedReaction\n      } = subscriptionData.data;\n      const updatedMessageIndex = prev.messages.findIndex(({\n        id\n      }) => id === updatedReaction.message.id);\n      let _messages = cloneDeep(prev.messages);\n      const reactionIndex = _messages[updatedMessageIndex].reactions.findIndex(({\n        id\n      }) => id === updatedReaction.id);\n      _messages[updatedMessageIndex].reactions.splice(reactionIndex, 1, updatedReaction);\n      return _objectSpread({}, prev, {\n        messages: _messages\n      });\n    }\n  });\n  subscribeToMore({\n    document: REMOVE_REACTION_SUBSCRIPTION,\n    variables: {\n      channelUrl: `${communityUrl}/${channelUrl}`,\n      tenant: COMPANY_NAME()\n    },\n    updateQuery: (prev, {\n      subscriptionData\n    }) => {\n      if (!subscriptionData.data || !subscriptionData.data.removedReaction) return prev;\n      const {\n        id: reactionId\n      } = subscriptionData.data.removedReaction;\n      let _messages = cloneDeep(prev.messages);\n      const updatedMessages = _messages.map(message => _objectSpread({}, _messages, {\n        reactions: message.reactions.filter(({\n          id\n        }) => id !== reactionId)\n      }));\n      return _objectSpread({}, prev, {\n        messages: updatedMessages\n      });\n    }\n  });\n};\nexport default Subscribe;","map":{"version":3,"names":["cloneDeep","MESSAGES_SUBSCRIPTION","MESSAGE_EDIT_SUBSCRIPTION","MESSAGE_DELETE_SUBSCRIPTION","NEW_REACTION_SUBSCRIPTION","UPDATE_REACTION_SUBSCRIPTION","REMOVE_REACTION_SUBSCRIPTION","COMPANY_NAME","Subscribe","subscribeToMore","communityUrl","channelUrl","document","variables","tenant","updateQuery","prev","subscriptionData","data","newMessage","console","log","result","messages","channel","url","messagesData","filter","message","id","length","indexE","indexOf","editMessage","updatedMessageIndex","findIndex","_messages","splice","deleteMessage","updatedMessages","newReaction","reaction","reactions","push","updatedReaction","reactionIndex","removedReaction","reactionId","map"],"sources":["/Volumes/MacData/work/ciscord-frontend.git/components/Chat/Chat.subscriptions.js"],"sourcesContent":["import { cloneDeep } from 'lodash';\nimport {\n  MESSAGES_SUBSCRIPTION,\n  MESSAGE_EDIT_SUBSCRIPTION,\n  MESSAGE_DELETE_SUBSCRIPTION,\n  NEW_REACTION_SUBSCRIPTION,\n  UPDATE_REACTION_SUBSCRIPTION,\n  REMOVE_REACTION_SUBSCRIPTION,\n} from 'apis/Message';\nimport { COMPANY_NAME } from 'utils/config';\n\nconst Subscribe = ({ subscribeToMore, communityUrl, channelUrl }) => {\n  subscribeToMore({\n    document: MESSAGES_SUBSCRIPTION,\n    variables: {\n      channelUrl: `${communityUrl}/${channelUrl}`,\n      tenant: COMPANY_NAME(),\n    },\n    updateQuery: (prev, { subscriptionData }) => {\n      if (!subscriptionData.data) return prev;\n      const { newMessage } = subscriptionData.data;\n      console.log(newMessage, '====newMessage=====')\n      let result = { ...prev };\n      if (result?.messages?.[0]?.channel.url === newMessage.channel.url) {\n        const messagesData = result.messages.filter(message => message.id === newMessage.id);\n        if (messagesData.length === 0) {\n          result = {\n            ...result,\n            messages: [...result.messages, newMessage],\n          };\n        } else {\n          const indexE = result.messages.indexOf(messagesData[0]);\n          result.messages[indexE] = newMessage;\n        }\n      }\n\n      return result;\n    },\n  });\n\n  subscribeToMore({\n    document: MESSAGE_EDIT_SUBSCRIPTION,\n    variables: {\n      channelUrl: `${communityUrl}/${channelUrl}`,\n      tenant: COMPANY_NAME(),\n    },\n    updateQuery: (prev, { subscriptionData }) => {\n      if (!subscriptionData.data || !subscriptionData.data.editMessage) return prev;\n      const { editMessage } = subscriptionData.data;\n\n      const updatedMessageIndex = prev.messages.findIndex(({ id }) => id === editMessage.id);\n      let _messages = cloneDeep(prev.messages)\n      _messages.splice(updatedMessageIndex, 1, editMessage);\n      return {\n        ...prev,\n        messages: _messages,\n      };\n    },\n  });\n\n  subscribeToMore({\n    document: MESSAGE_DELETE_SUBSCRIPTION,\n    variables: {\n      channelUrl: `${communityUrl}/${channelUrl}`,\n      tenant: COMPANY_NAME(),\n    },\n    updateQuery: (prev, { subscriptionData }) => {\n      if (!subscriptionData.data || !subscriptionData.data.deleteMessage) return prev;\n      const { deleteMessage } = subscriptionData.data;\n      const updatedMessages = prev.messages.filter(({ id }) => id !== deleteMessage.id);\n\n      return {\n        ...prev,\n        messages: updatedMessages,\n      };\n    },\n  });\n\n  subscribeToMore({\n    document: NEW_REACTION_SUBSCRIPTION,\n    variables: {\n      channelUrl: `${communityUrl}/${channelUrl}`,\n      tenant: COMPANY_NAME(),\n    },\n    updateQuery: (prev, { subscriptionData }) => {\n      if (!subscriptionData.data || !subscriptionData.data.newReaction) return prev;\n      const { newReaction: reaction } = subscriptionData.data;\n\n      const updatedMessageIndex = prev.messages.findIndex(({ id }) => id === reaction.message.id);\n      let _messages = cloneDeep(prev.messages)\n\n      _messages[updatedMessageIndex].reactions.push(reaction);\n\n      return {\n        ...prev,\n        messages: _messages,\n      };\n    },\n  });\n\n  subscribeToMore({\n    document: UPDATE_REACTION_SUBSCRIPTION,\n    variables: {\n      channelUrl: `${communityUrl}/${channelUrl}`,\n      tenant: COMPANY_NAME(),\n    },\n    updateQuery: (prev, { subscriptionData }) => {\n      if (!subscriptionData.data || !subscriptionData.data.updatedReaction) return prev;\n      const { updatedReaction } = subscriptionData.data;\n\n      const updatedMessageIndex = prev.messages.findIndex(\n        ({ id }) => id === updatedReaction.message.id\n      );\n      \n      let _messages = cloneDeep(prev.messages)\n\n      const reactionIndex = _messages[updatedMessageIndex].reactions.findIndex(\n        ({ id }) => id === updatedReaction.id\n      );\n\n      _messages[updatedMessageIndex].reactions.splice(reactionIndex, 1, updatedReaction);\n\n      return {\n        ...prev,\n        messages: _messages,\n      };\n    },\n  });\n\n  subscribeToMore({\n    document: REMOVE_REACTION_SUBSCRIPTION,\n    variables: {\n      channelUrl: `${communityUrl}/${channelUrl}`,\n      tenant: COMPANY_NAME(),\n    },\n    updateQuery: (prev, { subscriptionData }) => {\n      if (!subscriptionData.data || !subscriptionData.data.removedReaction) return prev;\n\n      const { id: reactionId } = subscriptionData.data.removedReaction;\n\n      let _messages = cloneDeep(prev.messages)\n      const updatedMessages = _messages.map(message => ({\n        ..._messages,\n        reactions: message.reactions.filter(({ id }) => id !== reactionId),\n      }));\n\n      return {\n        ...prev,\n        messages: updatedMessages,\n      };\n    },\n  });\n};\n\nexport default Subscribe;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}