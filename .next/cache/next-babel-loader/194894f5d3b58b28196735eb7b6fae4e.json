{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport { useEffect, useContext, useState } from 'react';\nimport { UserContext } from 'context/UserContext';\nimport { useRouter } from 'next/router';\nimport { useQuery } from '@apollo/client';\nimport { useEscapeToClose } from 'hooks';\nimport { COMPANY_NAME } from 'utils/config';\nimport { GET_PRIVATE_CHANNELS } from 'apis/Channel';\nimport { NOTIFICATIONS_SUBSCRIPTION } from 'apis/Notification';\nimport PrivateChat from './PrivateChat';\nimport * as S from './styled';\nconst PrivateChats = () => {\n  const {\n    0: subscribed,\n    1: setSubscribed\n  } = useState(false);\n  const router = useRouter();\n  useEscapeToClose(router.back);\n  const {\n    data: {\n      privateChannels = []\n    } = {},\n    loading,\n    refetch,\n    subscribeToMore\n  } = useQuery(GET_PRIVATE_CHANNELS, {\n    fetchPolicy: 'cache-and-network'\n  });\n  const {\n    user\n  } = useContext(UserContext);\n  useEffect(() => {\n    if (user && !subscribed) {\n      setSubscribed(true);\n      subscribeToMore({\n        document: NOTIFICATIONS_SUBSCRIPTION,\n        variables: {\n          receiverId: user.id,\n          tenant: COMPANY_NAME()\n        },\n        updateQuery: (prev, {\n          subscriptionData\n        }) => {\n          if (!subscriptionData.data) return prev;\n          const {\n            newNotification\n          } = subscriptionData.data;\n          if (newNotification.type === 'direct' && prev.privateChannels.filter(channel => channel.id === newNotification.channel.id).length === 0) {\n            return _objectSpread({}, prev, {\n              privateChannels: [newNotification.channel, ...prev.privateChannels]\n            });\n          }\n          return prev;\n        }\n      });\n    }\n  }, [user, subscribeToMore]);\n  if (loading || !user) {\n    return __jsx(\"div\", null);\n  }\n  return __jsx(S.Wrapper, null, __jsx(\"div\", {\n    className: \"chat-base-header\",\n    onClick: () => refetch()\n  }, __jsx(\"h3\", {\n    className: \"chat-base-header__title\"\n  }, \"Private Chats\")), __jsx(\"div\", {\n    className: \"chat-latest-body\"\n  }, privateChannels && privateChannels.map(privateChannel => {\n    const channelUsernames = privateChannel.url.replace('direct/', '').split('-');\n    const otherUsername = channelUsernames.indexOf(user.username) === 0 ? channelUsernames[1] : channelUsernames[0];\n    return __jsx(PrivateChat, {\n      key: privateChannel.id,\n      username: otherUsername,\n      channel: privateChannel\n    });\n  })));\n};\nexport default PrivateChats;","map":{"version":3,"names":["useEffect","useContext","useState","UserContext","useRouter","useQuery","useEscapeToClose","COMPANY_NAME","GET_PRIVATE_CHANNELS","NOTIFICATIONS_SUBSCRIPTION","PrivateChat","S","PrivateChats","subscribed","setSubscribed","router","back","data","privateChannels","loading","refetch","subscribeToMore","fetchPolicy","user","document","variables","receiverId","id","tenant","updateQuery","prev","subscriptionData","newNotification","type","filter","channel","length","map","privateChannel","channelUsernames","url","replace","split","otherUsername","indexOf","username"],"sources":["/Volumes/MacData/work/ciscord-frontend.git/components/Channel/PrivateChats/PrivateChats.js"],"sourcesContent":["import { useEffect, useContext, useState } from 'react';\nimport { UserContext } from 'context/UserContext';\nimport { useRouter } from 'next/router';\nimport { useQuery } from '@apollo/client';\nimport { useEscapeToClose } from 'hooks';\nimport { COMPANY_NAME } from 'utils/config';\nimport { GET_PRIVATE_CHANNELS } from 'apis/Channel';\nimport { NOTIFICATIONS_SUBSCRIPTION } from 'apis/Notification';\nimport PrivateChat from './PrivateChat';\nimport * as S from './styled';\n\nconst PrivateChats = () => {\n  const [subscribed, setSubscribed] = useState(false);\n\n  const router = useRouter();\n  useEscapeToClose(router.back);\n\n  const { data: { privateChannels = [] } = {}, loading, refetch, subscribeToMore } = useQuery(\n    GET_PRIVATE_CHANNELS,\n    {\n      fetchPolicy: 'cache-and-network',\n    }\n  );\n\n  const { user } = useContext(UserContext);\n\n  useEffect(() => {\n    if (user && !subscribed) {\n      setSubscribed(true);\n      subscribeToMore({\n        document: NOTIFICATIONS_SUBSCRIPTION,\n        variables: { receiverId: user.id, tenant: COMPANY_NAME() },\n        updateQuery: (prev, { subscriptionData }) => {\n          if (!subscriptionData.data) return prev;\n          const { newNotification } = subscriptionData.data;\n\n          if (\n            newNotification.type === 'direct' &&\n            prev.privateChannels.filter(channel => channel.id === newNotification.channel.id)\n              .length === 0\n          ) {\n            return {\n              ...prev,\n              privateChannels: [newNotification.channel, ...prev.privateChannels],\n            };\n          }\n          return prev;\n        },\n      });\n    }\n  }, [user, subscribeToMore]);\n\n  if (loading || !user) {\n    return <div />;\n  }\n\n  return (\n    <S.Wrapper>\n      <div className=\"chat-base-header\" onClick={() => refetch()}>\n        <h3 className=\"chat-base-header__title\">Private Chats</h3>\n      </div>\n      <div className=\"chat-latest-body\">\n        {privateChannels &&\n          privateChannels.map(privateChannel => {\n            const channelUsernames = privateChannel.url.replace('direct/', '').split('-');\n            const otherUsername =\n              channelUsernames.indexOf(user.username) === 0\n                ? channelUsernames[1]\n                : channelUsernames[0];\n            return (\n              <PrivateChat\n                key={privateChannel.id}\n                username={otherUsername}\n                channel={privateChannel}\n              />\n            );\n          })}\n      </div>\n    </S.Wrapper>\n  );\n};\n\nexport default PrivateChats;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}