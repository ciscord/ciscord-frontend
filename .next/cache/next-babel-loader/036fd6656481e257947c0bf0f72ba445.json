{"ast":null,"code":"import gql from 'graphql-tag';\nimport { MessagesFragment } from './Fragments';\nexport const GET_ALL_MESSAGES = gql`\n  query allMessages($channelUrl: String) {\n    messages: allMessages(channelUrl: $channelUrl) {\n      ...message\n    }\n  }\n  ${MessagesFragment}\n`;\nexport const GET_LAST_MESSAGES = gql`\n  query getLastMessages($channelUrl: String!, $cursorId: ID, $lastVisitDate: String) {\n    messages: getLastMessages(\n      channelUrl: $channelUrl\n      cursorId: $cursorId\n      lastVisitDate: $lastVisitDate\n    ) {\n      ...message\n    }\n  }\n  ${MessagesFragment}\n`;\nexport const GET_PREV_MESSAGES = gql`\n  query getPrevMessages($channelUrl: String, $cursorId: ID) {\n    messages: getPrevMessages(channelUrl: $channelUrl, cursorId: $cursorId) {\n      ...message\n    }\n  }\n  ${MessagesFragment}\n`;\nexport const SEARCH_MESSAGES_QUERY = gql`\n  query searchMessages($channelUrl: String, $searchQuery: String) {\n    messages: searchMessages(channelUrl: $channelUrl, searchQuery: $searchQuery) {\n      ...message\n    }\n  }\n  ${MessagesFragment}\n`;\nexport const GET_NEXT_MESSAGES = gql`\n  query getNextMessages($channelUrl: String, $cursorId: ID) {\n    messages: getNextMessages(channelUrl: $channelUrl, cursorId: $cursorId) {\n      ...message\n    }\n  }\n  ${MessagesFragment}\n`;\nexport const EDIT_MESSAGE = gql`\n  mutation editMessage($messageId: String!, $body: String!) {\n    editMessage(body: $body, messageId: $messageId) {\n      body\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const DELETE_MESSAGE = gql`\n  mutation deleteMessage($messageId: String!) {\n    deleteMessage(messageId: $messageId) {\n      id\n    }\n  }\n`;\nexport const MESSAGES_SUBSCRIPTION = gql`\n  subscription newMessage($channelUrl: String, $tenant: String) {\n    newMessage(channelUrl: $channelUrl, tenant: $tenant) {\n      ...message\n    }\n  }\n  ${MessagesFragment}\n`;\nexport const MESSAGE_EDIT_SUBSCRIPTION = gql`\n  subscription editMessage($channelUrl: String, $tenant: String) {\n    editMessage(channelUrl: $channelUrl, tenant: $tenant) {\n      ...message\n    }\n  }\n  ${MessagesFragment}\n`;\nexport const MESSAGE_DELETE_SUBSCRIPTION = gql`\n  subscription deleteMessage($channelUrl: String, $tenant: String) {\n    deleteMessage(channelUrl: $channelUrl, tenant: $tenant) {\n      id\n    }\n  }\n`;\nexport const NEW_REACTION_SUBSCRIPTION = gql`\n  subscription newReaction($channelUrl: String, $tenant: String) {\n    newReaction(channelUrl: $channelUrl, tenant: $tenant) {\n      id\n      name\n      createdAt\n      updatedAt\n      users {\n        id\n        username\n        image\n      }\n      message {\n        id\n      }\n    }\n  }\n`;\nexport const UPDATE_REACTION_SUBSCRIPTION = gql`\n  subscription updatedReaction($channelUrl: String, $tenant: String) {\n    updatedReaction(channelUrl: $channelUrl, tenant: $tenant) {\n      id\n      name\n      createdAt\n      updatedAt\n      users {\n        id\n        username\n        image\n      }\n      message {\n        id\n      }\n    }\n  }\n`;\nexport const REMOVE_REACTION_SUBSCRIPTION = gql`\n  subscription removedReaction($channelUrl: String, $tenant: String) {\n    removedReaction(channelUrl: $channelUrl, tenant: $tenant) {\n      id\n    }\n  }\n`;\nexport const TOGGLE_REACTION = gql`\n  mutation toggleReaction($messageId: String!, $name: String!) {\n    toggleReaction(messageId: $messageId, name: $name) {\n      id\n      name\n    }\n  }\n`;\nexport const SEND_MESSAGE = gql`\n  mutation sendMessage(\n    $body: String!\n    $channelUrl: String!\n    $urlList: [String!]\n    $mentions: [String!]\n    $communityUrl: String!\n  ) {\n    sendMessage(\n      body: $body\n      channelUrl: $channelUrl\n      urlList: $urlList\n      mentions: $mentions\n      communityUrl: $communityUrl\n    ) {\n      id\n      body\n      createdAt\n      urlList\n      author {\n        id\n        username\n        image\n      }\n    }\n  }\n`;\nexport const SEND_NOTIFICATION = gql`\n  mutation sendNotification(\n    $receiverName: String\n    $messageId: ID!\n    $channelUrl: String\n    $communityUrl: String\n  ) {\n    sendNotification(\n      receiverName: $receiverName\n      messageId: $messageId\n      channelUrl: $channelUrl\n      communityUrl: $communityUrl\n      type: \"mention\"\n    ) {\n      id\n    }\n  }\n`;\nexport const SET_USER_TYPING_STATUS = gql`\n  mutation setUserTypingStatus($channelUrl: String, $isTyping: Boolean) {\n    setUserTypingStatus(channelUrl: $channelUrl, isTyping: $isTyping) {\n      username\n      isTyping\n    }\n  }\n`;\nexport const SEARCH_MESSAGES = gql`\n  mutation searchMessages($channelUrl: String, $searchQuery: String) {\n    messages: searchMessages(channelUrl: $channelUrl, searchQuery: $searchQuery) {\n      ...message\n    }\n  }\n  ${MessagesFragment}\n`;\nexport const REPLY_MESSAGE = gql`\n  mutation replyMessage(\n    $parentId: String!\n    $body: String!\n    $urlList: [String!]\n  ) {\n    replyMessage(parentId: $parentId, body: $body, urlList: $urlList) {\n      id\n      body\n      urlList\n      author {\n        id\n        username\n        image\n        role {\n          color\n        }\n      }\n      parent {\n        id\n      }\n    }\n  }\n`;\nexport const EDIT_REPLY_MESSAGE = gql`\n  mutation editReplyMessage($messageId: String!, $body: String!) {\n    editReplyMessage(body: $body, messageId: $messageId) {\n      body\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const DELETE_REPLY_MESSAGE = gql`\n  mutation deleteReplyMessage($messageId: String!) {\n    deleteReplyMessage(messageId: $messageId) {\n      id\n    }\n  }\n`;\nexport const GET_UNREAD_MESSAGES = gql`\n  query getUnreadMessagesCount($channelUrl: String, $username: String) {\n    getUnreadMessagesCount(channelUrl: $channelUrl, username: $username) {\n      messages {\n        body\n        createdAt\n        author {\n          username\n          image\n          isOnline\n          fullname\n        }\n      }\n      fromNewUser\n      user {\n        id\n        fullname\n        username\n        bio\n        email\n        social\n        image\n        isOnline\n        owner\n        channelsInfo {\n          id\n          channel {\n            id\n            name\n            url\n          }\n          lastUpdateAt\n        }\n      }\n    }\n  }\n`;","map":{"version":3,"names":["gql","MessagesFragment","GET_ALL_MESSAGES","GET_LAST_MESSAGES","GET_PREV_MESSAGES","SEARCH_MESSAGES_QUERY","GET_NEXT_MESSAGES","EDIT_MESSAGE","DELETE_MESSAGE","MESSAGES_SUBSCRIPTION","MESSAGE_EDIT_SUBSCRIPTION","MESSAGE_DELETE_SUBSCRIPTION","NEW_REACTION_SUBSCRIPTION","UPDATE_REACTION_SUBSCRIPTION","REMOVE_REACTION_SUBSCRIPTION","TOGGLE_REACTION","SEND_MESSAGE","SEND_NOTIFICATION","SET_USER_TYPING_STATUS","SEARCH_MESSAGES","REPLY_MESSAGE","EDIT_REPLY_MESSAGE","DELETE_REPLY_MESSAGE","GET_UNREAD_MESSAGES"],"sources":["/Volumes/MacData/work/ciscord-frontend.git/apis/Message.js"],"sourcesContent":["import gql from 'graphql-tag';\nimport { MessagesFragment } from './Fragments';\n\nexport const GET_ALL_MESSAGES = gql`\n  query allMessages($channelUrl: String) {\n    messages: allMessages(channelUrl: $channelUrl) {\n      ...message\n    }\n  }\n  ${MessagesFragment}\n`;\n\nexport const GET_LAST_MESSAGES = gql`\n  query getLastMessages($channelUrl: String!, $cursorId: ID, $lastVisitDate: String) {\n    messages: getLastMessages(\n      channelUrl: $channelUrl\n      cursorId: $cursorId\n      lastVisitDate: $lastVisitDate\n    ) {\n      ...message\n    }\n  }\n  ${MessagesFragment}\n`;\n\nexport const GET_PREV_MESSAGES = gql`\n  query getPrevMessages($channelUrl: String, $cursorId: ID) {\n    messages: getPrevMessages(channelUrl: $channelUrl, cursorId: $cursorId) {\n      ...message\n    }\n  }\n  ${MessagesFragment}\n`;\n\nexport const SEARCH_MESSAGES_QUERY = gql`\n  query searchMessages($channelUrl: String, $searchQuery: String) {\n    messages: searchMessages(channelUrl: $channelUrl, searchQuery: $searchQuery) {\n      ...message\n    }\n  }\n  ${MessagesFragment}\n`;\n\nexport const GET_NEXT_MESSAGES = gql`\n  query getNextMessages($channelUrl: String, $cursorId: ID) {\n    messages: getNextMessages(channelUrl: $channelUrl, cursorId: $cursorId) {\n      ...message\n    }\n  }\n  ${MessagesFragment}\n`;\n\nexport const EDIT_MESSAGE = gql`\n  mutation editMessage($messageId: String!, $body: String!) {\n    editMessage(body: $body, messageId: $messageId) {\n      body\n      createdAt\n      updatedAt\n    }\n  }\n`;\n\nexport const DELETE_MESSAGE = gql`\n  mutation deleteMessage($messageId: String!) {\n    deleteMessage(messageId: $messageId) {\n      id\n    }\n  }\n`;\n\nexport const MESSAGES_SUBSCRIPTION = gql`\n  subscription newMessage($channelUrl: String, $tenant: String) {\n    newMessage(channelUrl: $channelUrl, tenant: $tenant) {\n      ...message\n    }\n  }\n  ${MessagesFragment}\n`;\n\nexport const MESSAGE_EDIT_SUBSCRIPTION = gql`\n  subscription editMessage($channelUrl: String, $tenant: String) {\n    editMessage(channelUrl: $channelUrl, tenant: $tenant) {\n      ...message\n    }\n  }\n  ${MessagesFragment}\n`;\n\nexport const MESSAGE_DELETE_SUBSCRIPTION = gql`\n  subscription deleteMessage($channelUrl: String, $tenant: String) {\n    deleteMessage(channelUrl: $channelUrl, tenant: $tenant) {\n      id\n    }\n  }\n`;\n\nexport const NEW_REACTION_SUBSCRIPTION = gql`\n  subscription newReaction($channelUrl: String, $tenant: String) {\n    newReaction(channelUrl: $channelUrl, tenant: $tenant) {\n      id\n      name\n      createdAt\n      updatedAt\n      users {\n        id\n        username\n        image\n      }\n      message {\n        id\n      }\n    }\n  }\n`;\n\nexport const UPDATE_REACTION_SUBSCRIPTION = gql`\n  subscription updatedReaction($channelUrl: String, $tenant: String) {\n    updatedReaction(channelUrl: $channelUrl, tenant: $tenant) {\n      id\n      name\n      createdAt\n      updatedAt\n      users {\n        id\n        username\n        image\n      }\n      message {\n        id\n      }\n    }\n  }\n`;\n\nexport const REMOVE_REACTION_SUBSCRIPTION = gql`\n  subscription removedReaction($channelUrl: String, $tenant: String) {\n    removedReaction(channelUrl: $channelUrl, tenant: $tenant) {\n      id\n    }\n  }\n`;\n\nexport const TOGGLE_REACTION = gql`\n  mutation toggleReaction($messageId: String!, $name: String!) {\n    toggleReaction(messageId: $messageId, name: $name) {\n      id\n      name\n    }\n  }\n`;\n\nexport const SEND_MESSAGE = gql`\n  mutation sendMessage(\n    $body: String!\n    $channelUrl: String!\n    $urlList: [String!]\n    $mentions: [String!]\n    $communityUrl: String!\n  ) {\n    sendMessage(\n      body: $body\n      channelUrl: $channelUrl\n      urlList: $urlList\n      mentions: $mentions\n      communityUrl: $communityUrl\n    ) {\n      id\n      body\n      createdAt\n      urlList\n      author {\n        id\n        username\n        image\n      }\n    }\n  }\n`;\n\nexport const SEND_NOTIFICATION = gql`\n  mutation sendNotification(\n    $receiverName: String\n    $messageId: ID!\n    $channelUrl: String\n    $communityUrl: String\n  ) {\n    sendNotification(\n      receiverName: $receiverName\n      messageId: $messageId\n      channelUrl: $channelUrl\n      communityUrl: $communityUrl\n      type: \"mention\"\n    ) {\n      id\n    }\n  }\n`;\n\nexport const SET_USER_TYPING_STATUS = gql`\n  mutation setUserTypingStatus($channelUrl: String, $isTyping: Boolean) {\n    setUserTypingStatus(channelUrl: $channelUrl, isTyping: $isTyping) {\n      username\n      isTyping\n    }\n  }\n`;\n\nexport const SEARCH_MESSAGES = gql`\n  mutation searchMessages($channelUrl: String, $searchQuery: String) {\n    messages: searchMessages(channelUrl: $channelUrl, searchQuery: $searchQuery) {\n      ...message\n    }\n  }\n  ${MessagesFragment}\n`;\n\nexport const REPLY_MESSAGE = gql`\n  mutation replyMessage(\n    $parentId: String!\n    $body: String!\n    $urlList: [String!]\n  ) {\n    replyMessage(parentId: $parentId, body: $body, urlList: $urlList) {\n      id\n      body\n      urlList\n      author {\n        id\n        username\n        image\n        role {\n          color\n        }\n      }\n      parent {\n        id\n      }\n    }\n  }\n`;\n\nexport const EDIT_REPLY_MESSAGE = gql`\n  mutation editReplyMessage($messageId: String!, $body: String!) {\n    editReplyMessage(body: $body, messageId: $messageId) {\n      body\n      createdAt\n      updatedAt\n    }\n  }\n`;\n\nexport const DELETE_REPLY_MESSAGE = gql`\n  mutation deleteReplyMessage($messageId: String!) {\n    deleteReplyMessage(messageId: $messageId) {\n      id\n    }\n  }\n`;\n\nexport const GET_UNREAD_MESSAGES = gql`\n  query getUnreadMessagesCount($channelUrl: String, $username: String) {\n    getUnreadMessagesCount(channelUrl: $channelUrl, username: $username) {\n      messages {\n        body\n        createdAt\n        author {\n          username\n          image\n          isOnline\n          fullname\n        }\n      }\n      fromNewUser\n      user {\n        id\n        fullname\n        username\n        bio\n        email\n        social\n        image\n        isOnline\n        owner\n        channelsInfo {\n          id\n          channel {\n            id\n            name\n            url\n          }\n          lastUpdateAt\n        }\n      }\n    }\n  }\n`;\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,aAAa;AAC7B,SAASC,gBAAgB,QAAQ,aAAa;AAE9C,OAAO,MAAMC,gBAAgB,GAAGF,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA,IAAIC,gBAAiB;AACrB,CAAC;AAED,OAAO,MAAME,iBAAiB,GAAGH,GAAI;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,gBAAiB;AACrB,CAAC;AAED,OAAO,MAAMG,iBAAiB,GAAGJ,GAAI;AACrC;AACA;AACA;AACA;AACA;AACA,IAAIC,gBAAiB;AACrB,CAAC;AAED,OAAO,MAAMI,qBAAqB,GAAGL,GAAI;AACzC;AACA;AACA;AACA;AACA;AACA,IAAIC,gBAAiB;AACrB,CAAC;AAED,OAAO,MAAMK,iBAAiB,GAAGN,GAAI;AACrC;AACA;AACA;AACA;AACA;AACA,IAAIC,gBAAiB;AACrB,CAAC;AAED,OAAO,MAAMM,YAAY,GAAGP,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMQ,cAAc,GAAGR,GAAI;AAClC;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMS,qBAAqB,GAAGT,GAAI;AACzC;AACA;AACA;AACA;AACA;AACA,IAAIC,gBAAiB;AACrB,CAAC;AAED,OAAO,MAAMS,yBAAyB,GAAGV,GAAI;AAC7C;AACA;AACA;AACA;AACA;AACA,IAAIC,gBAAiB;AACrB,CAAC;AAED,OAAO,MAAMU,2BAA2B,GAAGX,GAAI;AAC/C;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMY,yBAAyB,GAAGZ,GAAI;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMa,4BAA4B,GAAGb,GAAI;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMc,4BAA4B,GAAGd,GAAI;AAChD;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMe,eAAe,GAAGf,GAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMgB,YAAY,GAAGhB,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMiB,iBAAiB,GAAGjB,GAAI;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMkB,sBAAsB,GAAGlB,GAAI;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMmB,eAAe,GAAGnB,GAAI;AACnC;AACA;AACA;AACA;AACA;AACA,IAAIC,gBAAiB;AACrB,CAAC;AAED,OAAO,MAAMmB,aAAa,GAAGpB,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMqB,kBAAkB,GAAGrB,GAAI;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMsB,oBAAoB,GAAGtB,GAAI;AACxC;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMuB,mBAAmB,GAAGvB,GAAI;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC"},"metadata":{},"sourceType":"module"}