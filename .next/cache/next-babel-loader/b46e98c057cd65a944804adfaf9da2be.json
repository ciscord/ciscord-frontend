{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport { UploadManagerContext } from 'context/UploadManager';\nimport * as S from './ProgressBar.styled';\nconst ProgressBar = () => {\n  const {\n    uploadProgress: {\n      step,\n      label,\n      maxSteps\n    }\n  } = useContext(UploadManagerContext);\n  return label ? __jsx(S.Wrapper, null, __jsx(S.Container, null, __jsx(S.Filled, {\n    style: {\n      width: `${100 * step / maxSteps}%`\n    }\n  }), __jsx(S.Label, null, label))) : null;\n};\nexport default ProgressBar;","map":{"version":3,"names":["React","useContext","UploadManagerContext","S","ProgressBar","uploadProgress","step","label","maxSteps","width"],"sources":["/Volumes/MacData/work/ciscord-frontend.git/components/UI/ProgressBar/ProgressBar.js"],"sourcesContent":["import React, { useContext } from 'react';\n\nimport { UploadManagerContext } from 'context/UploadManager';\nimport * as S from './ProgressBar.styled';\n\nconst ProgressBar = () => {\n  const {\n    uploadProgress: { step, label, maxSteps },\n  } = useContext(UploadManagerContext);\n\n  return label ? (\n    <S.Wrapper>\n      <S.Container>\n        <S.Filled style={{ width: `${(100 * step) / maxSteps}%` }} />\n        <S.Label>{label}</S.Label>\n      </S.Container>\n    </S.Wrapper>\n  ) : null;\n};\n\nexport default ProgressBar;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AAEzC,SAASC,oBAAoB,QAAQ,uBAAuB;AAC5D,OAAO,KAAKC,CAAC,MAAM,sBAAsB;AAEzC,MAAMC,WAAW,GAAG,MAAM;EACxB,MAAM;IACJC,cAAc,EAAE;MAAEC,IAAI;MAAEC,KAAK;MAAEC;IAAS;EAC1C,CAAC,GAAGP,UAAU,CAACC,oBAAoB,CAAC;EAEpC,OAAOK,KAAK,GACV,MAAC,CAAC,CAAC,OAAO,QACR,MAAC,CAAC,CAAC,SAAS,QACV,MAAC,CAAC,CAAC,MAAM;IAAC,KAAK,EAAE;MAAEE,KAAK,EAAG,GAAG,GAAG,GAAGH,IAAI,GAAIE,QAAS;IAAG;EAAE,EAAG,EAC7D,MAAC,CAAC,CAAC,KAAK,QAAED,KAAK,CAAW,CACd,CACJ,GACV,IAAI;AACV,CAAC;AAED,eAAeH,WAAW"},"metadata":{},"sourceType":"module"}